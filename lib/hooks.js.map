{
  "version": 3,
  "sources": ["../src/hooks.js"],
  "sourcesContent": ["'use strict';\r\n\r\nconst _ = require('lodash');\r\nconst { logger } = require('./utils/logger');\r\n\r\nconst debug = logger.debugContext('hooks');\r\n\r\nconst hookTypes = {\r\n  beforeValidate: { params: 2 },\r\n  afterValidate: { params: 2 },\r\n  validationFailed: { params: 3 },\r\n  beforeCreate: { params: 2 },\r\n  afterCreate: { params: 2 },\r\n  beforeDestroy: { params: 2 },\r\n  afterDestroy: { params: 2 },\r\n  beforeRestore: { params: 2 },\r\n  afterRestore: { params: 2 },\r\n  beforeUpdate: { params: 2 },\r\n  afterUpdate: { params: 2 },\r\n  beforeSave: { params: 2, proxies: ['beforeUpdate', 'beforeCreate'] },\r\n  afterSave: { params: 2, proxies: ['afterUpdate', 'afterCreate'] },\r\n  beforeUpsert: { params: 2 },\r\n  afterUpsert: { params: 2 },\r\n  beforeBulkCreate: { params: 2 },\r\n  afterBulkCreate: { params: 2 },\r\n  beforeBulkDestroy: { params: 1 },\r\n  afterBulkDestroy: { params: 1 },\r\n  beforeBulkRestore: { params: 1 },\r\n  afterBulkRestore: { params: 1 },\r\n  beforeBulkUpdate: { params: 1 },\r\n  afterBulkUpdate: { params: 1 },\r\n  beforeFind: { params: 1 },\r\n  beforeFindAfterExpandIncludeAll: { params: 1 },\r\n  beforeFindAfterOptions: { params: 1 },\r\n  afterFind: { params: 2 },\r\n  beforeCount: { params: 1 },\r\n  beforeDefine: { params: 2, sync: true, noModel: true },\r\n  afterDefine: { params: 1, sync: true, noModel: true },\r\n  beforeInit: { params: 2, sync: true, noModel: true },\r\n  afterInit: { params: 1, sync: true, noModel: true },\r\n  beforeAssociate: { params: 2, sync: true },\r\n  afterAssociate: { params: 2, sync: true },\r\n  beforeConnect: { params: 1, noModel: true },\r\n  afterConnect: { params: 2, noModel: true },\r\n  beforeDisconnect: { params: 1, noModel: true },\r\n  afterDisconnect: { params: 1, noModel: true },\r\n  beforeSync: { params: 1 },\r\n  afterSync: { params: 1 },\r\n  beforeBulkSync: { params: 1 },\r\n  afterBulkSync: { params: 1 },\r\n  beforeQuery: { params: 2 },\r\n  afterQuery: { params: 2 },\r\n};\r\nexport const hooks = hookTypes;\r\n\r\n/**\r\n * get array of current hook and its proxies combined\r\n *\r\n * @param {string} hookType any hook type @see {@link hookTypes}\r\n *\r\n * @private\r\n */\r\nconst getProxiedHooks = hookType => (hookTypes[hookType].proxies\r\n    ? hookTypes[hookType].proxies.concat(hookType)\r\n    : [hookType]);\r\n\r\nfunction getHooks(hooked, hookType) {\r\n  return (hooked.options.hooks || {})[hookType] || [];\r\n}\r\n\r\nconst Hooks = {\r\n  /**\r\n   * Process user supplied hooks definition\r\n   *\r\n   * @param {object} hooks hooks definition\r\n   *\r\n   * @private\r\n   * @memberof Sequelize\r\n   * @memberof Sequelize.Model\r\n   */\r\n  _setupHooks(hooks) {\r\n    this.options.hooks = {};\r\n    _.map(hooks || {}, (hooksArray, hookName) => {\r\n      if (!Array.isArray(hooksArray)) {\r\n        hooksArray = [hooksArray];\r\n      }\r\n\r\n      for (const hookFn of hooksArray) {\r\n        this.addHook(hookName, hookFn);\r\n      }\r\n    });\r\n  },\r\n\r\n  async runHooks(hooks, ...hookArgs) {\r\n    if (!hooks) {\r\n      throw new Error('runHooks requires at least 1 argument');\r\n    }\r\n\r\n    let hookType;\r\n\r\n    if (typeof hooks === 'string') {\r\n      hookType = hooks;\r\n      hooks = getHooks(this, hookType);\r\n\r\n      if (this.sequelize) {\r\n        hooks = hooks.concat(getHooks(this.sequelize, hookType));\r\n      }\r\n    }\r\n\r\n    if (!Array.isArray(hooks)) {\r\n      hooks = [hooks];\r\n    }\r\n\r\n    // synchronous hooks\r\n    if (hookTypes[hookType] && hookTypes[hookType].sync) {\r\n      for (let hook of hooks) {\r\n        if (typeof hook === 'object') {\r\n          hook = hook.fn;\r\n        }\r\n\r\n        debug(`running hook(sync) ${hookType}`);\r\n        hook.apply(this, hookArgs);\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    // asynchronous hooks (default)\r\n    for (let hook of hooks) {\r\n      if (typeof hook === 'object') {\r\n        hook = hook.fn;\r\n      }\r\n\r\n      debug(`running hook ${hookType}`);\r\n      await hook.apply(this, hookArgs);\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Add a hook to the model\r\n   *\r\n   * @param {string}          hookType hook name @see {@link hookTypes}\r\n   * @param {string|Function} [name] Provide a name for the hook function. It can be used to remove the hook later or to order hooks based on some sort of priority system in the future.\r\n   * @param {Function}        fn The hook function\r\n   *\r\n   * @memberof Sequelize\r\n   * @memberof Sequelize.Model\r\n   */\r\n  addHook(hookType, name, fn) {\r\n    if (typeof name === 'function') {\r\n      fn = name;\r\n      name = null;\r\n    }\r\n\r\n    debug(`adding hook ${hookType}`);\r\n    // check for proxies, add them too\r\n    hookType = getProxiedHooks(hookType);\r\n\r\n    for (const type of hookType) {\r\n      const hooks = getHooks(this, type);\r\n      hooks.push(name ? { name, fn } : fn);\r\n      this.options.hooks[type] = hooks;\r\n    }\r\n\r\n    return this;\r\n  },\r\n\r\n  /**\r\n   * Remove hook from the model\r\n   *\r\n   * @param {string} hookType @see {@link hookTypes}\r\n   * @param {string|Function} name name of hook or function reference which was attached\r\n   *\r\n   * @memberof Sequelize\r\n   * @memberof Sequelize.Model\r\n   */\r\n  removeHook(hookType, name) {\r\n    const isReference = typeof name === 'function';\r\n\r\n    if (!this.hasHook(hookType)) {\r\n      return this;\r\n    }\r\n\r\n    debug(`removing hook ${hookType}`);\r\n\r\n    // check for proxies, add them too\r\n    hookType = getProxiedHooks(hookType);\r\n\r\n    for (const type of hookType) {\r\n      this.options.hooks[type] = this.options.hooks[type].filter(hook => {\r\n        if (isReference && typeof hook === 'function') {\r\n          return hook !== name; // check if same method\r\n        }\r\n\r\n        if (!isReference && typeof hook === 'object') {\r\n          return hook.name !== name;\r\n        }\r\n\r\n        return true;\r\n      });\r\n    }\r\n\r\n    return this;\r\n  },\r\n\r\n  /**\r\n   * Check whether the mode has any hooks of this type\r\n   *\r\n   * @param {string} hookType @see {@link hookTypes}\r\n   *\r\n   * @alias hasHooks\r\n   *\r\n   * @memberof Sequelize\r\n   * @memberof Sequelize.Model\r\n   */\r\n  hasHook(hookType) {\r\n    return this.options.hooks[hookType] && this.options.hooks[hookType].length > 0;\r\n  },\r\n};\r\nHooks.hasHooks = Hooks.hasHook;\r\n\r\nexport function applyTo(target, isModel = false) {\r\n  _.mixin(target, Hooks);\r\n\r\n  for (const hook of Object.keys(hookTypes)) {\r\n    if (isModel && hookTypes[hook].noModel) {\r\n      continue;\r\n    }\r\n\r\n    target[hook] = function (name, callback) {\r\n      return this.addHook(hook, name, callback);\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * A hook that is run before validation\r\n *\r\n * @param {string}   name\r\n * @param {Function} fn   A callback function that is called with instance, options\r\n * @name beforeValidate\r\n * @memberof Sequelize.Model\r\n */\r\n\r\n/**\r\n * A hook that is run after validation\r\n *\r\n * @param {string}   name\r\n * @param {Function} fn   A callback function that is called with instance, options\r\n * @name afterValidate\r\n * @memberof Sequelize.Model\r\n */\r\n\r\n/**\r\n * A hook that is run when validation fails\r\n *\r\n * @param {string}   name\r\n * @param {Function} fn   A callback function that is called with instance, options, error. Error is the\r\n * SequelizeValidationError. If the callback throws an error, it will replace the original validation error.\r\n * @name validationFailed\r\n * @memberof Sequelize.Model\r\n */\r\n\r\n/**\r\n * A hook that is run before creating a single instance\r\n *\r\n * @param {string}   name\r\n * @param {Function} fn   A callback function that is called with attributes, options\r\n * @name beforeCreate\r\n * @memberof Sequelize.Model\r\n */\r\n\r\n/**\r\n * A hook that is run after creating a single instance\r\n *\r\n * @param {string}   name\r\n * @param {Function} fn   A callback function that is called with attributes, options\r\n * @name afterCreate\r\n * @memberof Sequelize.Model\r\n */\r\n\r\n/**\r\n * A hook that is run before creating or updating a single instance, It proxies `beforeCreate` and `beforeUpdate`\r\n *\r\n * @param {string}   name\r\n * @param {Function} fn   A callback function that is called with attributes, options\r\n * @name beforeSave\r\n * @memberof Sequelize.Model\r\n */\r\n\r\n/**\r\n * A hook that is run before upserting\r\n *\r\n * @param {string}   name\r\n * @param {Function} fn   A callback function that is called with attributes, options\r\n * @name beforeUpsert\r\n * @memberof Sequelize.Model\r\n */\r\n\r\n/**\r\n * A hook that is run after upserting\r\n *\r\n * @param {string}   name\r\n * @param {Function} fn   A callback function that is called with the result of upsert(), options\r\n * @name afterUpsert\r\n * @memberof Sequelize.Model\r\n */\r\n\r\n/**\r\n  * A hook that is run after creating or updating a single instance, It proxies `afterCreate` and `afterUpdate`\r\n *\r\n  * @param {string}   name\r\n  * @param {Function} fn   A callback function that is called with attributes, options\r\n  * @name afterSave\r\n  * @memberof Sequelize.Model\r\n  */\r\n\r\n/**\r\n * A hook that is run before destroying a single instance\r\n *\r\n * @param {string}   name\r\n * @param {Function} fn   A callback function that is called with instance, options\r\n *\r\n * @name beforeDestroy\r\n * @memberof Sequelize.Model\r\n */\r\n\r\n/**\r\n * A hook that is run after destroying a single instance\r\n *\r\n * @param {string}   name\r\n * @param {Function} fn   A callback function that is called with instance, options\r\n *\r\n * @name afterDestroy\r\n * @memberof Sequelize.Model\r\n */\r\n\r\n/**\r\n * A hook that is run before restoring a single instance\r\n *\r\n * @param {string}   name\r\n * @param {Function} fn   A callback function that is called with instance, options\r\n *\r\n * @name beforeRestore\r\n * @memberof Sequelize.Model\r\n */\r\n\r\n/**\r\n * A hook that is run after restoring a single instance\r\n *\r\n * @param {string}   name\r\n * @param {Function} fn   A callback function that is called with instance, options\r\n *\r\n * @name afterRestore\r\n * @memberof Sequelize.Model\r\n */\r\n\r\n/**\r\n * A hook that is run before updating a single instance\r\n *\r\n * @param {string}   name\r\n * @param {Function} fn   A callback function that is called with instance, options\r\n * @name beforeUpdate\r\n * @memberof Sequelize.Model\r\n */\r\n\r\n/**\r\n * A hook that is run after updating a single instance\r\n *\r\n * @param {string}   name\r\n * @param {Function} fn   A callback function that is called with instance, options\r\n * @name afterUpdate\r\n * @memberof Sequelize.Model\r\n */\r\n\r\n/**\r\n * A hook that is run before creating instances in bulk\r\n *\r\n * @param {string}   name\r\n * @param {Function} fn   A callback function that is called with instances, options\r\n * @name beforeBulkCreate\r\n * @memberof Sequelize.Model\r\n */\r\n\r\n/**\r\n * A hook that is run after creating instances in bulk\r\n *\r\n * @param {string}   name\r\n * @param {Function} fn   A callback function that is called with instances, options\r\n * @name afterBulkCreate\r\n * @memberof Sequelize.Model\r\n */\r\n\r\n/**\r\n * A hook that is run before destroying instances in bulk\r\n *\r\n * @param {string}   name\r\n * @param {Function} fn   A callback function that is called with options\r\n *\r\n * @name beforeBulkDestroy\r\n * @memberof Sequelize.Model\r\n */\r\n\r\n/**\r\n * A hook that is run after destroying instances in bulk\r\n *\r\n * @param {string}   name\r\n * @param {Function} fn   A callback function that is called with options\r\n *\r\n * @name afterBulkDestroy\r\n * @memberof Sequelize.Model\r\n */\r\n\r\n/**\r\n * A hook that is run before restoring instances in bulk\r\n *\r\n * @param {string}   name\r\n * @param {Function} fn   A callback function that is called with options\r\n *\r\n * @name beforeBulkRestore\r\n * @memberof Sequelize.Model\r\n */\r\n\r\n/**\r\n * A hook that is run after restoring instances in bulk\r\n *\r\n * @param {string}   name\r\n * @param {Function} fn   A callback function that is called with options\r\n *\r\n * @name afterBulkRestore\r\n * @memberof Sequelize.Model\r\n */\r\n\r\n/**\r\n * A hook that is run before updating instances in bulk\r\n *\r\n * @param {string}   name\r\n * @param {Function} fn   A callback function that is called with options\r\n * @name beforeBulkUpdate\r\n * @memberof Sequelize.Model\r\n */\r\n\r\n/**\r\n * A hook that is run after updating instances in bulk\r\n *\r\n * @param {string}   name\r\n * @param {Function} fn   A callback function that is called with options\r\n * @name afterBulkUpdate\r\n * @memberof Sequelize.Model\r\n */\r\n\r\n/**\r\n * A hook that is run before a find (select) query\r\n *\r\n * @param {string}   name\r\n * @param {Function} fn   A callback function that is called with options\r\n * @name beforeFind\r\n * @memberof Sequelize.Model\r\n */\r\n\r\n/**\r\n * A hook that is run before a find (select) query, after any { include: {all: ...} } options are expanded\r\n *\r\n * @param {string}   name\r\n * @param {Function} fn   A callback function that is called with options\r\n * @name beforeFindAfterExpandIncludeAll\r\n * @memberof Sequelize.Model\r\n */\r\n\r\n/**\r\n * A hook that is run before a find (select) query, after all option parsing is complete\r\n *\r\n * @param {string}   name\r\n * @param {Function} fn   A callback function that is called with options\r\n * @name beforeFindAfterOptions\r\n * @memberof Sequelize.Model\r\n */\r\n\r\n/**\r\n * A hook that is run after a find (select) query\r\n *\r\n * @param {string}   name\r\n * @param {Function} fn   A callback function that is called with instance(s), options\r\n * @name afterFind\r\n * @memberof Sequelize.Model\r\n */\r\n\r\n/**\r\n * A hook that is run before a count query\r\n *\r\n * @param {string}   name\r\n * @param {Function} fn   A callback function that is called with options\r\n * @name beforeCount\r\n * @memberof Sequelize.Model\r\n */\r\n\r\n/**\r\n * A hook that is run before a define call\r\n *\r\n * @param {string}   name\r\n * @param {Function} fn   A callback function that is called with attributes, options\r\n * @name beforeDefine\r\n * @memberof Sequelize\r\n */\r\n\r\n/**\r\n * A hook that is run after a define call\r\n *\r\n * @param {string}   name\r\n * @param {Function} fn   A callback function that is called with factory\r\n * @name afterDefine\r\n * @memberof Sequelize\r\n */\r\n\r\n/**\r\n * A hook that is run before Sequelize() call\r\n *\r\n * @param {string}   name\r\n * @param {Function} fn   A callback function that is called with config, options\r\n * @name beforeInit\r\n * @memberof Sequelize\r\n */\r\n\r\n/**\r\n * A hook that is run after Sequelize() call\r\n *\r\n * @param {string}   name\r\n * @param {Function} fn   A callback function that is called with sequelize\r\n * @name afterInit\r\n * @memberof Sequelize\r\n */\r\n\r\n/**\r\n * A hook that is run before a connection is created\r\n *\r\n * @param {string}   name\r\n * @param {Function} fn   A callback function that is called with config passed to connection\r\n * @name beforeConnect\r\n * @memberof Sequelize\r\n */\r\n\r\n/**\r\n * A hook that is run after a connection is created\r\n *\r\n * @param {string}   name\r\n * @param {Function} fn   A callback function that is called with the connection object and the config passed to connection\r\n * @name afterConnect\r\n * @memberof Sequelize\r\n */\r\n\r\n/**\r\n * A hook that is run before a connection is disconnected\r\n *\r\n * @param {string}   name\r\n * @param {Function} fn   A callback function that is called with the connection object\r\n * @name beforeDisconnect\r\n * @memberof Sequelize\r\n */\r\n\r\n/**\r\n * A hook that is run after a connection is disconnected\r\n *\r\n * @param {string}   name\r\n * @param {Function} fn   A callback function that is called with the connection object\r\n * @name afterDisconnect\r\n * @memberof Sequelize\r\n */\r\n\r\n/**\r\n * A hook that is run before Model.sync call\r\n *\r\n * @param {string}   name\r\n * @param {Function} fn   A callback function that is called with options passed to Model.sync\r\n * @name beforeSync\r\n * @memberof Sequelize\r\n */\r\n\r\n/**\r\n * A hook that is run after Model.sync call\r\n *\r\n * @param {string}   name\r\n * @param {Function} fn   A callback function that is called with options passed to Model.sync\r\n * @name afterSync\r\n * @memberof Sequelize\r\n */\r\n\r\n/**\r\n  * A hook that is run before sequelize.sync call\r\n *\r\n  * @param {string}   name\r\n  * @param {Function} fn   A callback function that is called with options passed to sequelize.sync\r\n  * @name beforeBulkSync\r\n  * @memberof Sequelize\r\n  */\r\n\r\n/**\r\n  * A hook that is run after sequelize.sync call\r\n *\r\n  * @param {string}   name\r\n  * @param {Function} fn   A callback function that is called with options passed to sequelize.sync\r\n  * @name afterBulkSync\r\n  * @memberof Sequelize\r\n  */\r\n"],
  "mappings": "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",
  "names": []
}
