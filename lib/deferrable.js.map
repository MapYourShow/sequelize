{
  "version": 3,
  "sources": ["../src/deferrable.ts"],
  "sourcesContent": ["import type { AbstractQueryGenerator } from './dialects/abstract/query-generator.js';\r\nimport { classToInvokable } from './utils/index.js';\r\n\r\n/**\r\n * Can be used to\r\n * make foreign key constraints deferrable and to set the constaints within a\r\n * transaction. This is only supported in PostgreSQL.\r\n *\r\n * The foreign keys can be configured like this. It will create a foreign key\r\n * that will check the constraints immediately when the data was inserted.\r\n *\r\n * ```js\r\n * class MyModel extends Model {}\r\n * MyModel.init({\r\n *   foreign_id: {\r\n *     type: DataTypes.INTEGER,\r\n *     references: {\r\n *       model: OtherModel,\r\n *       key: 'id',\r\n *       deferrable: Sequelize.Deferrable.INITIALLY_IMMEDIATE\r\n *     }\r\n *   }\r\n * }, { sequelize });\r\n * ```\r\n *\r\n * The constraints can be configured in a transaction like this. It will\r\n * trigger a query once the transaction has been started and set the constraints\r\n * to be checked at the very end of the transaction.\r\n *\r\n * ```js\r\n * sequelize.transaction({\r\n *   deferrable: Sequelize.Deferrable.SET_DEFERRED\r\n * });\r\n * ```\r\n */\r\nexport class Deferrable {\r\n  static toString(queryGenerator: AbstractQueryGenerator) {\r\n    return new this().toString(queryGenerator);\r\n  }\r\n\r\n  toString(queryGenerator: AbstractQueryGenerator) {\r\n    return this.toSql(queryGenerator);\r\n  }\r\n\r\n  toSql(_queryGenerator: AbstractQueryGenerator) {\r\n    throw new Error('toSql implementation missing');\r\n  }\r\n\r\n  static readonly INITIALLY_DEFERRED = classToInvokable(class INITIALLY_DEFERRED extends Deferrable {\r\n    toSql() {\r\n      return 'DEFERRABLE INITIALLY DEFERRED';\r\n    }\r\n  });\r\n\r\n  static readonly INITIALLY_IMMEDIATE = classToInvokable(class INITIALLY_IMMEDIATE extends Deferrable {\r\n    toSql() {\r\n      return 'DEFERRABLE INITIALLY IMMEDIATE';\r\n    }\r\n  });\r\n\r\n  /**\r\n   * Will set the constraints to not deferred. This is the default in PostgreSQL and it make\r\n   * it impossible to dynamically defer the constraints within a transaction.\r\n   */\r\n  static readonly NOT = classToInvokable(class NOT extends Deferrable {\r\n    toSql() {\r\n      return 'NOT DEFERRABLE';\r\n    }\r\n  });\r\n\r\n  /**\r\n   * Will trigger an additional query at the beginning of a\r\n   * transaction which sets the constraints to deferred.\r\n   */\r\n  static readonly SET_DEFERRED = classToInvokable(class SET_DEFERRED extends Deferrable {\r\n    readonly #constraints: string[];\r\n\r\n    /**\r\n     * @param constraints An array of constraint names. Will defer all constraints by default.\r\n     */\r\n    constructor(constraints: string[]) {\r\n      super();\r\n      this.#constraints = constraints;\r\n    }\r\n\r\n    toSql(queryGenerator: AbstractQueryGenerator): string {\r\n      return queryGenerator.setDeferredQuery(this.#constraints);\r\n    }\r\n  });\r\n\r\n  /**\r\n   * Will trigger an additional query at the beginning of a\r\n   * transaction which sets the constraints to immediately.\r\n   */\r\n  static readonly SET_IMMEDIATE = classToInvokable(class SET_IMMEDIATE extends Deferrable {\r\n    readonly #constraints: string[];\r\n\r\n    /**\r\n     * @param constraints An array of constraint names. Will defer all constraints by default.\r\n     */\r\n    constructor(constraints: string[]) {\r\n      super();\r\n      this.#constraints = constraints;\r\n    }\r\n\r\n    toSql(queryGenerator: AbstractQueryGenerator): string {\r\n      return queryGenerator.setImmediateQuery(this.#constraints);\r\n    }\r\n  });\r\n}\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,mBAAiC;AAkC1B,MAAM,WAAW;AAAA,SACf,SAAS,gBAAwC;AACtD,WAAO,IAAI,KAAK,EAAE,SAAS,cAAc;AAAA,EAC3C;AAAA,EAEA,SAAS,gBAAwC;AAC/C,WAAO,KAAK,MAAM,cAAc;AAAA,EAClC;AAAA,EAEA,MAAM,iBAAyC;AAC7C,UAAM,IAAI,MAAM,8BAA8B;AAAA,EAChD;AAAA,SAEgB,qBAAqB,mCAAiB,MAAM,2BAA2B,WAAW;AAAA,IAChG,QAAQ;AACN,aAAO;AAAA,IACT;AAAA,EACF,CAAC;AAAA,SAEe,sBAAsB,mCAAiB,MAAM,4BAA4B,WAAW;AAAA,IAClG,QAAQ;AACN,aAAO;AAAA,IACT;AAAA,EACF,CAAC;AAAA,SAMe,MAAM,mCAAiB,MAAM,YAAY,WAAW;AAAA,IAClE,QAAQ;AACN,aAAO;AAAA,IACT;AAAA,EACF,CAAC;AAAA,SAMe,eAAe,mCAAiB,MAAM,qBAAqB,WAAW;AAAA,IAC3E;AAAA,IAKT,YAAY,aAAuB;AACjC,YAAM;AACN,0BAAoB;AAAA,IACtB;AAAA,IAEA,MAAM,gBAAgD;AACpD,aAAO,eAAe,iBAAiB,iBAAiB;AAAA,IAC1D;AAAA,EACF,CAAC;AAAA,SAMe,gBAAgB,mCAAiB,MAAM,sBAAsB,WAAW;AAAA,IAC7E;AAAA,IAKT,YAAY,aAAuB;AACjC,YAAM;AACN,0BAAoB;AAAA,IACtB;AAAA,IAEA,MAAM,gBAAgD;AACpD,aAAO,eAAe,kBAAkB,iBAAiB;AAAA,IAC3D;AAAA,EACF,CAAC;AACH;",
  "names": []
}
