{
  "version": 3,
  "sources": ["../../../src/dialects/ibmi/data-types.js"],
  "sourcesContent": ["'use strict';\r\n\r\nconst dayjs = require('dayjs');\r\n\r\nmodule.exports = BaseTypes => {\r\n  const warn = BaseTypes.ABSTRACT.warn.bind(undefined, 'https://www.ibm.com/support/knowledgecenter/en/ssw_ibm_i_73/db2/rbafzch2data.htm');\r\n\r\n  /**\r\n   * Removes unsupported Db2 for i options, i.e., UNSIGNED and ZEROFILL, for the integer data types.\r\n   *\r\n   * @param {object} dataType The base integer data type.\r\n   * @private\r\n   */\r\n  function removeUnsupportedIntegerOptions(dataType) {\r\n    if (dataType._length || dataType.options.length || dataType._zerofill || dataType._unsigned) {\r\n      warn(`IBM i Db2 does not support '${dataType.key}' with LENGTH, UNSIGNED or ZEROFILL. Plain '${dataType.key}' will be used instead.`);\r\n      dataType._length = undefined;\r\n      dataType.options.length = undefined;\r\n      dataType._unsigned = undefined;\r\n      dataType._zerofill = undefined;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @see https://www.ibm.com/support/knowledgecenter/en/ssw_ibm_i_73/db2/rbafzch2data.htm\r\n   */\r\n\r\n  BaseTypes.DATE.types.ibmi = [93];\r\n  BaseTypes.STRING.types.ibmi = [12];\r\n  BaseTypes.CHAR.types.ibmi = [1];\r\n  BaseTypes.TEXT.types.ibmi = [12];\r\n  BaseTypes.TINYINT.types.ibmi = false;\r\n  BaseTypes.SMALLINT.types.ibmi = [5];\r\n  BaseTypes.MEDIUMINT.types.ibmi = false;\r\n  BaseTypes.INTEGER.types.ibmi = [4];\r\n  BaseTypes.BIGINT.types.ibmi = [-5];\r\n  BaseTypes.FLOAT.types.ibmi = [8];\r\n  BaseTypes.TIME.types.ibmi = [92];\r\n  BaseTypes.DATEONLY.types.ibmi = [91];\r\n  BaseTypes.BOOLEAN.types.ibmi = [5];\r\n  BaseTypes.BLOB.types.ibmi = [-4, -2];\r\n  BaseTypes.DECIMAL.types.ibmi = [3];\r\n  BaseTypes.UUID.types.ibmi = [1];\r\n  BaseTypes.ENUM.types.ibmi = false;\r\n  BaseTypes.REAL.types.ibmi = [7];\r\n  BaseTypes.DOUBLE.types.ibmi = [8];\r\n  BaseTypes.GEOMETRY.types.ibmi = false;\r\n  BaseTypes.JSON.types.ibmi = false;\r\n\r\n  class ENUM extends BaseTypes.ENUM {\r\n    toSql() {\r\n      return 'VARCHAR(255)';\r\n    }\r\n  }\r\n\r\n  class DATE extends BaseTypes.DATE {\r\n    toSql() {\r\n      return 'TIMESTAMP';\r\n    }\r\n\r\n    static parse(date) {\r\n      if (!date.includes('+')) {\r\n        // For backwards compat. Dates inserted by sequelize < 2.0dev12 will not have a timestamp set\r\n        return dayjs.utc(date).toDate();\r\n      }\r\n\r\n      return dayjs.utc(date).toDate();\r\n    }\r\n\r\n    _stringify(date, options) {\r\n      date = this._applyTimezone(date, options);\r\n\r\n      return date.format('YYYY-MM-DD HH:mm:ss.SSS');\r\n    }\r\n  }\r\n\r\n  class UUID extends BaseTypes.UUID {\r\n    toSql() {\r\n      return 'CHAR(36)';\r\n    }\r\n  }\r\n\r\n  class DATEONLY extends BaseTypes.DATEONLY {\r\n    static parse(date) {\r\n      return date;\r\n    }\r\n  }\r\n\r\n  class BOOLEAN extends BaseTypes.BOOLEAN {\r\n    toSql() {\r\n      return 'SMALLINT';\r\n    }\r\n\r\n    _stringify(value) {\r\n      if (value) {\r\n        return 1;\r\n      }\r\n\r\n      return 0;\r\n    }\r\n\r\n    static parse(value) {\r\n      if (value) {\r\n        return true;\r\n      }\r\n\r\n      return false;\r\n    }\r\n  }\r\n\r\n  class STRING extends BaseTypes.STRING {\r\n    toSql() {\r\n      if (this._binary) {\r\n        return `BINARY(${this._length})`;\r\n      }\r\n\r\n      return super.toSql(this);\r\n    }\r\n\r\n    _stringify(value, options) {\r\n      if (Buffer.isBuffer(value)) {\r\n        return `BLOB(X'${value.toString('hex')}')`;\r\n      }\r\n\r\n      return value.toString();\r\n    }\r\n\r\n  }\r\n\r\n  class TEXT extends BaseTypes.TEXT {\r\n    toSql() {\r\n      let len = 0;\r\n      if (this._length) {\r\n        if (typeof this._length === 'string') {\r\n          switch (this._length.toLowerCase()) {\r\n            case 'tiny':\r\n              this._length = 256; // tiny = 2^8\r\n              break;\r\n            case 'medium':\r\n              this._length = 8192; // medium = 2^13 = 8k\r\n              break;\r\n            case 'long':\r\n              this._length = 65_536; // long = 64k\r\n              break;\r\n            default:\r\n              throw new Error('Unknown length value passed for TEXT type. Valid values are: positive integers, \"tiny\", \"medium\", and \"long\"');\r\n          }\r\n        } else if (!Number.isSafeInteger(this._length) || this._length <= 0) {\r\n          throw new Error('Unknown length for TEXT type. Valid values are: positive integers, \"tiny\", \"medium\", and \"long\"');\r\n        }\r\n      } else {\r\n        this._length = 8192;\r\n      }\r\n\r\n      if (this._length > 32_672) {\r\n        len = `CLOB(${this._length})`;\r\n      } else {\r\n        len = `VARCHAR(${this._length})`;\r\n      }\r\n\r\n      return len;\r\n    }\r\n  }\r\n\r\n  class CHAR extends BaseTypes.CHAR {\r\n    toSql() {\r\n      if (this._binary) {\r\n        return `CLOB(${this._length})`;\r\n      }\r\n\r\n      return super.toSql();\r\n    }\r\n  }\r\n\r\n  class NUMBER extends BaseTypes.NUMBER {\r\n    toSql() {\r\n      let result = this.key;\r\n      if (this._length) {\r\n        result += `(${this._length}`;\r\n        if (typeof this._decimals === 'number') {\r\n          result += `,${this._decimals}`;\r\n        }\r\n\r\n        result += ')';\r\n      }\r\n\r\n      return result;\r\n    }\r\n  }\r\n\r\n  class SMALLINT extends BaseTypes.SMALLINT {\r\n    constructor(length) {\r\n      super(length);\r\n      removeUnsupportedIntegerOptions(this);\r\n    }\r\n  }\r\n\r\n  class INTEGER extends BaseTypes.INTEGER {\r\n    constructor(length) {\r\n      super(length);\r\n      removeUnsupportedIntegerOptions(this);\r\n    }\r\n  }\r\n\r\n  class BIGINT extends BaseTypes.BIGINT {\r\n    constructor(length) {\r\n      super(length);\r\n      removeUnsupportedIntegerOptions(this);\r\n    }\r\n\r\n    _stringify(value) {\r\n      return value.toString();\r\n    }\r\n\r\n    static parse(value) {\r\n      return value.toString();\r\n    }\r\n  }\r\n\r\n  class FLOAT extends BaseTypes.FLOAT {\r\n    constructor(length, decimals) {\r\n      super(length, decimals);\r\n      if (this._decimals) {\r\n        warn('Db2 for i does not support FLOAT with decimal scale. FLOAT will be used instead. If you want to specify scale, use DECIMAL or NUMERIC data types.');\r\n        this._length = undefined;\r\n        this._decimals = undefined;\r\n      }\r\n    }\r\n  }\r\n\r\n  class REAL extends BaseTypes.REAL {\r\n    constructor(length) {\r\n      super(length);\r\n      removeUnsupportedIntegerOptions(this);\r\n    }\r\n  }\r\n\r\n  class BLOB extends BaseTypes.BLOB {\r\n    toSql() {\r\n      if (this._length) {\r\n        if (this._length.toLowerCase() === 'tiny') { // tiny = 255 bytes\r\n          return 'BLOB(255)';\r\n        }\r\n\r\n        if (this._length.toLowerCase() === 'medium') { // medium = 16M\r\n          return 'BLOB(16M)';\r\n        }\r\n\r\n        if (this._length.toLowerCase() === 'long') { // long = 2GB\r\n          return 'BLOB(2G)';\r\n        }\r\n\r\n        return `BLOB(${this._length})`;\r\n      }\r\n\r\n      return 'BLOB(1M)';\r\n    }\r\n\r\n    _stringify(value) {\r\n      if (Buffer.isBuffer(value)) {\r\n        return `BLOB('${value.toString().replace(/'/g, '\\'\\'')}')`;\r\n      }\r\n\r\n      if (Array.isArray(value)) {\r\n        value = Buffer.from(value);\r\n      } else {\r\n        value = Buffer.from(value.toString());\r\n      }\r\n\r\n      return `BLOB('${value}')`;\r\n    }\r\n\r\n    static parse(value) {\r\n      return Buffer.from(value);\r\n    }\r\n  }\r\n\r\n  function parseFloating(value) {\r\n    if (typeof value !== 'string') {\r\n      return value;\r\n    }\r\n\r\n    if (value === 'NaN') {\r\n      return NaN;\r\n    }\r\n\r\n    if (value === 'Infinity') {\r\n      return Infinity;\r\n    }\r\n\r\n    if (value === '-Infinity') {\r\n      return -Infinity;\r\n    }\r\n  }\r\n\r\n  for (const floating of [FLOAT, REAL]) {\r\n    floating.parse = parseFloating;\r\n  }\r\n\r\n  for (const num of [FLOAT, REAL, SMALLINT, INTEGER]) {\r\n    num.prototype.toSql = NUMBER.prototype.toSql;\r\n  }\r\n\r\n  return {\r\n    BOOLEAN,\r\n    DATE,\r\n    DATEONLY,\r\n    STRING,\r\n    CHAR,\r\n    NUMBER,\r\n    FLOAT,\r\n    ENUM,\r\n    REAL,\r\n    SMALLINT,\r\n    INTEGER,\r\n    BIGINT,\r\n    TEXT,\r\n    UUID,\r\n    BLOB,\r\n  };\r\n};\r\n"],
  "mappings": "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",
  "names": []
}
