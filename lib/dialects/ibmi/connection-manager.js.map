{
  "version": 3,
  "sources": ["../../../src/dialects/ibmi/connection-manager.js"],
  "sourcesContent": ["'use strict';\r\n\r\nconst { ConnectionManager } = require('../abstract/connection-manager');\r\nconst SequelizeErrors = require('../../errors');\r\nconst { logger } = require('../../utils/logger');\r\n\r\nconst debug = logger.debugContext('connection:ibmi');\r\nconst parserStore = require('../parserStore')('ibmi');\r\nconst DataTypes = require('../../data-types').ibmi;\r\n\r\nexport class IBMiConnectionManager extends ConnectionManager {\r\n  constructor(dialect, sequelize) {\r\n    super(dialect, sequelize);\r\n\r\n    this.connections = {};\r\n    this.lib = this._loadDialectModule('odbc');\r\n    this.refreshTypeParser(DataTypes);\r\n  }\r\n\r\n  _refreshTypeParser(dataType) {\r\n    parserStore.refresh(dataType);\r\n  }\r\n\r\n  _clearTypeParser() {\r\n    parserStore.clear();\r\n  }\r\n\r\n  async connect(config) {\r\n    // Combine passed connection options into a connection string\r\n    // config.port has no real meaning for this ODBC Driver\r\n    const connectionKeywords = [];\r\n    if (config.dialectOptions && config.dialectOptions.odbcConnectionString) {\r\n      connectionKeywords.push(config.dialectOptions.odbcConnectionString);\r\n    }\r\n\r\n    // 'database' doesn't make sense in this context, but it is mapped here to\r\n    // DSN, which is a close fit\r\n    if (config.database) {\r\n      connectionKeywords.push(`DSN=${config.database}`);\r\n    }\r\n\r\n    if (config.username) {\r\n      connectionKeywords.push(`UID=${config.username}`);\r\n    }\r\n\r\n    if (config.password) {\r\n      connectionKeywords.push(`PWD=${config.password}`);\r\n    }\r\n\r\n    if (config.host) {\r\n      connectionKeywords.push(`SYSTEM=${config.host}`);\r\n    }\r\n\r\n    const connectionString = connectionKeywords.join(';');\r\n    if (connectionString.charAt(connectionString.length - 1) !== ';') {\r\n      connectionString.concat(';');\r\n    }\r\n\r\n    let connection;\r\n    try {\r\n      connection = await this.lib.connect(connectionString);\r\n    } catch (error) {\r\n      if (error.toString().includes('Error connecting to the database')) {\r\n        const err = new SequelizeErrors.ConnectionRefusedError(error);\r\n        throw (err);\r\n      }\r\n    }\r\n\r\n    return connection;\r\n  }\r\n\r\n  async disconnect(connection) {\r\n    return new Promise((resolve, reject) => {\r\n      if (!this.validate(connection)) {\r\n        debug('Tried to disconnect, but connection was already closed.');\r\n        resolve();\r\n      }\r\n\r\n      connection.close(error => {\r\n        if (error) {\r\n          reject(error);\r\n        }\r\n\r\n        resolve();\r\n      });\r\n    });\r\n  }\r\n\r\n  validate(connection) {\r\n    return connection.isConnected;\r\n  }\r\n}\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,MAAM,EAAE,sBAAsB,QAAQ,gCAAgC;AACtE,MAAM,kBAAkB,QAAQ,cAAc;AAC9C,MAAM,EAAE,WAAW,QAAQ,oBAAoB;AAE/C,MAAM,QAAQ,OAAO,aAAa,iBAAiB;AACnD,MAAM,cAAc,QAAQ,gBAAgB,EAAE,MAAM;AACpD,MAAM,YAAY,QAAQ,kBAAkB,EAAE;AAEvC,MAAM,8BAA8B,kBAAkB;AAAA,EAC3D,YAAY,SAAS,WAAW;AAC9B,UAAM,SAAS,SAAS;AAExB,SAAK,cAAc,CAAC;AACpB,SAAK,MAAM,KAAK,mBAAmB,MAAM;AACzC,SAAK,kBAAkB,SAAS;AAAA,EAClC;AAAA,EAEA,mBAAmB,UAAU;AAC3B,gBAAY,QAAQ,QAAQ;AAAA,EAC9B;AAAA,EAEA,mBAAmB;AACjB,gBAAY,MAAM;AAAA,EACpB;AAAA,QAEM,QAAQ,QAAQ;AAGpB,UAAM,qBAAqB,CAAC;AAC5B,QAAI,OAAO,kBAAkB,OAAO,eAAe,sBAAsB;AACvE,yBAAmB,KAAK,OAAO,eAAe,oBAAoB;AAAA,IACpE;AAIA,QAAI,OAAO,UAAU;AACnB,yBAAmB,KAAK,OAAO,OAAO,UAAU;AAAA,IAClD;AAEA,QAAI,OAAO,UAAU;AACnB,yBAAmB,KAAK,OAAO,OAAO,UAAU;AAAA,IAClD;AAEA,QAAI,OAAO,UAAU;AACnB,yBAAmB,KAAK,OAAO,OAAO,UAAU;AAAA,IAClD;AAEA,QAAI,OAAO,MAAM;AACf,yBAAmB,KAAK,UAAU,OAAO,MAAM;AAAA,IACjD;AAEA,UAAM,mBAAmB,mBAAmB,KAAK,GAAG;AACpD,QAAI,iBAAiB,OAAO,iBAAiB,SAAS,CAAC,MAAM,KAAK;AAChE,uBAAiB,OAAO,GAAG;AAAA,IAC7B;AAEA,QAAI;AACJ,QAAI;AACF,mBAAa,MAAM,KAAK,IAAI,QAAQ,gBAAgB;AAAA,IACtD,SAAS,OAAP;AACA,UAAI,MAAM,SAAS,EAAE,SAAS,kCAAkC,GAAG;AACjE,cAAM,MAAM,IAAI,gBAAgB,uBAAuB,KAAK;AAC5D,cAAO;AAAA,MACT;AAAA,IACF;AAEA,WAAO;AAAA,EACT;AAAA,QAEM,WAAW,YAAY;AAC3B,WAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,UAAI,CAAC,KAAK,SAAS,UAAU,GAAG;AAC9B,cAAM,yDAAyD;AAC/D,gBAAQ;AAAA,MACV;AAEA,iBAAW,MAAM,WAAS;AACxB,YAAI,OAAO;AACT,iBAAO,KAAK;AAAA,QACd;AAEA,gBAAQ;AAAA,MACV,CAAC;AAAA,IACH,CAAC;AAAA,EACH;AAAA,EAEA,SAAS,YAAY;AACnB,WAAO,WAAW;AAAA,EACpB;AACF;",
  "names": []
}
