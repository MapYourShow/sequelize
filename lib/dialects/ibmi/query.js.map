{
  "version": 3,
  "sources": ["../../../src/dialects/ibmi/query.js"],
  "sourcesContent": ["'use strict';\r\n\r\nconst _ = require('lodash');\r\nconst { AbstractQuery } = require('../abstract/query');\r\nconst parserStore = require('../parserStore')('ibmi');\r\nconst sequelizeErrors = require('../../errors');\r\nconst { logger } = require('../../utils/logger');\r\n\r\nconst debug = logger.debugContext('sql:ibmi');\r\n\r\nexport class IBMiQuery extends AbstractQuery {\r\n  getInsertIdField() {\r\n    return 'id';\r\n  }\r\n\r\n  async run(sql, parameters) {\r\n    const stacktrace = new Error().stack;\r\n    this.sql = sql.replace(/;$/, '');\r\n\r\n    return new Promise((resolve, reject) => {\r\n      const complete = this._logQuery(sql, debug, parameters);\r\n      this.connection.query(this.sql, parameters, (error, results) => {\r\n\r\n        if (error) {\r\n          const formattedError = this.formatError(error, stacktrace);\r\n          reject(formattedError);\r\n\r\n          return;\r\n        }\r\n\r\n        complete();\r\n\r\n        // parse the results to the format sequelize expects\r\n        for (const result of results) {\r\n          for (const column of results.columns) {\r\n            const typeId = column.dataType;\r\n            const parse = parserStore.get(typeId);\r\n            const value = result[column.name];\r\n            if (value !== null && parse) {\r\n              result[column.name] = parse(value);\r\n            }\r\n          }\r\n        }\r\n\r\n        resolve(results);\r\n      });\r\n    })\r\n      .then(results => this.formatResults(results));\r\n  }\r\n\r\n  /**\r\n   * High level function that handles the results of a query execution.\r\n   *\r\n   *\r\n   * Example:\r\n   *  query.formatResults([\r\n   *    {\r\n   *      id: 1,              // this is from the main table\r\n   *      attr2: 'snafu',     // this is from the main table\r\n   *      Tasks.id: 1,        // this is from the associated table\r\n   *      Tasks.title: 'task' // this is from the associated table\r\n   *    }\r\n   *  ])\r\n   *\r\n   * @param {Array} data - The result of the query execution.\r\n   * @private\r\n   */\r\n  formatResults(data) {\r\n    let result = this.instance;\r\n\r\n    if (this.isInsertQuery() || this.isUpdateQuery() || this.isUpsertQuery()) {\r\n      if (this.instance && this.instance.dataValues) {\r\n        for (const key in data[0]) {\r\n          if (Object.prototype.hasOwnProperty.call(data[0], key)) {\r\n            const record = data[0][key];\r\n\r\n            const attr = _.find(this.model.rawAttributes, attribute => attribute.fieldName === key || attribute.field === key);\r\n\r\n            this.instance.dataValues[attr && attr.fieldName || key] = record;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (this.isUpsertQuery()) {\r\n        return [\r\n          this.instance,\r\n          null,\r\n        ];\r\n      }\r\n\r\n      return [\r\n        this.instance || data && (this.options.plain && data[0] || data) || undefined,\r\n        data.count,\r\n      ];\r\n    }\r\n\r\n    if (this.isSelectQuery()) {\r\n      return this.handleSelectQuery(data);\r\n    }\r\n\r\n    if (this.isShowTablesQuery()) {\r\n      return this.handleShowTablesQuery(data);\r\n    }\r\n\r\n    if (this.isShowIndexesQuery()) {\r\n      return this.handleShowIndexesQuery(data);\r\n    }\r\n\r\n    if (this.isDescribeQuery()) {\r\n      result = {};\r\n\r\n      for (const _result of data) {\r\n        const enumRegex = /^enum/i;\r\n        result[_result.COLUMN_NAME] = {\r\n          type: enumRegex.test(_result.Type) ? _result.Type.replace(enumRegex, 'ENUM') : _result.DATA_TYPE.toUpperCase(),\r\n          allowNull: _result.IS_NULLABLE === 'Y',\r\n          defaultValue: _result.COLUMN_DEFAULT,\r\n          primaryKey: _result.CONSTRAINT_TYPE === 'PRIMARY KEY',\r\n          autoIncrement: _result.IS_GENERATED !== 'IDENTITY_GENERATION',\r\n        };\r\n      }\r\n\r\n      return result;\r\n    }\r\n\r\n    if (this.isCallQuery()) {\r\n      return data[0];\r\n    }\r\n\r\n    if (this.isBulkUpdateQuery() || this.isBulkDeleteQuery() || this.isUpsertQuery()) {\r\n      return data.count;\r\n    }\r\n\r\n    if (this.isVersionQuery()) {\r\n      return data[0].VERSION;\r\n    }\r\n\r\n    if (this.isForeignKeysQuery()) {\r\n      return data;\r\n    }\r\n\r\n    if (this.isInsertQuery(data)) {\r\n      // insert queries can't call count, because they are actually select queries wrapped around insert queries to get the inserted id. Need to count the number of results instead.\r\n      return [result, data.length];\r\n    }\r\n\r\n    if (this.isUpdateQuery()) {\r\n      return [result, data.count];\r\n    }\r\n\r\n    if (this.isShowConstraintsQuery()) {\r\n      return data;\r\n    }\r\n\r\n    if (this.isRawQuery()) {\r\n      // MySQL returns row data and metadata (affected rows etc) in a single object - let's standarize it, sorta\r\n      return [data, data];\r\n    }\r\n\r\n    if (this.isShowIndexesQuery()) {\r\n      return data;\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  handleInsertQuery(results, metaData) {\r\n    if (this.instance) {\r\n      // add the inserted row id to the instance\r\n      const autoIncrementAttribute = this.model.autoIncrementAttribute.field;\r\n      let id = null;\r\n\r\n      id = id || results && results[autoIncrementAttribute];\r\n      id = id || metaData && metaData[autoIncrementAttribute];\r\n\r\n      this.instance[this.model.autoIncrementAttribute] = id;\r\n    }\r\n  }\r\n\r\n  handleShowIndexesQuery(data) {\r\n\r\n    const indexes = Object.create(null);\r\n\r\n    data.forEach(item => {\r\n\r\n      if (Object.prototype.hasOwnProperty.call(indexes, item.NAME)) {\r\n        indexes[item.NAME].fields.push({ attribute: item.COLUMN_NAME, length: undefined, order: undefined, collate: undefined });\r\n      } else {\r\n        indexes[item.NAME] = {\r\n          primary: item.CONSTRAINT_TYPE === 'PRIMARY KEY',\r\n          fields: [{ attribute: item.COLUMN_NAME, length: undefined, order: undefined, collate: undefined }],\r\n          name: item.NAME,\r\n          tableName: item.TABLE_NAME,\r\n          unique: item.CONSTRAINT_TYPE === 'PRIMARY KEY' || item.CONSTRAINT_TYPE === 'UNIQUE',\r\n          type: item.CONSTRAINT_TYPE,\r\n        };\r\n      }\r\n    });\r\n\r\n    return Object.values(indexes);\r\n  }\r\n\r\n  formatError(err, stacktrace) {\r\n\r\n    // Db2 for i uses the `odbc` connector. The `odbc` connector returns a list\r\n    // of odbc errors, each of which has a code and a state. To determine the\r\n    // type of SequelizeError, check the code and create the associated error.\r\n    // Error codes can be found at:\r\n    // https://www.ibm.com/support/knowledgecenter/ssw_ibm_i_72/rzala/rzalaccl.htm\r\n\r\n    // some errors occur outside of ODBC (e.g. connection errors)\r\n    if (err.toString().includes('Error connecting to the database')) {\r\n      return new sequelizeErrors.ConnectionRefusedError(err);\r\n    }\r\n\r\n    if (Object.prototype.hasOwnProperty.call(err, 'odbcErrors') && err.odbcErrors.length > 0) {\r\n      const odbcError = err.odbcErrors[0];\r\n      const foreignKeyConstraintCodes = [\r\n        -530, // The insert or update value of a foreign key is invalid.\r\n        -531, // The update or delete of a parent key is prevented by a NO ACTION update or delete rule.\r\n        -532, // The update or delete of a parent key is prevented by a NO ACTION update or delete rule.\r\n      ];\r\n      const uniqueConstraintCodes = [\r\n        -803, // A violation of the constraint imposed by a unique index or a unique constraint occurred.\r\n      ];\r\n\r\n      if (foreignKeyConstraintCodes.includes(odbcError.code)) {\r\n        return new sequelizeErrors.ForeignKeyConstraintError({\r\n          cause: err,\r\n          sql: {},\r\n          fields: {},\r\n          stack: stacktrace,\r\n        });\r\n      }\r\n\r\n      if (uniqueConstraintCodes.includes(odbcError.code)) {\r\n        return new sequelizeErrors.UniqueConstraintError({\r\n          errors: err.odbcErrors,\r\n          cause: err,\r\n          sql: {},\r\n          fields: {},\r\n          stack: stacktrace,\r\n        });\r\n      }\r\n\r\n      if (odbcError.code === -204) {\r\n        let constraintName;\r\n        let type;\r\n        const constraintNameRegex = /\"([^)]+?)\" in [^]+? type (\\*\\w+?) not found./;\r\n        const constraintNameRegexMatches = odbcError.message.match(constraintNameRegex);\r\n        if (constraintNameRegexMatches && constraintNameRegexMatches.length === 3) {\r\n          constraintName = constraintNameRegexMatches[1];\r\n          type = constraintNameRegexMatches[2];\r\n\r\n          if (type === '*N') {\r\n            return new sequelizeErrors.UnknownConstraintError({\r\n              cause: err,\r\n              constraint: constraintName,\r\n            });\r\n          }\r\n        }\r\n      }\r\n\r\n      return new sequelizeErrors.DatabaseError(odbcError, { stack: stacktrace });\r\n    }\r\n\r\n    return err;\r\n  }\r\n}\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,MAAM,IAAI,QAAQ,QAAQ;AAC1B,MAAM,EAAE,kBAAkB,QAAQ,mBAAmB;AACrD,MAAM,cAAc,QAAQ,gBAAgB,EAAE,MAAM;AACpD,MAAM,kBAAkB,QAAQ,cAAc;AAC9C,MAAM,EAAE,WAAW,QAAQ,oBAAoB;AAE/C,MAAM,QAAQ,OAAO,aAAa,UAAU;AAErC,MAAM,kBAAkB,cAAc;AAAA,EAC3C,mBAAmB;AACjB,WAAO;AAAA,EACT;AAAA,QAEM,IAAI,KAAK,YAAY;AACzB,UAAM,aAAa,IAAI,MAAM,EAAE;AAC/B,SAAK,MAAM,IAAI,QAAQ,MAAM,EAAE;AAE/B,WAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,YAAM,WAAW,KAAK,UAAU,KAAK,OAAO,UAAU;AACtD,WAAK,WAAW,MAAM,KAAK,KAAK,YAAY,CAAC,OAAO,YAAY;AAE9D,YAAI,OAAO;AACT,gBAAM,iBAAiB,KAAK,YAAY,OAAO,UAAU;AACzD,iBAAO,cAAc;AAErB;AAAA,QACF;AAEA,iBAAS;AAGT,mBAAW,UAAU,SAAS;AAC5B,qBAAW,UAAU,QAAQ,SAAS;AACpC,kBAAM,SAAS,OAAO;AACtB,kBAAM,QAAQ,YAAY,IAAI,MAAM;AACpC,kBAAM,QAAQ,OAAO,OAAO;AAC5B,gBAAI,UAAU,QAAQ,OAAO;AAC3B,qBAAO,OAAO,QAAQ,MAAM,KAAK;AAAA,YACnC;AAAA,UACF;AAAA,QACF;AAEA,gBAAQ,OAAO;AAAA,MACjB,CAAC;AAAA,IACH,CAAC,EACE,KAAK,aAAW,KAAK,cAAc,OAAO,CAAC;AAAA,EAChD;AAAA,EAmBA,cAAc,MAAM;AAClB,QAAI,SAAS,KAAK;AAElB,QAAI,KAAK,cAAc,KAAK,KAAK,cAAc,KAAK,KAAK,cAAc,GAAG;AACxE,UAAI,KAAK,YAAY,KAAK,SAAS,YAAY;AAC7C,mBAAW,OAAO,KAAK,IAAI;AACzB,cAAI,OAAO,UAAU,eAAe,KAAK,KAAK,IAAI,GAAG,GAAG;AACtD,kBAAM,SAAS,KAAK,GAAG;AAEvB,kBAAM,OAAO,EAAE,KAAK,KAAK,MAAM,eAAe,eAAa,UAAU,cAAc,OAAO,UAAU,UAAU,GAAG;AAEjH,iBAAK,SAAS,WAAW,QAAQ,KAAK,aAAa,OAAO;AAAA,UAC5D;AAAA,QACF;AAAA,MACF;AAEA,UAAI,KAAK,cAAc,GAAG;AACxB,eAAO;AAAA,UACL,KAAK;AAAA,UACL;AAAA,QACF;AAAA,MACF;AAEA,aAAO;AAAA,QACL,KAAK,YAAY,QAAS,MAAK,QAAQ,SAAS,KAAK,MAAM,SAAS;AAAA,QACpE,KAAK;AAAA,MACP;AAAA,IACF;AAEA,QAAI,KAAK,cAAc,GAAG;AACxB,aAAO,KAAK,kBAAkB,IAAI;AAAA,IACpC;AAEA,QAAI,KAAK,kBAAkB,GAAG;AAC5B,aAAO,KAAK,sBAAsB,IAAI;AAAA,IACxC;AAEA,QAAI,KAAK,mBAAmB,GAAG;AAC7B,aAAO,KAAK,uBAAuB,IAAI;AAAA,IACzC;AAEA,QAAI,KAAK,gBAAgB,GAAG;AAC1B,eAAS,CAAC;AAEV,iBAAW,WAAW,MAAM;AAC1B,cAAM,YAAY;AAClB,eAAO,QAAQ,eAAe;AAAA,UAC5B,MAAM,UAAU,KAAK,QAAQ,IAAI,IAAI,QAAQ,KAAK,QAAQ,WAAW,MAAM,IAAI,QAAQ,UAAU,YAAY;AAAA,UAC7G,WAAW,QAAQ,gBAAgB;AAAA,UACnC,cAAc,QAAQ;AAAA,UACtB,YAAY,QAAQ,oBAAoB;AAAA,UACxC,eAAe,QAAQ,iBAAiB;AAAA,QAC1C;AAAA,MACF;AAEA,aAAO;AAAA,IACT;AAEA,QAAI,KAAK,YAAY,GAAG;AACtB,aAAO,KAAK;AAAA,IACd;AAEA,QAAI,KAAK,kBAAkB,KAAK,KAAK,kBAAkB,KAAK,KAAK,cAAc,GAAG;AAChF,aAAO,KAAK;AAAA,IACd;AAEA,QAAI,KAAK,eAAe,GAAG;AACzB,aAAO,KAAK,GAAG;AAAA,IACjB;AAEA,QAAI,KAAK,mBAAmB,GAAG;AAC7B,aAAO;AAAA,IACT;AAEA,QAAI,KAAK,cAAc,IAAI,GAAG;AAE5B,aAAO,CAAC,QAAQ,KAAK,MAAM;AAAA,IAC7B;AAEA,QAAI,KAAK,cAAc,GAAG;AACxB,aAAO,CAAC,QAAQ,KAAK,KAAK;AAAA,IAC5B;AAEA,QAAI,KAAK,uBAAuB,GAAG;AACjC,aAAO;AAAA,IACT;AAEA,QAAI,KAAK,WAAW,GAAG;AAErB,aAAO,CAAC,MAAM,IAAI;AAAA,IACpB;AAEA,QAAI,KAAK,mBAAmB,GAAG;AAC7B,aAAO;AAAA,IACT;AAEA,WAAO;AAAA,EACT;AAAA,EAEA,kBAAkB,SAAS,UAAU;AACnC,QAAI,KAAK,UAAU;AAEjB,YAAM,yBAAyB,KAAK,MAAM,uBAAuB;AACjE,UAAI,KAAK;AAET,WAAK,MAAM,WAAW,QAAQ;AAC9B,WAAK,MAAM,YAAY,SAAS;AAEhC,WAAK,SAAS,KAAK,MAAM,0BAA0B;AAAA,IACrD;AAAA,EACF;AAAA,EAEA,uBAAuB,MAAM;AAE3B,UAAM,UAAU,uBAAO,OAAO,IAAI;AAElC,SAAK,QAAQ,UAAQ;AAEnB,UAAI,OAAO,UAAU,eAAe,KAAK,SAAS,KAAK,IAAI,GAAG;AAC5D,gBAAQ,KAAK,MAAM,OAAO,KAAK,EAAE,WAAW,KAAK,aAAa,QAAQ,QAAW,OAAO,QAAW,SAAS,OAAU,CAAC;AAAA,MACzH,OAAO;AACL,gBAAQ,KAAK,QAAQ;AAAA,UACnB,SAAS,KAAK,oBAAoB;AAAA,UAClC,QAAQ,CAAC,EAAE,WAAW,KAAK,aAAa,QAAQ,QAAW,OAAO,QAAW,SAAS,OAAU,CAAC;AAAA,UACjG,MAAM,KAAK;AAAA,UACX,WAAW,KAAK;AAAA,UAChB,QAAQ,KAAK,oBAAoB,iBAAiB,KAAK,oBAAoB;AAAA,UAC3E,MAAM,KAAK;AAAA,QACb;AAAA,MACF;AAAA,IACF,CAAC;AAED,WAAO,OAAO,OAAO,OAAO;AAAA,EAC9B;AAAA,EAEA,YAAY,KAAK,YAAY;AAS3B,QAAI,IAAI,SAAS,EAAE,SAAS,kCAAkC,GAAG;AAC/D,aAAO,IAAI,gBAAgB,uBAAuB,GAAG;AAAA,IACvD;AAEA,QAAI,OAAO,UAAU,eAAe,KAAK,KAAK,YAAY,KAAK,IAAI,WAAW,SAAS,GAAG;AACxF,YAAM,YAAY,IAAI,WAAW;AACjC,YAAM,4BAA4B;AAAA,QAChC;AAAA,QACA;AAAA,QACA;AAAA,MACF;AACA,YAAM,wBAAwB;AAAA,QAC5B;AAAA,MACF;AAEA,UAAI,0BAA0B,SAAS,UAAU,IAAI,GAAG;AACtD,eAAO,IAAI,gBAAgB,0BAA0B;AAAA,UACnD,OAAO;AAAA,UACP,KAAK,CAAC;AAAA,UACN,QAAQ,CAAC;AAAA,UACT,OAAO;AAAA,QACT,CAAC;AAAA,MACH;AAEA,UAAI,sBAAsB,SAAS,UAAU,IAAI,GAAG;AAClD,eAAO,IAAI,gBAAgB,sBAAsB;AAAA,UAC/C,QAAQ,IAAI;AAAA,UACZ,OAAO;AAAA,UACP,KAAK,CAAC;AAAA,UACN,QAAQ,CAAC;AAAA,UACT,OAAO;AAAA,QACT,CAAC;AAAA,MACH;AAEA,UAAI,UAAU,SAAS,MAAM;AAC3B,YAAI;AACJ,YAAI;AACJ,cAAM,sBAAsB;AAC5B,cAAM,6BAA6B,UAAU,QAAQ,MAAM,mBAAmB;AAC9E,YAAI,8BAA8B,2BAA2B,WAAW,GAAG;AACzE,2BAAiB,2BAA2B;AAC5C,iBAAO,2BAA2B;AAElC,cAAI,SAAS,MAAM;AACjB,mBAAO,IAAI,gBAAgB,uBAAuB;AAAA,cAChD,OAAO;AAAA,cACP,YAAY;AAAA,YACd,CAAC;AAAA,UACH;AAAA,QACF;AAAA,MACF;AAEA,aAAO,IAAI,gBAAgB,cAAc,WAAW,EAAE,OAAO,WAAW,CAAC;AAAA,IAC3E;AAEA,WAAO;AAAA,EACT;AACF;",
  "names": []
}
