{
  "version": 3,
  "sources": ["../../../src/dialects/mysql/query-generator.js"],
  "sourcesContent": ["'use strict';\r\n\r\nconst _ = require('lodash');\r\nconst Utils = require('../../utils');\r\nconst { AbstractQueryGenerator } = require('../abstract/query-generator');\r\nconst util = require('util');\r\nconst { Op } = require('../../operators');\r\n\r\nconst JSON_FUNCTION_REGEX = /^\\s*((?:[a-z]+_){0,2}jsonb?(?:_[a-z]+){0,2})\\([^)]*\\)/i;\r\nconst JSON_OPERATOR_REGEX = /^\\s*(->>?|@>|<@|\\?[&|]?|\\|{2}|#-)/i;\r\nconst TOKEN_CAPTURE_REGEX = /^\\s*((?:([\"'`])(?:(?!\\2).|\\2{2})*\\2)|[\\s\\w]+|[()+,.;-])/i;\r\nconst FOREIGN_KEY_FIELDS = [\r\n  'CONSTRAINT_NAME as constraint_name',\r\n  'CONSTRAINT_NAME as constraintName',\r\n  'CONSTRAINT_SCHEMA as constraintSchema',\r\n  'CONSTRAINT_SCHEMA as constraintCatalog',\r\n  'TABLE_NAME as tableName',\r\n  'TABLE_SCHEMA as tableSchema',\r\n  'TABLE_SCHEMA as tableCatalog',\r\n  'COLUMN_NAME as columnName',\r\n  'REFERENCED_TABLE_SCHEMA as referencedTableSchema',\r\n  'REFERENCED_TABLE_SCHEMA as referencedTableCatalog',\r\n  'REFERENCED_TABLE_NAME as referencedTableName',\r\n  'REFERENCED_COLUMN_NAME as referencedColumnName',\r\n].join(',');\r\n\r\nconst typeWithoutDefault = new Set(['BLOB', 'TEXT', 'GEOMETRY', 'JSON']);\r\n\r\nexport class MySqlQueryGenerator extends AbstractQueryGenerator {\r\n  constructor(options) {\r\n    super(options);\r\n\r\n    this.OperatorMap = {\r\n      ...this.OperatorMap,\r\n      [Op.regexp]: 'REGEXP',\r\n      [Op.notRegexp]: 'NOT REGEXP',\r\n    };\r\n  }\r\n\r\n  createDatabaseQuery(databaseName, options) {\r\n    options = {\r\n      charset: null,\r\n      collate: null,\r\n      ...options,\r\n    };\r\n\r\n    return Utils.joinSQLFragments([\r\n      'CREATE DATABASE IF NOT EXISTS',\r\n      this.quoteIdentifier(databaseName),\r\n      options.charset && `DEFAULT CHARACTER SET ${this.escape(options.charset)}`,\r\n      options.collate && `DEFAULT COLLATE ${this.escape(options.collate)}`,\r\n      ';',\r\n    ]);\r\n  }\r\n\r\n  dropDatabaseQuery(databaseName) {\r\n    return `DROP DATABASE IF EXISTS ${this.quoteIdentifier(databaseName)};`;\r\n  }\r\n\r\n  createSchema() {\r\n    return 'SHOW TABLES';\r\n  }\r\n\r\n  showSchemasQuery() {\r\n    return 'SHOW TABLES';\r\n  }\r\n\r\n  versionQuery() {\r\n    return 'SELECT VERSION() as `version`';\r\n  }\r\n\r\n  createTableQuery(tableName, attributes, options) {\r\n    options = {\r\n      engine: 'InnoDB',\r\n      charset: null,\r\n      rowFormat: null,\r\n      ...options,\r\n    };\r\n\r\n    const primaryKeys = [];\r\n    const foreignKeys = {};\r\n    const attrStr = [];\r\n\r\n    for (const attr in attributes) {\r\n      if (!Object.prototype.hasOwnProperty.call(attributes, attr)) {\r\n        continue;\r\n      }\r\n\r\n      const dataType = attributes[attr];\r\n      let match;\r\n\r\n      if (dataType.includes('PRIMARY KEY')) {\r\n        primaryKeys.push(attr);\r\n\r\n        if (dataType.includes('REFERENCES')) {\r\n          // MySQL doesn't support inline REFERENCES declarations: move to the end\r\n          match = dataType.match(/^(.+) (REFERENCES.*)$/);\r\n          attrStr.push(`${this.quoteIdentifier(attr)} ${match[1].replace('PRIMARY KEY', '')}`);\r\n          foreignKeys[attr] = match[2];\r\n        } else {\r\n          attrStr.push(`${this.quoteIdentifier(attr)} ${dataType.replace('PRIMARY KEY', '')}`);\r\n        }\r\n      } else if (dataType.includes('REFERENCES')) {\r\n        // MySQL doesn't support inline REFERENCES declarations: move to the end\r\n        match = dataType.match(/^(.+) (REFERENCES.*)$/);\r\n        attrStr.push(`${this.quoteIdentifier(attr)} ${match[1]}`);\r\n        foreignKeys[attr] = match[2];\r\n      } else {\r\n        attrStr.push(`${this.quoteIdentifier(attr)} ${dataType}`);\r\n      }\r\n    }\r\n\r\n    const table = this.quoteTable(tableName);\r\n    let attributesClause = attrStr.join(', ');\r\n    const pkString = primaryKeys.map(pk => this.quoteIdentifier(pk)).join(', ');\r\n\r\n    if (options.uniqueKeys) {\r\n      _.each(options.uniqueKeys, (columns, indexName) => {\r\n        if (columns.customIndex) {\r\n          if (typeof indexName !== 'string') {\r\n            indexName = `uniq_${tableName}_${columns.fields.join('_')}`;\r\n          }\r\n\r\n          attributesClause += `, UNIQUE ${this.quoteIdentifier(indexName)} (${columns.fields.map(field => this.quoteIdentifier(field)).join(', ')})`;\r\n        }\r\n      });\r\n    }\r\n\r\n    if (pkString.length > 0) {\r\n      attributesClause += `, PRIMARY KEY (${pkString})`;\r\n    }\r\n\r\n    for (const fkey in foreignKeys) {\r\n      if (Object.prototype.hasOwnProperty.call(foreignKeys, fkey)) {\r\n        attributesClause += `, FOREIGN KEY (${this.quoteIdentifier(fkey)}) ${foreignKeys[fkey]}`;\r\n      }\r\n    }\r\n\r\n    return Utils.joinSQLFragments([\r\n      'CREATE TABLE IF NOT EXISTS',\r\n      table,\r\n      `(${attributesClause})`,\r\n      `ENGINE=${options.engine}`,\r\n      options.comment && typeof options.comment === 'string' && `COMMENT ${this.escape(options.comment)}`,\r\n      options.charset && `DEFAULT CHARSET=${options.charset}`,\r\n      options.collate && `COLLATE ${options.collate}`,\r\n      options.initialAutoIncrement && `AUTO_INCREMENT=${options.initialAutoIncrement}`,\r\n      options.rowFormat && `ROW_FORMAT=${options.rowFormat}`,\r\n      ';',\r\n    ]);\r\n  }\r\n\r\n  describeTableQuery(tableName, schema, schemaDelimiter) {\r\n    const table = this.quoteTable(\r\n      this.addSchema({\r\n        tableName,\r\n        _schema: schema,\r\n        _schemaDelimiter: schemaDelimiter,\r\n      }),\r\n    );\r\n\r\n    return `SHOW FULL COLUMNS FROM ${table};`;\r\n  }\r\n\r\n  showTablesQuery(database) {\r\n    let query = 'SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = \\'BASE TABLE\\'';\r\n    if (database) {\r\n      query += ` AND TABLE_SCHEMA = ${this.escape(database)}`;\r\n    } else {\r\n      query += ' AND TABLE_SCHEMA NOT IN (\\'MYSQL\\', \\'INFORMATION_SCHEMA\\', \\'PERFORMANCE_SCHEMA\\', \\'SYS\\')';\r\n    }\r\n\r\n    return `${query};`;\r\n  }\r\n\r\n  addColumnQuery(table, key, dataType) {\r\n    return Utils.joinSQLFragments([\r\n      'ALTER TABLE',\r\n      this.quoteTable(table),\r\n      'ADD',\r\n      this.quoteIdentifier(key),\r\n      this.attributeToSQL(dataType, {\r\n        context: 'addColumn',\r\n        tableName: table,\r\n        foreignKey: key,\r\n      }),\r\n      ';',\r\n    ]);\r\n  }\r\n\r\n  removeColumnQuery(tableName, attributeName) {\r\n    return Utils.joinSQLFragments([\r\n      'ALTER TABLE',\r\n      this.quoteTable(tableName),\r\n      'DROP',\r\n      this.quoteIdentifier(attributeName),\r\n      ';',\r\n    ]);\r\n  }\r\n\r\n  changeColumnQuery(tableName, attributes) {\r\n    const attrString = [];\r\n    const constraintString = [];\r\n\r\n    for (const attributeName in attributes) {\r\n      let definition = attributes[attributeName];\r\n      if (definition.includes('REFERENCES')) {\r\n        const attrName = this.quoteIdentifier(attributeName);\r\n        definition = definition.replace(/.+?(?=REFERENCES)/, '');\r\n        constraintString.push(`FOREIGN KEY (${attrName}) ${definition}`);\r\n      } else {\r\n        attrString.push(`\\`${attributeName}\\` \\`${attributeName}\\` ${definition}`);\r\n      }\r\n    }\r\n\r\n    return Utils.joinSQLFragments([\r\n      'ALTER TABLE',\r\n      this.quoteTable(tableName),\r\n      attrString.length && `CHANGE ${attrString.join(', ')}`,\r\n      constraintString.length && `ADD ${constraintString.join(', ')}`,\r\n      ';',\r\n    ]);\r\n  }\r\n\r\n  renameColumnQuery(tableName, attrBefore, attributes) {\r\n    const attrString = [];\r\n\r\n    for (const attrName in attributes) {\r\n      const definition = attributes[attrName];\r\n      attrString.push(`\\`${attrBefore}\\` \\`${attrName}\\` ${definition}`);\r\n    }\r\n\r\n    return Utils.joinSQLFragments([\r\n      'ALTER TABLE',\r\n      this.quoteTable(tableName),\r\n      'CHANGE',\r\n      attrString.join(', '),\r\n      ';',\r\n    ]);\r\n  }\r\n\r\n  handleSequelizeMethod(smth, tableName, factory, options, prepend) {\r\n    if (smth instanceof Utils.Json) {\r\n      // Parse nested object\r\n      if (smth.conditions) {\r\n        const conditions = this.parseConditionObject(smth.conditions).map(condition => `${this.jsonPathExtractionQuery(condition.path[0], _.tail(condition.path))} = '${condition.value}'`);\r\n\r\n        return conditions.join(' AND ');\r\n      }\r\n\r\n      if (smth.path) {\r\n        let str;\r\n\r\n        // Allow specifying conditions using the sqlite json functions\r\n        if (this._checkValidJsonStatement(smth.path)) {\r\n          str = smth.path;\r\n        } else {\r\n          // Also support json property accessors\r\n          const paths = _.toPath(smth.path);\r\n          const column = paths.shift();\r\n          str = this.jsonPathExtractionQuery(column, paths);\r\n        }\r\n\r\n        if (smth.value) {\r\n          str += ` = ${this.escape(smth.value, undefined, options)}`;\r\n        }\r\n\r\n        return str;\r\n      }\r\n    } else if (smth instanceof Utils.Cast) {\r\n      if (/timestamp/i.test(smth.type)) {\r\n        smth.type = 'datetime';\r\n      } else if (smth.json && /boolean/i.test(smth.type)) {\r\n        // true or false cannot be casted as booleans within a JSON structure\r\n        smth.type = 'char';\r\n      } else if (/double precision/i.test(smth.type) || /boolean/i.test(smth.type) || /integer/i.test(smth.type)) {\r\n        smth.type = 'decimal';\r\n      } else if (/text/i.test(smth.type)) {\r\n        smth.type = 'char';\r\n      }\r\n    }\r\n\r\n    return super.handleSequelizeMethod(smth, tableName, factory, options, prepend);\r\n  }\r\n\r\n  _toJSONValue(value) {\r\n    // true/false are stored as strings in mysql\r\n    if (typeof value === 'boolean') {\r\n      return value.toString();\r\n    }\r\n\r\n    // null is stored as a string in mysql\r\n    if (value === null) {\r\n      return 'null';\r\n    }\r\n\r\n    return value;\r\n  }\r\n\r\n  truncateTableQuery(tableName) {\r\n    return `TRUNCATE ${this.quoteTable(tableName)}`;\r\n  }\r\n\r\n  deleteQuery(tableName, where, options = {}, model) {\r\n    let query = `DELETE FROM ${this.quoteTable(tableName)}`;\r\n\r\n    where = this.getWhereConditions(where, null, model, options);\r\n    if (where) {\r\n      query += ` WHERE ${where}`;\r\n    }\r\n\r\n    if (options.limit) {\r\n      query += ` LIMIT ${this.escape(options.limit, undefined, _.pick(options, ['bind', 'replacements']))}`;\r\n    }\r\n\r\n    return query;\r\n  }\r\n\r\n  showIndexesQuery(tableName, options) {\r\n    return Utils.joinSQLFragments([\r\n      `SHOW INDEX FROM ${this.quoteTable(tableName)}`,\r\n      options && options.database && `FROM \\`${options.database}\\``,\r\n    ]);\r\n  }\r\n\r\n  showConstraintsQuery(table, constraintName) {\r\n    const tableName = table.tableName || table;\r\n    const schemaName = table.schema;\r\n\r\n    return Utils.joinSQLFragments([\r\n      'SELECT CONSTRAINT_CATALOG AS constraintCatalog,',\r\n      'CONSTRAINT_NAME AS constraintName,',\r\n      'CONSTRAINT_SCHEMA AS constraintSchema,',\r\n      'CONSTRAINT_TYPE AS constraintType,',\r\n      'TABLE_NAME AS tableName,',\r\n      'TABLE_SCHEMA AS tableSchema',\r\n      'from INFORMATION_SCHEMA.TABLE_CONSTRAINTS',\r\n      `WHERE table_name='${tableName}'`,\r\n      constraintName && `AND constraint_name = '${constraintName}'`,\r\n      schemaName && `AND TABLE_SCHEMA = '${schemaName}'`,\r\n      ';',\r\n    ]);\r\n  }\r\n\r\n  removeIndexQuery(tableName, indexNameOrAttributes) {\r\n    let indexName = indexNameOrAttributes;\r\n\r\n    if (typeof indexName !== 'string') {\r\n      indexName = Utils.underscore(`${tableName}_${indexNameOrAttributes.join('_')}`);\r\n    }\r\n\r\n    return Utils.joinSQLFragments([\r\n      'DROP INDEX',\r\n      this.quoteIdentifier(indexName),\r\n      'ON',\r\n      this.quoteTable(tableName),\r\n    ]);\r\n  }\r\n\r\n  attributeToSQL(attribute, options) {\r\n    if (!_.isPlainObject(attribute)) {\r\n      attribute = {\r\n        type: attribute,\r\n      };\r\n    }\r\n\r\n    const attributeString = attribute.type.toString({ escape: this.escape.bind(this) });\r\n    let template = attributeString;\r\n\r\n    if (attribute.allowNull === false) {\r\n      template += ' NOT NULL';\r\n    }\r\n\r\n    if (attribute.autoIncrement) {\r\n      template += ' auto_increment';\r\n    }\r\n\r\n    // BLOB/TEXT/GEOMETRY/JSON cannot have a default value\r\n    if (!typeWithoutDefault.has(attributeString)\r\n      && attribute.type._binary !== true\r\n      && Utils.defaultValueSchemable(attribute.defaultValue)) {\r\n      template += ` DEFAULT ${this.escape(attribute.defaultValue)}`;\r\n    }\r\n\r\n    if (attribute.unique === true) {\r\n      template += ' UNIQUE';\r\n    }\r\n\r\n    if (attribute.primaryKey) {\r\n      template += ' PRIMARY KEY';\r\n    }\r\n\r\n    if (attribute.comment) {\r\n      template += ` COMMENT ${this.escape(attribute.comment)}`;\r\n    }\r\n\r\n    if (attribute.first) {\r\n      template += ' FIRST';\r\n    }\r\n\r\n    if (attribute.after) {\r\n      template += ` AFTER ${this.quoteIdentifier(attribute.after)}`;\r\n    }\r\n\r\n    if (attribute.references) {\r\n      if (options && options.context === 'addColumn' && options.foreignKey) {\r\n        const attrName = this.quoteIdentifier(options.foreignKey);\r\n        const fkName = this.quoteIdentifier(`${options.tableName}_${attrName}_foreign_idx`);\r\n\r\n        template += `, ADD CONSTRAINT ${fkName} FOREIGN KEY (${attrName})`;\r\n      }\r\n\r\n      template += ` REFERENCES ${this.quoteTable(attribute.references.model)}`;\r\n\r\n      if (attribute.references.key) {\r\n        template += ` (${this.quoteIdentifier(attribute.references.key)})`;\r\n      } else {\r\n        template += ` (${this.quoteIdentifier('id')})`;\r\n      }\r\n\r\n      if (attribute.onDelete) {\r\n        template += ` ON DELETE ${attribute.onDelete.toUpperCase()}`;\r\n      }\r\n\r\n      if (attribute.onUpdate) {\r\n        template += ` ON UPDATE ${attribute.onUpdate.toUpperCase()}`;\r\n      }\r\n    }\r\n\r\n    return template;\r\n  }\r\n\r\n  attributesToSQL(attributes, options) {\r\n    const result = {};\r\n\r\n    for (const key in attributes) {\r\n      const attribute = attributes[key];\r\n      result[attribute.field || key] = this.attributeToSQL(attribute, options);\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Check whether the statmement is json function or simple path\r\n   *\r\n   * @param   {string}  stmt  The statement to validate\r\n   * @returns {boolean}       true if the given statement is json function\r\n   * @throws  {Error}         throw if the statement looks like json function but has invalid token\r\n   * @private\r\n   */\r\n  _checkValidJsonStatement(stmt) {\r\n    if (typeof stmt !== 'string') {\r\n      return false;\r\n    }\r\n\r\n    let currentIndex = 0;\r\n    let openingBrackets = 0;\r\n    let closingBrackets = 0;\r\n    let hasJsonFunction = false;\r\n    let hasInvalidToken = false;\r\n\r\n    while (currentIndex < stmt.length) {\r\n      const string = stmt.slice(currentIndex);\r\n      const functionMatches = JSON_FUNCTION_REGEX.exec(string);\r\n      if (functionMatches) {\r\n        currentIndex += functionMatches[0].indexOf('(');\r\n        hasJsonFunction = true;\r\n        continue;\r\n      }\r\n\r\n      const operatorMatches = JSON_OPERATOR_REGEX.exec(string);\r\n      if (operatorMatches) {\r\n        currentIndex += operatorMatches[0].length;\r\n        hasJsonFunction = true;\r\n        continue;\r\n      }\r\n\r\n      const tokenMatches = TOKEN_CAPTURE_REGEX.exec(string);\r\n      if (tokenMatches) {\r\n        const capturedToken = tokenMatches[1];\r\n\r\n        if (capturedToken === '(') {\r\n          openingBrackets++;\r\n        } else if (capturedToken === ')') {\r\n          closingBrackets++;\r\n        } else if (capturedToken === ';') {\r\n          hasInvalidToken = true;\r\n          break;\r\n        }\r\n\r\n        currentIndex += tokenMatches[0].length;\r\n        continue;\r\n      }\r\n\r\n      break;\r\n    }\r\n\r\n    // Check invalid json statement\r\n    if (hasJsonFunction && (hasInvalidToken || openingBrackets !== closingBrackets)) {\r\n      throw new Error(`Invalid json statement: ${stmt}`);\r\n    }\r\n\r\n    // return true if the statement has valid json function\r\n    return hasJsonFunction;\r\n  }\r\n\r\n  /**\r\n   * Generates an SQL query that returns all foreign keys of a table.\r\n   *\r\n   * @param  {object} table  The table.\r\n   * @param  {string} schemaName The name of the schema.\r\n   * @returns {string}            The generated sql query.\r\n   * @private\r\n   */\r\n  getForeignKeysQuery(table, schemaName) {\r\n    const tableName = table.tableName || table;\r\n\r\n    return Utils.joinSQLFragments([\r\n      'SELECT',\r\n      FOREIGN_KEY_FIELDS,\r\n      `FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE where TABLE_NAME = '${tableName}'`,\r\n      `AND CONSTRAINT_NAME!='PRIMARY' AND CONSTRAINT_SCHEMA='${schemaName}'`,\r\n      'AND REFERENCED_TABLE_NAME IS NOT NULL',\r\n      ';',\r\n    ]);\r\n  }\r\n\r\n  /**\r\n   * Generates an SQL query that returns the foreign key constraint of a given column.\r\n   *\r\n   * @param  {object} table  The table.\r\n   * @param  {string} columnName The name of the column.\r\n   * @returns {string}            The generated sql query.\r\n   * @private\r\n   */\r\n  getForeignKeyQuery(table, columnName) {\r\n    const quotedSchemaName = table.schema ? wrapSingleQuote(table.schema) : '';\r\n    const quotedTableName = wrapSingleQuote(table.tableName || table);\r\n    const quotedColumnName = wrapSingleQuote(columnName);\r\n\r\n    return Utils.joinSQLFragments([\r\n      'SELECT',\r\n      FOREIGN_KEY_FIELDS,\r\n      'FROM INFORMATION_SCHEMA.KEY_COLUMN_USAGE',\r\n      'WHERE (',\r\n      [\r\n        `REFERENCED_TABLE_NAME = ${quotedTableName}`,\r\n        table.schema && `AND REFERENCED_TABLE_SCHEMA = ${quotedSchemaName}`,\r\n        `AND REFERENCED_COLUMN_NAME = ${quotedColumnName}`,\r\n      ],\r\n      ') OR (',\r\n      [\r\n        `TABLE_NAME = ${quotedTableName}`,\r\n        table.schema && `AND TABLE_SCHEMA = ${quotedSchemaName}`,\r\n        `AND COLUMN_NAME = ${quotedColumnName}`,\r\n        'AND REFERENCED_TABLE_NAME IS NOT NULL',\r\n      ],\r\n      ')',\r\n    ]);\r\n  }\r\n\r\n  /**\r\n   * Generates an SQL query that removes a foreign key from a table.\r\n   *\r\n   * @param  {string} tableName  The name of the table.\r\n   * @param  {string} foreignKey The name of the foreign key constraint.\r\n   * @returns {string}            The generated sql query.\r\n   * @private\r\n   */\r\n  dropForeignKeyQuery(tableName, foreignKey) {\r\n    return Utils.joinSQLFragments([\r\n      'ALTER TABLE',\r\n      this.quoteTable(tableName),\r\n      'DROP FOREIGN KEY',\r\n      this.quoteIdentifier(foreignKey),\r\n      ';',\r\n    ]);\r\n  }\r\n\r\n  /**\r\n   * Quote identifier in sql clause\r\n   *\r\n   * @param {string} identifier\r\n   * @param {boolean} force\r\n   *\r\n   * @returns {string}\r\n   */\r\n  quoteIdentifier(identifier, force) {\r\n    return Utils.addTicks(Utils.removeTicks(identifier, '`'), '`');\r\n  }\r\n\r\n  /**\r\n   * Generates an SQL query that extract JSON property of given path.\r\n   *\r\n   * @param   {string}               column  The JSON column\r\n   * @param   {string|Array<string>} [path]  The path to extract (optional)\r\n   * @param   {boolean}              [isJson] The value is JSON use alt symbols (optional)\r\n   * @returns {string}                       The generated sql query\r\n   * @private\r\n   */\r\n  jsonPathExtractionQuery(column, path, isJson) {\r\n    let paths = _.toPath(path);\r\n    const quotedColumn = this.isIdentifierQuoted(column)\r\n      ? column\r\n      : this.quoteIdentifier(column);\r\n\r\n    /**\r\n     * Non digit sub paths need to be quoted as ECMAScript identifiers\r\n     * https://bugs.mysql.com/bug.php?id=81896\r\n     */\r\n    paths = paths.map(subPath => {\r\n      return /\\D/.test(subPath)\r\n        ? Utils.addTicks(subPath, '\"')\r\n        : subPath;\r\n    });\r\n\r\n    const pathStr = this.escape(['$']\r\n      .concat(paths)\r\n      .join('.')\r\n      .replace(/\\.(\\d+)(?:(?=\\.)|$)/g, (__, digit) => `[${digit}]`));\r\n\r\n    return `json_unquote(json_extract(${quotedColumn},${pathStr}))`;\r\n  }\r\n\r\n  _createBindParamCollector(bindContext /* : BindContext */) {\r\n    return function collect(value) {\r\n      if (!bindContext.normalizedBind) {\r\n        bindContext.normalizedBind = [];\r\n      }\r\n\r\n      bindContext.normalizedBind.push(value);\r\n\r\n      return '?';\r\n    };\r\n  }\r\n}\r\n\r\n// private methods\r\nfunction wrapSingleQuote(identifier) {\r\n  return Utils.addTicks(identifier, '\\'');\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
