{
  "version": 3,
  "sources": ["../../../src/dialects/mysql/query.js"],
  "sourcesContent": ["'use strict';\r\n\r\nconst { AbstractQuery } = require('../abstract/query');\r\nconst sequelizeErrors = require('../../errors');\r\nconst _ = require('lodash');\r\nconst { logger } = require('../../utils/logger');\r\n\r\nconst ER_DUP_ENTRY = 1062;\r\nconst ER_DEADLOCK = 1213;\r\nconst ER_ROW_IS_REFERENCED = 1451;\r\nconst ER_NO_REFERENCED_ROW = 1452;\r\n\r\nconst debug = logger.debugContext('sql:mysql');\r\n\r\nexport class MySqlQuery extends AbstractQuery {\r\n  constructor(connection, sequelize, options) {\r\n    super(connection, sequelize, { showWarnings: false, ...options });\r\n  }\r\n\r\n  async run(sql, parameters) {\r\n    this.sql = sql;\r\n    const { connection, options } = this;\r\n\r\n    const showWarnings = this.sequelize.options.showWarnings || options.showWarnings;\r\n\r\n    const complete = this._logQuery(sql, debug, parameters);\r\n\r\n    if (parameters) {\r\n      debug('parameters(%j)', parameters);\r\n    }\r\n\r\n    let results;\r\n    const errForStack = new Error();\r\n\r\n    try {\r\n      if (parameters && parameters.length > 0) {\r\n        results = await new Promise((resolve, reject) => {\r\n          connection\r\n            .execute(sql, parameters, (error, result) => (error ? reject(error) : resolve(result)))\r\n            .setMaxListeners(100);\r\n        });\r\n      } else {\r\n        results = await new Promise((resolve, reject) => {\r\n          connection\r\n            .query({ sql }, (error, result) => (error ? reject(error) : resolve(result)))\r\n            .setMaxListeners(100);\r\n        });\r\n      }\r\n    } catch (error) {\r\n      if (options.transaction && error.errno === ER_DEADLOCK) {\r\n        // MySQL automatically rolls-back transactions in the event of a deadlock.\r\n        // However, we still initiate a manual rollback to ensure the connection gets released - see #13102.\r\n        try {\r\n          await options.transaction.rollback();\r\n        } catch {\r\n          // Ignore errors - since MySQL automatically rolled back, we're\r\n          // not that worried about this redundant rollback failing.\r\n        }\r\n\r\n        options.transaction.finished = 'rollback';\r\n      }\r\n\r\n      error.sql = sql;\r\n      error.parameters = parameters;\r\n      throw this.formatError(error, errForStack.stack);\r\n    } finally {\r\n      complete();\r\n    }\r\n\r\n    if (showWarnings && results && results.warningStatus > 0) {\r\n      await this.logWarnings(results);\r\n    }\r\n\r\n    return this.formatResults(results);\r\n  }\r\n\r\n  /**\r\n   * High level function that handles the results of a query execution.\r\n   *\r\n   *\r\n   * Example:\r\n   *  query.formatResults([\r\n   *    {\r\n   *      id: 1,              // this is from the main table\r\n   *      attr2: 'snafu',     // this is from the main table\r\n   *      Tasks.id: 1,        // this is from the associated table\r\n   *      Tasks.title: 'task' // this is from the associated table\r\n   *    }\r\n   *  ])\r\n   *\r\n   * @param {Array} data - The result of the query execution.\r\n   * @private\r\n   */\r\n  formatResults(data) {\r\n    let result = this.instance;\r\n\r\n    if (this.isInsertQuery(data)) {\r\n      this.handleInsertQuery(data);\r\n\r\n      if (!this.instance) {\r\n        // handle bulkCreate AI primary key\r\n        if (\r\n          data.constructor.name === 'ResultSetHeader'\r\n          && this.model\r\n          && this.model.autoIncrementAttribute\r\n          && this.model.autoIncrementAttribute === this.model.primaryKeyAttribute\r\n          && this.model.rawAttributes[this.model.primaryKeyAttribute]\r\n        ) {\r\n          const startId = data[this.getInsertIdField()];\r\n          result = [];\r\n          for (let i = startId; i < startId + data.affectedRows; i++) {\r\n            result.push({ [this.model.rawAttributes[this.model.primaryKeyAttribute].field]: i });\r\n          }\r\n        } else {\r\n          result = data[this.getInsertIdField()];\r\n        }\r\n      }\r\n    }\r\n\r\n    if (this.isSelectQuery()) {\r\n      return this.handleSelectQuery(data);\r\n    }\r\n\r\n    if (this.isShowTablesQuery()) {\r\n      return this.handleShowTablesQuery(data);\r\n    }\r\n\r\n    if (this.isDescribeQuery()) {\r\n      result = {};\r\n\r\n      for (const _result of data) {\r\n        const enumRegex = /^enum/i;\r\n        result[_result.Field] = {\r\n          type: enumRegex.test(_result.Type) ? _result.Type.replace(enumRegex, 'ENUM') : _result.Type.toUpperCase(),\r\n          allowNull: _result.Null === 'YES',\r\n          defaultValue: _result.Default,\r\n          primaryKey: _result.Key === 'PRI',\r\n          autoIncrement: Object.prototype.hasOwnProperty.call(_result, 'Extra')\r\n            && _result.Extra.toLowerCase() === 'auto_increment',\r\n          comment: _result.Comment ? _result.Comment : null,\r\n        };\r\n      }\r\n\r\n      return result;\r\n    }\r\n\r\n    if (this.isShowIndexesQuery()) {\r\n      return this.handleShowIndexesQuery(data);\r\n    }\r\n\r\n    if (this.isCallQuery()) {\r\n      return data[0];\r\n    }\r\n\r\n    if (this.isBulkUpdateQuery() || this.isBulkDeleteQuery()) {\r\n      return data.affectedRows;\r\n    }\r\n\r\n    if (this.isVersionQuery()) {\r\n      return data[0].version;\r\n    }\r\n\r\n    if (this.isForeignKeysQuery()) {\r\n      return data;\r\n    }\r\n\r\n    if (this.isUpsertQuery()) {\r\n      return [result, data.affectedRows === 1];\r\n    }\r\n\r\n    if (this.isInsertQuery() || this.isUpdateQuery()) {\r\n      return [result, data.affectedRows];\r\n    }\r\n\r\n    if (this.isShowConstraintsQuery()) {\r\n      return data;\r\n    }\r\n\r\n    if (this.isRawQuery()) {\r\n      // MySQL returns row data and metadata (affected rows etc) in a single object - let's standarize it, sorta\r\n      return [data, data];\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  async logWarnings(results) {\r\n    const warningResults = await this.run('SHOW WARNINGS');\r\n    const warningMessage = `MySQL Warnings (${this.connection.uuid || 'default'}): `;\r\n    const messages = [];\r\n    for (const _warningRow of warningResults) {\r\n      if (_warningRow === undefined || typeof _warningRow[Symbol.iterator] !== 'function') {\r\n        continue;\r\n      }\r\n\r\n      for (const _warningResult of _warningRow) {\r\n        if (Object.prototype.hasOwnProperty.call(_warningResult, 'Message')) {\r\n          messages.push(_warningResult.Message);\r\n        } else {\r\n          for (const _objectKey of _warningResult.keys()) {\r\n            messages.push([_objectKey, _warningResult[_objectKey]].join(': '));\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    this.sequelize.log(warningMessage + messages.join('; '), this.options);\r\n\r\n    return results;\r\n  }\r\n\r\n  formatError(err, errStack) {\r\n    const errCode = err.errno || err.code;\r\n\r\n    switch (errCode) {\r\n      case ER_DUP_ENTRY: {\r\n        const match = err.message.match(/Duplicate entry '([\\S\\s]*)' for key '?((.|\\s)*?)'?$/);\r\n        let fields = {};\r\n        let message = 'Validation error';\r\n        const values = match ? match[1].split('-') : undefined;\r\n        const fieldKey = match ? match[2].split('.').pop() : undefined;\r\n        const fieldVal = match ? match[1] : undefined;\r\n        const uniqueKey = this.model && this.model.uniqueKeys[fieldKey];\r\n\r\n        if (uniqueKey) {\r\n          if (uniqueKey.msg) {\r\n            message = uniqueKey.msg;\r\n          }\r\n\r\n          fields = _.zipObject(uniqueKey.fields, values);\r\n        } else {\r\n          fields[fieldKey] = fieldVal;\r\n        }\r\n\r\n        const errors = [];\r\n        _.forOwn(fields, (value, field) => {\r\n          errors.push(new sequelizeErrors.ValidationErrorItem(\r\n            this.getUniqueConstraintErrorMessage(field),\r\n            'unique violation', // sequelizeErrors.ValidationErrorItem.Origins.DB,\r\n            field,\r\n            value,\r\n            this.instance,\r\n            'not_unique',\r\n          ));\r\n        });\r\n\r\n        return new sequelizeErrors.UniqueConstraintError({ message, errors, cause: err, fields, stack: errStack });\r\n      }\r\n\r\n      case ER_ROW_IS_REFERENCED:\r\n      case ER_NO_REFERENCED_ROW: {\r\n        // e.g. CONSTRAINT `example_constraint_name` FOREIGN KEY (`example_id`) REFERENCES `examples` (`id`)\r\n        const match = err.message.match(\r\n          /CONSTRAINT ([\"`])(.*)\\1 FOREIGN KEY \\(\\1(.*)\\1\\) REFERENCES \\1(.*)\\1 \\(\\1(.*)\\1\\)/,\r\n        );\r\n        const quoteChar = match ? match[1] : '`';\r\n        const fields = match ? match[3].split(new RegExp(`${quoteChar}, *${quoteChar}`)) : undefined;\r\n\r\n        return new sequelizeErrors.ForeignKeyConstraintError({\r\n          reltype: String(errCode) === String(ER_ROW_IS_REFERENCED) ? 'parent' : 'child',\r\n          table: match ? match[4] : undefined,\r\n          fields,\r\n          value: fields && fields.length && this.instance && this.instance[fields[0]] || undefined,\r\n          index: match ? match[2] : undefined,\r\n          cause: err,\r\n          stack: errStack,\r\n        });\r\n      }\r\n\r\n      default:\r\n        return new sequelizeErrors.DatabaseError(err, { stack: errStack });\r\n    }\r\n  }\r\n\r\n  handleShowIndexesQuery(data) {\r\n    // Group by index name, and collect all fields\r\n    data = data.reduce((acc, item) => {\r\n      if (!(item.Key_name in acc)) {\r\n        acc[item.Key_name] = item;\r\n        item.fields = [];\r\n      }\r\n\r\n      acc[item.Key_name].fields[item.Seq_in_index - 1] = {\r\n        attribute: item.Column_name,\r\n        length: item.Sub_part || undefined,\r\n        order: item.Collation === 'A' ? 'ASC' : undefined,\r\n      };\r\n      delete item.column_name;\r\n\r\n      return acc;\r\n    }, {});\r\n\r\n    return _.map(data, item => ({\r\n      primary: item.Key_name === 'PRIMARY',\r\n      fields: item.fields,\r\n      name: item.Key_name,\r\n      tableName: item.Table,\r\n      unique: item.Non_unique !== 1,\r\n      type: item.Index_type,\r\n    }));\r\n  }\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
