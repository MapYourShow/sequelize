{
  "version": 3,
  "sources": ["../../../src/dialects/sqlite/data-types.js"],
  "sourcesContent": ["'use strict';\r\n\r\nmodule.exports = BaseTypes => {\r\n  const warn = BaseTypes.ABSTRACT.warn.bind(undefined, 'https://www.sqlite.org/datatype3.html');\r\n\r\n  /**\r\n   * Removes unsupported SQLite options, i.e., UNSIGNED and ZEROFILL, for the integer data types.\r\n   *\r\n   * @param {object} dataType The base integer data type.\r\n   * @private\r\n   */\r\n  function removeUnsupportedIntegerOptions(dataType) {\r\n    if (dataType._zerofill || dataType._unsigned) {\r\n      warn(`SQLite does not support '${dataType.key}' with UNSIGNED or ZEROFILL. Plain '${dataType.key}' will be used instead.`);\r\n      dataType._unsigned = undefined;\r\n      dataType._zerofill = undefined;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @see https://sqlite.org/datatype3.html\r\n   */\r\n\r\n  BaseTypes.DATE.types.sqlite = ['DATETIME'];\r\n  BaseTypes.STRING.types.sqlite = ['VARCHAR', 'VARCHAR BINARY'];\r\n  BaseTypes.CHAR.types.sqlite = ['CHAR', 'CHAR BINARY'];\r\n  BaseTypes.TEXT.types.sqlite = ['TEXT'];\r\n  BaseTypes.TINYINT.types.sqlite = ['TINYINT'];\r\n  BaseTypes.SMALLINT.types.sqlite = ['SMALLINT'];\r\n  BaseTypes.MEDIUMINT.types.sqlite = ['MEDIUMINT'];\r\n  BaseTypes.INTEGER.types.sqlite = ['INTEGER'];\r\n  BaseTypes.BIGINT.types.sqlite = ['BIGINT'];\r\n  BaseTypes.FLOAT.types.sqlite = ['FLOAT'];\r\n  BaseTypes.TIME.types.sqlite = ['TIME'];\r\n  BaseTypes.DATEONLY.types.sqlite = ['DATE'];\r\n  BaseTypes.BOOLEAN.types.sqlite = ['TINYINT'];\r\n  BaseTypes.BLOB.types.sqlite = ['TINYBLOB', 'BLOB', 'LONGBLOB'];\r\n  BaseTypes.DECIMAL.types.sqlite = ['DECIMAL'];\r\n  BaseTypes.UUID.types.sqlite = ['UUID'];\r\n  BaseTypes.ENUM.types.sqlite = false;\r\n  BaseTypes.REAL.types.sqlite = ['REAL'];\r\n  BaseTypes.DOUBLE.types.sqlite = ['DOUBLE PRECISION'];\r\n  BaseTypes.GEOMETRY.types.sqlite = false;\r\n  BaseTypes.JSON.types.sqlite = ['JSON', 'JSONB'];\r\n\r\n  class JSONTYPE extends BaseTypes.JSON {\r\n    static parse(data) {\r\n      return JSON.parse(data);\r\n    }\r\n  }\r\n\r\n  class DATE extends BaseTypes.DATE {\r\n    static parse(date, options) {\r\n      if (!date.includes('+')) {\r\n        // For backwards compat. Dates inserted by sequelize < 2.0dev12 will not have a timestamp set\r\n        return new Date(date + options.timezone);\r\n      }\r\n\r\n      return new Date(date); // We already have a timezone stored in the string\r\n    }\r\n  }\r\n\r\n  class DATEONLY extends BaseTypes.DATEONLY {\r\n    static parse(date) {\r\n      return date;\r\n    }\r\n  }\r\n\r\n  class STRING extends BaseTypes.STRING {\r\n    toSql() {\r\n      if (this._binary) {\r\n        return `VARCHAR BINARY(${this._length})`;\r\n      }\r\n\r\n      return super.toSql(this);\r\n    }\r\n  }\r\n\r\n  class TEXT extends BaseTypes.TEXT {\r\n    toSql() {\r\n      if (this._length) {\r\n        warn('SQLite does not support TEXT with options. Plain `TEXT` will be used instead.');\r\n        this._length = undefined;\r\n      }\r\n\r\n      return 'TEXT';\r\n    }\r\n  }\r\n\r\n  class CITEXT extends BaseTypes.CITEXT {\r\n    toSql() {\r\n      return 'TEXT COLLATE NOCASE';\r\n    }\r\n  }\r\n\r\n  class CHAR extends BaseTypes.CHAR {\r\n    toSql() {\r\n      if (this._binary) {\r\n        return `CHAR BINARY(${this._length})`;\r\n      }\r\n\r\n      return super.toSql();\r\n    }\r\n  }\r\n\r\n  class NUMBER extends BaseTypes.NUMBER {\r\n    toSql() {\r\n      let result = this.key;\r\n      if (this._unsigned) {\r\n        result += ' UNSIGNED';\r\n      }\r\n\r\n      if (this._zerofill) {\r\n        result += ' ZEROFILL';\r\n      }\r\n\r\n      if (this._length) {\r\n        result += `(${this._length}`;\r\n        if (typeof this._decimals === 'number') {\r\n          result += `,${this._decimals}`;\r\n        }\r\n\r\n        result += ')';\r\n      }\r\n\r\n      return result;\r\n    }\r\n  }\r\n\r\n  class TINYINT extends BaseTypes.TINYINT {\r\n    constructor(length) {\r\n      super(length);\r\n      removeUnsupportedIntegerOptions(this);\r\n    }\r\n  }\r\n\r\n  class SMALLINT extends BaseTypes.SMALLINT {\r\n    constructor(length) {\r\n      super(length);\r\n      removeUnsupportedIntegerOptions(this);\r\n    }\r\n  }\r\n\r\n  class MEDIUMINT extends BaseTypes.MEDIUMINT {\r\n    constructor(length) {\r\n      super(length);\r\n      removeUnsupportedIntegerOptions(this);\r\n    }\r\n  }\r\n\r\n  class INTEGER extends BaseTypes.INTEGER {\r\n    constructor(length) {\r\n      super(length);\r\n      removeUnsupportedIntegerOptions(this);\r\n    }\r\n  }\r\n\r\n  class BIGINT extends BaseTypes.BIGINT {\r\n    constructor(length) {\r\n      super(length);\r\n      removeUnsupportedIntegerOptions(this);\r\n    }\r\n  }\r\n\r\n  class FLOAT extends BaseTypes.FLOAT {}\r\n\r\n  class DOUBLE extends BaseTypes.DOUBLE {}\r\n\r\n  class REAL extends BaseTypes.REAL {}\r\n\r\n  function parseFloating(value) {\r\n    if (typeof value !== 'string') {\r\n      return value;\r\n    }\r\n\r\n    if (value === 'NaN') {\r\n      return Number.NaN;\r\n    }\r\n\r\n    if (value === 'Infinity') {\r\n      return Number.POSITIVE_INFINITY;\r\n    }\r\n\r\n    if (value === '-Infinity') {\r\n      return Number.NEGATIVE_INFINITY;\r\n    }\r\n  }\r\n\r\n  for (const floating of [FLOAT, DOUBLE, REAL]) {\r\n    floating.parse = parseFloating;\r\n  }\r\n\r\n  for (const num of [FLOAT, DOUBLE, REAL, TINYINT, SMALLINT, MEDIUMINT, INTEGER, BIGINT]) {\r\n    num.prototype.toSql = NUMBER.prototype.toSql;\r\n  }\r\n\r\n  class ENUM extends BaseTypes.ENUM {\r\n    toSql() {\r\n      return 'TEXT';\r\n    }\r\n  }\r\n\r\n  return {\r\n    DATE,\r\n    DATEONLY,\r\n    STRING,\r\n    CHAR,\r\n    NUMBER,\r\n    FLOAT,\r\n    REAL,\r\n    'DOUBLE PRECISION': DOUBLE,\r\n    TINYINT,\r\n    SMALLINT,\r\n    MEDIUMINT,\r\n    INTEGER,\r\n    BIGINT,\r\n    TEXT,\r\n    ENUM,\r\n    JSON: JSONTYPE,\r\n    CITEXT,\r\n  };\r\n};\r\n"],
  "mappings": "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",
  "names": []
}
