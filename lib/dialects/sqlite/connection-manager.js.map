{
  "version": 3,
  "sources": ["../../../src/dialects/sqlite/connection-manager.js"],
  "sourcesContent": ["'use strict';\r\n\r\nconst fs = require('fs');\r\nconst path = require('path');\r\nconst { ConnectionManager } = require('../abstract/connection-manager');\r\nconst { logger } = require('../../utils/logger');\r\n\r\nconst debug = logger.debugContext('connection:sqlite');\r\nconst dataTypes = require('../../data-types').sqlite;\r\nconst sequelizeErrors = require('../../errors');\r\nconst parserStore = require('../parserStore')('sqlite');\r\nconst { promisify } = require('util');\r\n\r\nexport class SqliteConnectionManager extends ConnectionManager {\r\n  constructor(dialect, sequelize) {\r\n    super(dialect, sequelize);\r\n\r\n    // We attempt to parse file location from a connection uri\r\n    // but we shouldn't match sequelize default host.\r\n    if (this.sequelize.options.host === 'localhost') {\r\n      delete this.sequelize.options.host;\r\n    }\r\n\r\n    this.connections = {};\r\n    this.lib = this._loadDialectModule('sqlite3');\r\n    this.refreshTypeParser(dataTypes);\r\n  }\r\n\r\n  async _onProcessExit() {\r\n    await Promise.all(\r\n      Object.getOwnPropertyNames(this.connections)\r\n        .map(connection => promisify(callback => this.connections[connection].close(callback))()),\r\n    );\r\n\r\n    return super._onProcessExit.call(this);\r\n  }\r\n\r\n  // Expose this as a method so that the parsing may be updated when the user has added additional, custom types\r\n  _refreshTypeParser(dataType) {\r\n    parserStore.refresh(dataType);\r\n  }\r\n\r\n  _clearTypeParser() {\r\n    parserStore.clear();\r\n  }\r\n\r\n  async getConnection(options) {\r\n    options = options || {};\r\n    options.uuid = options.uuid || 'default';\r\n\r\n    if (Boolean(this.sequelize.options.storage) !== null && this.sequelize.options.storage !== undefined) {\r\n      // Check explicitely for the storage option to not be set since an empty string signals\r\n      // SQLite will create a temporary disk-based database in that case.\r\n      options.storage = this.sequelize.options.storage;\r\n    } else {\r\n      options.storage = this.sequelize.options.host || ':memory:';\r\n    }\r\n\r\n    options.inMemory = options.storage === ':memory:' ? 1 : 0;\r\n\r\n    const dialectOptions = this.sequelize.options.dialectOptions;\r\n    const defaultReadWriteMode = this.lib.OPEN_READWRITE | this.lib.OPEN_CREATE;\r\n\r\n    options.readWriteMode = dialectOptions && dialectOptions.mode || defaultReadWriteMode;\r\n\r\n    if (this.connections[options.inMemory || options.uuid]) {\r\n      return this.connections[options.inMemory || options.uuid];\r\n    }\r\n\r\n    if (!options.inMemory && (options.readWriteMode & this.lib.OPEN_CREATE) !== 0) {\r\n      // automatic path provision for `options.storage`\r\n      fs.mkdirSync(path.dirname(options.storage), { recursive: true });\r\n    }\r\n\r\n    const connection = await new Promise((resolve, reject) => {\r\n      this.connections[options.inMemory || options.uuid] = new this.lib.Database(\r\n        options.storage,\r\n        options.readWriteMode,\r\n        err => {\r\n          if (err) {\r\n            return reject(new sequelizeErrors.ConnectionError(err));\r\n          }\r\n\r\n          debug(`connection acquired ${options.uuid}`);\r\n          resolve(this.connections[options.inMemory || options.uuid]);\r\n        },\r\n      );\r\n    });\r\n\r\n    if (this.sequelize.config.password) {\r\n      // Make it possible to define and use password for sqlite encryption plugin like sqlcipher\r\n      connection.run(`PRAGMA KEY=${this.sequelize.escape(this.sequelize.config.password)}`);\r\n    }\r\n\r\n    if (this.sequelize.options.foreignKeys !== false) {\r\n      // Make it possible to define and use foreign key constraints unless\r\n      // explicitly disallowed. It's still opt-in per relation\r\n      connection.run('PRAGMA FOREIGN_KEYS=ON');\r\n    }\r\n\r\n    return connection;\r\n  }\r\n\r\n  releaseConnection(connection, force) {\r\n    if (connection.filename === ':memory:' && force !== true) {\r\n      return;\r\n    }\r\n\r\n    if (connection.uuid) {\r\n      connection.close();\r\n      debug(`connection released ${connection.uuid}`);\r\n      delete this.connections[connection.uuid];\r\n    }\r\n  }\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
