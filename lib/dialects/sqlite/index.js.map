{
  "version": 3,
  "sources": ["../../../src/dialects/sqlite/index.js"],
  "sourcesContent": ["'use strict';\r\n\r\nimport { createNamedParamBindCollector } from '../../utils/sql';\r\n\r\nconst _ = require('lodash');\r\nconst { AbstractDialect } = require('../abstract');\r\nconst { SqliteConnectionManager } = require('./connection-manager');\r\nconst { SqliteQuery } = require('./query');\r\nconst { SqliteQueryGenerator } = require('./query-generator');\r\nconst DataTypes = require('../../data-types').sqlite;\r\nconst { SqliteQueryInterface } = require('./query-interface');\r\n\r\nexport class SqliteDialect extends AbstractDialect {\r\n  static supports = _.merge(_.cloneDeep(AbstractDialect.supports), {\r\n    DEFAULT: false,\r\n    'DEFAULT VALUES': true,\r\n    'UNION ALL': false,\r\n    'RIGHT JOIN': false,\r\n    inserts: {\r\n      ignoreDuplicates: ' OR IGNORE',\r\n      updateOnDuplicate: ' ON CONFLICT DO UPDATE SET',\r\n      conflictFields: true,\r\n    },\r\n    index: {\r\n      using: false,\r\n      where: true,\r\n      functionBased: true,\r\n    },\r\n    transactionOptions: {\r\n      type: true,\r\n    },\r\n    constraints: {\r\n      addConstraint: false,\r\n      dropConstraint: false,\r\n    },\r\n    groupedLimit: false,\r\n    JSON: true,\r\n  });\r\n\r\n  constructor(sequelize) {\r\n    super();\r\n    this.sequelize = sequelize;\r\n    this.connectionManager = new SqliteConnectionManager(this, sequelize);\r\n    this.queryGenerator = new SqliteQueryGenerator({\r\n      _dialect: this,\r\n      sequelize,\r\n    });\r\n\r\n    this.queryInterface = new SqliteQueryInterface(\r\n      sequelize,\r\n      this.queryGenerator,\r\n    );\r\n  }\r\n\r\n  createBindCollector() {\r\n    return createNamedParamBindCollector('$');\r\n  }\r\n}\r\n\r\nSqliteDialect.prototype.defaultVersion = '3.8.0'; // minimum supported version\r\nSqliteDialect.prototype.Query = SqliteQuery;\r\nSqliteDialect.prototype.DataTypes = DataTypes;\r\nSqliteDialect.prototype.name = 'sqlite';\r\nSqliteDialect.prototype.TICK_CHAR = '`';\r\nSqliteDialect.prototype.TICK_CHAR_LEFT = SqliteDialect.prototype.TICK_CHAR;\r\nSqliteDialect.prototype.TICK_CHAR_RIGHT = SqliteDialect.prototype.TICK_CHAR;\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,iBAA8C;AAE9C,MAAM,IAAI,QAAQ,QAAQ;AAC1B,MAAM,EAAE,oBAAoB,QAAQ,aAAa;AACjD,MAAM,EAAE,4BAA4B,QAAQ,sBAAsB;AAClE,MAAM,EAAE,gBAAgB,QAAQ,SAAS;AACzC,MAAM,EAAE,yBAAyB,QAAQ,mBAAmB;AAC5D,MAAM,YAAY,QAAQ,kBAAkB,EAAE;AAC9C,MAAM,EAAE,yBAAyB,QAAQ,mBAAmB;AAErD,MAAM,sBAAsB,gBAAgB;AAAA,SAC1C,WAAW,EAAE,MAAM,EAAE,UAAU,gBAAgB,QAAQ,GAAG;AAAA,IAC/D,SAAS;AAAA,IACT,kBAAkB;AAAA,IAClB,aAAa;AAAA,IACb,cAAc;AAAA,IACd,SAAS;AAAA,MACP,kBAAkB;AAAA,MAClB,mBAAmB;AAAA,MACnB,gBAAgB;AAAA,IAClB;AAAA,IACA,OAAO;AAAA,MACL,OAAO;AAAA,MACP,OAAO;AAAA,MACP,eAAe;AAAA,IACjB;AAAA,IACA,oBAAoB;AAAA,MAClB,MAAM;AAAA,IACR;AAAA,IACA,aAAa;AAAA,MACX,eAAe;AAAA,MACf,gBAAgB;AAAA,IAClB;AAAA,IACA,cAAc;AAAA,IACd,MAAM;AAAA,EACR,CAAC;AAAA,EAED,YAAY,WAAW;AACrB,UAAM;AACN,SAAK,YAAY;AACjB,SAAK,oBAAoB,IAAI,wBAAwB,MAAM,SAAS;AACpE,SAAK,iBAAiB,IAAI,qBAAqB;AAAA,MAC7C,UAAU;AAAA,MACV;AAAA,IACF,CAAC;AAED,SAAK,iBAAiB,IAAI,qBACxB,WACA,KAAK,cACP;AAAA,EACF;AAAA,EAEA,sBAAsB;AACpB,WAAO,8CAA8B,GAAG;AAAA,EAC1C;AACF;AAEA,cAAc,UAAU,iBAAiB;AACzC,cAAc,UAAU,QAAQ;AAChC,cAAc,UAAU,YAAY;AACpC,cAAc,UAAU,OAAO;AAC/B,cAAc,UAAU,YAAY;AACpC,cAAc,UAAU,iBAAiB,cAAc,UAAU;AACjE,cAAc,UAAU,kBAAkB,cAAc,UAAU;",
  "names": []
}
