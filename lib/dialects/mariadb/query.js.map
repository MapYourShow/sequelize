{
  "version": 3,
  "sources": ["../../../src/dialects/mariadb/query.js"],
  "sourcesContent": ["'use strict';\r\n\r\nconst { AbstractQuery } = require('../abstract/query');\r\nconst sequelizeErrors = require('../../errors');\r\nconst _ = require('lodash');\r\nconst DataTypes = require('../../data-types');\r\nconst { logger } = require('../../utils/logger');\r\n\r\nconst ER_DUP_ENTRY = 1062;\r\nconst ER_DEADLOCK = 1213;\r\nconst ER_ROW_IS_REFERENCED = 1451;\r\nconst ER_NO_REFERENCED_ROW = 1452;\r\n\r\nconst debug = logger.debugContext('sql:mariadb');\r\n\r\nexport class MariaDbQuery extends AbstractQuery {\r\n  constructor(connection, sequelize, options) {\r\n    super(connection, sequelize, { showWarnings: false, ...options });\r\n  }\r\n\r\n  async run(sql, parameters) {\r\n    this.sql = sql;\r\n    const { connection, options } = this;\r\n\r\n    const showWarnings = this.sequelize.options.showWarnings || options.showWarnings;\r\n\r\n    const complete = this._logQuery(sql, debug, parameters);\r\n\r\n    if (parameters) {\r\n      debug('parameters(%j)', parameters);\r\n    }\r\n\r\n    let results;\r\n\r\n    const errForStack = new Error();\r\n\r\n    try {\r\n      results = await connection.query(this.sql, parameters);\r\n    } catch (error) {\r\n      if (options.transaction && error.errno === ER_DEADLOCK) {\r\n        // MariaDB automatically rolls-back transactions in the event of a deadlock.\r\n        // However, we still initiate a manual rollback to ensure the connection gets released - see #13102.\r\n        try {\r\n          await options.transaction.rollback();\r\n        } catch {\r\n          // Ignore errors - since MariaDB automatically rolled back, we're\r\n          // not that worried about this redundant rollback failing.\r\n        }\r\n\r\n        options.transaction.finished = 'rollback';\r\n      }\r\n\r\n      error.sql = sql;\r\n      error.parameters = parameters;\r\n      throw this.formatError(error, errForStack.stack);\r\n    } finally {\r\n      complete();\r\n    }\r\n\r\n    if (showWarnings && results && results.warningStatus > 0) {\r\n      await this.logWarnings(results);\r\n    }\r\n\r\n    return this.formatResults(results);\r\n  }\r\n\r\n  /**\r\n   * High level function that handles the results of a query execution.\r\n   *\r\n   *\r\n   * Example:\r\n   *  query.formatResults([\r\n   *    {\r\n   *      id: 1,              // this is from the main table\r\n   *      attr2: 'snafu',     // this is from the main table\r\n   *      Tasks.id: 1,        // this is from the associated table\r\n   *      Tasks.title: 'task' // this is from the associated table\r\n   *    }\r\n   *  ])\r\n   *\r\n   * @param {Array} data - The result of the query execution.\r\n   * @private\r\n   */\r\n  formatResults(data) {\r\n    let result = this.instance;\r\n\r\n    if (this.isBulkUpdateQuery() || this.isBulkDeleteQuery()) {\r\n      return data.affectedRows;\r\n    }\r\n\r\n    if (this.isUpsertQuery()) {\r\n      return [result, data.affectedRows === 1];\r\n    }\r\n\r\n    if (this.isInsertQuery(data)) {\r\n      this.handleInsertQuery(data);\r\n\r\n      if (!this.instance) {\r\n        // handle bulkCreate AI primary key\r\n        if (\r\n          this.model\r\n          && this.model.autoIncrementAttribute\r\n          && this.model.autoIncrementAttribute === this.model.primaryKeyAttribute\r\n          && this.model.rawAttributes[this.model.primaryKeyAttribute]\r\n        ) {\r\n          // ONLY TRUE IF @auto_increment_increment is set to 1 !!\r\n          // Doesn't work with GALERA => each node will reserve increment (x for first server, x+1 for next node...)\r\n          const startId = data[this.getInsertIdField()];\r\n          result = new Array(data.affectedRows);\r\n          const pkField = this.model.rawAttributes[this.model.primaryKeyAttribute].field;\r\n          for (let i = 0; i < data.affectedRows; i++) {\r\n            result[i] = { [pkField]: startId + i };\r\n          }\r\n\r\n          return [result, data.affectedRows];\r\n        }\r\n\r\n        return [data[this.getInsertIdField()], data.affectedRows];\r\n      }\r\n    }\r\n\r\n    if (this.isSelectQuery()) {\r\n      this.handleJsonSelectQuery(data);\r\n\r\n      return this.handleSelectQuery(data);\r\n    }\r\n\r\n    if (this.isInsertQuery() || this.isUpdateQuery()) {\r\n      return [result, data.affectedRows];\r\n    }\r\n\r\n    if (this.isCallQuery()) {\r\n      return data[0];\r\n    }\r\n\r\n    if (this.isRawQuery()) {\r\n      const meta = data.meta;\r\n      delete data.meta;\r\n\r\n      return [data, meta];\r\n    }\r\n\r\n    if (this.isShowIndexesQuery()) {\r\n      return this.handleShowIndexesQuery(data);\r\n    }\r\n\r\n    if (this.isForeignKeysQuery() || this.isShowConstraintsQuery()) {\r\n      return data;\r\n    }\r\n\r\n    if (this.isShowTablesQuery()) {\r\n      return this.handleShowTablesQuery(data);\r\n    }\r\n\r\n    if (this.isDescribeQuery()) {\r\n      result = {};\r\n\r\n      for (const _result of data) {\r\n        result[_result.Field] = {\r\n          type: _result.Type.toLowerCase().startsWith('enum') ? _result.Type.replace(/^enum/i,\r\n            'ENUM') : _result.Type.toUpperCase(),\r\n          allowNull: _result.Null === 'YES',\r\n          defaultValue: _result.Default,\r\n          primaryKey: _result.Key === 'PRI',\r\n          autoIncrement: Object.prototype.hasOwnProperty.call(_result, 'Extra')\r\n            && _result.Extra.toLowerCase() === 'auto_increment',\r\n          comment: _result.Comment ? _result.Comment : null,\r\n        };\r\n      }\r\n\r\n      return result;\r\n    }\r\n\r\n    if (this.isVersionQuery()) {\r\n      return data[0].version;\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  handleJsonSelectQuery(rows) {\r\n    if (!this.model || !this.model.fieldRawAttributesMap) {\r\n      return;\r\n    }\r\n\r\n    for (const _field of Object.keys(this.model.fieldRawAttributesMap)) {\r\n      const modelField = this.model.fieldRawAttributesMap[_field];\r\n      if (modelField.type instanceof DataTypes.JSON) {\r\n        // Value is returned as String, not JSON\r\n        rows = rows.map(row => {\r\n          if (row[modelField.fieldName] && typeof row[modelField.fieldName] === 'string') {\r\n            row[modelField.fieldName] = JSON.parse(row[modelField.fieldName]);\r\n          }\r\n\r\n          if (DataTypes.JSON.parse) {\r\n            return DataTypes.JSON.parse(modelField, this.sequelize.options,\r\n              row[modelField.fieldName]);\r\n          }\r\n\r\n          return row;\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  async logWarnings(results) {\r\n    const warningResults = await this.run('SHOW WARNINGS');\r\n    const warningMessage = `MariaDB Warnings (${this.connection.uuid || 'default'}): `;\r\n    const messages = [];\r\n    for (const _warningRow of warningResults) {\r\n      if (_warningRow === undefined || typeof _warningRow[Symbol.iterator] !== 'function') {\r\n        continue;\r\n      }\r\n\r\n      for (const _warningResult of _warningRow) {\r\n        if (Object.prototype.hasOwnProperty.call(_warningResult, 'Message')) {\r\n          messages.push(_warningResult.Message);\r\n        } else {\r\n          for (const _objectKey of _warningResult.keys()) {\r\n            messages.push([_objectKey, _warningResult[_objectKey]].join(': '));\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    this.sequelize.log(warningMessage + messages.join('; '), this.options);\r\n\r\n    return results;\r\n  }\r\n\r\n  formatError(err, errStack) {\r\n    switch (err.errno) {\r\n      case ER_DUP_ENTRY: {\r\n        const match = err.message.match(\r\n          /Duplicate entry '([\\S\\s]*)' for key '?((.|\\s)*?)'?\\s.*$/,\r\n        );\r\n\r\n        let fields = {};\r\n        let message = 'Validation error';\r\n        const values = match ? match[1].split('-') : undefined;\r\n        const fieldKey = match ? match[2] : undefined;\r\n        const fieldVal = match ? match[1] : undefined;\r\n        const uniqueKey = this.model && this.model.uniqueKeys[fieldKey];\r\n\r\n        if (uniqueKey) {\r\n          if (uniqueKey.msg) {\r\n            message = uniqueKey.msg;\r\n          }\r\n\r\n          fields = _.zipObject(uniqueKey.fields, values);\r\n        } else {\r\n          fields[fieldKey] = fieldVal;\r\n        }\r\n\r\n        const errors = [];\r\n        _.forOwn(fields, (value, field) => {\r\n          errors.push(new sequelizeErrors.ValidationErrorItem(\r\n            this.getUniqueConstraintErrorMessage(field),\r\n            'unique violation', // sequelizeErrors.ValidationErrorItem.Origins.DB,\r\n            field,\r\n            value,\r\n            this.instance,\r\n            'not_unique',\r\n          ));\r\n        });\r\n\r\n        return new sequelizeErrors.UniqueConstraintError({ message, errors, cause: err, fields, stack: errStack });\r\n      }\r\n\r\n      case ER_ROW_IS_REFERENCED:\r\n      case ER_NO_REFERENCED_ROW: {\r\n        // e.g. CONSTRAINT `example_constraint_name` FOREIGN KEY (`example_id`) REFERENCES `examples` (`id`)\r\n        const match = err.message.match(\r\n          /CONSTRAINT ([\"`])(.*)\\1 FOREIGN KEY \\(\\1(.*)\\1\\) REFERENCES \\1(.*)\\1 \\(\\1(.*)\\1\\)/,\r\n        );\r\n        const quoteChar = match ? match[1] : '`';\r\n        const fields = match ? match[3].split(new RegExp(`${quoteChar}, *${quoteChar}`)) : undefined;\r\n\r\n        return new sequelizeErrors.ForeignKeyConstraintError({\r\n          reltype: err.errno === ER_ROW_IS_REFERENCED ? 'parent' : 'child',\r\n          table: match ? match[4] : undefined,\r\n          fields,\r\n          value: fields && fields.length && this.instance && this.instance[fields[0]] || undefined,\r\n          index: match ? match[2] : undefined,\r\n          cause: err,\r\n          stack: errStack,\r\n        });\r\n      }\r\n\r\n      default:\r\n        return new sequelizeErrors.DatabaseError(err, { stack: errStack });\r\n    }\r\n  }\r\n\r\n  handleShowTablesQuery(results) {\r\n    return results.map(resultSet => ({\r\n      tableName: resultSet.TABLE_NAME,\r\n      schema: resultSet.TABLE_SCHEMA,\r\n    }));\r\n  }\r\n\r\n  handleShowIndexesQuery(data) {\r\n\r\n    let currItem;\r\n    const result = [];\r\n\r\n    for (const item of data) {\r\n      if (!currItem || currItem.name !== item.Key_name) {\r\n        currItem = {\r\n          primary: item.Key_name === 'PRIMARY',\r\n          fields: [],\r\n          name: item.Key_name,\r\n          tableName: item.Table,\r\n          unique: item.Non_unique !== 1,\r\n          type: item.Index_type,\r\n        };\r\n        result.push(currItem);\r\n      }\r\n\r\n      currItem.fields[item.Seq_in_index - 1] = {\r\n        attribute: item.Column_name,\r\n        length: item.Sub_part || undefined,\r\n        order: item.Collation === 'A' ? 'ASC' : undefined,\r\n      };\r\n    }\r\n\r\n    return result;\r\n  }\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
