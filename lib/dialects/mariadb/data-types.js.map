{
  "version": 3,
  "sources": ["../../../src/dialects/mariadb/data-types.js"],
  "sourcesContent": ["'use strict';\r\n\r\nconst wkx = require('wkx');\r\nconst _ = require('lodash');\r\nconst dayjs = require('dayjs');\r\nconst { isValidTimeZone } = require('../../utils/dayjs');\r\n\r\nmodule.exports = BaseTypes => {\r\n  BaseTypes.ABSTRACT.prototype.dialectTypes = 'https://mariadb.com/kb/en/library/resultset/#field-types';\r\n\r\n  /**\r\n   * types: [buffer_type, ...]\r\n   *\r\n   * @see documentation : https://mariadb.com/kb/en/library/resultset/#field-types\r\n   * @see connector implementation : https://github.com/MariaDB/mariadb-connector-nodejs/blob/master/lib/const/field-type.js\r\n   */\r\n\r\n  BaseTypes.DATE.types.mariadb = ['DATETIME'];\r\n  BaseTypes.STRING.types.mariadb = ['VAR_STRING'];\r\n  BaseTypes.CHAR.types.mariadb = ['STRING'];\r\n  BaseTypes.TEXT.types.mariadb = ['BLOB'];\r\n  BaseTypes.TINYINT.types.mariadb = ['TINY'];\r\n  BaseTypes.SMALLINT.types.mariadb = ['SHORT'];\r\n  BaseTypes.MEDIUMINT.types.mariadb = ['INT24'];\r\n  BaseTypes.INTEGER.types.mariadb = ['LONG'];\r\n  BaseTypes.BIGINT.types.mariadb = ['LONGLONG'];\r\n  BaseTypes.FLOAT.types.mariadb = ['FLOAT'];\r\n  BaseTypes.TIME.types.mariadb = ['TIME'];\r\n  BaseTypes.DATEONLY.types.mariadb = ['DATE'];\r\n  BaseTypes.BOOLEAN.types.mariadb = ['TINY'];\r\n  BaseTypes.BLOB.types.mariadb = ['TINYBLOB', 'BLOB', 'LONGBLOB'];\r\n  BaseTypes.DECIMAL.types.mariadb = ['NEWDECIMAL'];\r\n  BaseTypes.UUID.types.mariadb = false;\r\n  BaseTypes.ENUM.types.mariadb = false;\r\n  BaseTypes.REAL.types.mariadb = ['DOUBLE'];\r\n  BaseTypes.DOUBLE.types.mariadb = ['DOUBLE'];\r\n  BaseTypes.GEOMETRY.types.mariadb = ['GEOMETRY'];\r\n  BaseTypes.JSON.types.mariadb = ['JSON'];\r\n\r\n  class DECIMAL extends BaseTypes.DECIMAL {\r\n    toSql() {\r\n      let definition = super.toSql();\r\n      if (this._unsigned) {\r\n        definition += ' UNSIGNED';\r\n      }\r\n\r\n      if (this._zerofill) {\r\n        definition += ' ZEROFILL';\r\n      }\r\n\r\n      return definition;\r\n    }\r\n  }\r\n\r\n  class DATE extends BaseTypes.DATE {\r\n    toSql() {\r\n      return this._length ? `DATETIME(${this._length})` : 'DATETIME';\r\n    }\r\n\r\n    _stringify(date, options) {\r\n      return this._applyTimezone(date, options).format('YYYY-MM-DD HH:mm:ss.SSS');\r\n    }\r\n\r\n    static parse(value, options) {\r\n      value = value.string();\r\n      if (value === null) {\r\n        return value;\r\n      }\r\n\r\n      if (isValidTimeZone(options.timezone)) {\r\n        value = dayjs.tz(value, options.timezone).toDate();\r\n      } else {\r\n        value = new Date(`${value} ${options.timezone}`);\r\n      }\r\n\r\n      return value;\r\n    }\r\n  }\r\n\r\n  class DATEONLY extends BaseTypes.DATEONLY {\r\n    static parse(value) {\r\n      return value.string();\r\n    }\r\n  }\r\n\r\n  class UUID extends BaseTypes.UUID {\r\n    toSql() {\r\n      return 'CHAR(36) BINARY';\r\n    }\r\n  }\r\n\r\n  class GEOMETRY extends BaseTypes.GEOMETRY {\r\n    constructor(type, srid) {\r\n      super(type, srid);\r\n      if (_.isEmpty(this.type)) {\r\n        this.sqlType = this.key;\r\n      } else {\r\n        this.sqlType = this.type;\r\n      }\r\n    }\r\n\r\n    static parse(value) {\r\n      value = value.buffer();\r\n      // Empty buffer, MySQL doesn't support POINT EMPTY\r\n      // check, https://dev.mysql.com/worklog/task/?id=2381\r\n      if (!value || value.length === 0) {\r\n        return null;\r\n      }\r\n\r\n      // For some reason, discard the first 4 bytes\r\n      value = value.slice(4);\r\n\r\n      return wkx.Geometry.parse(value).toGeoJSON({ shortCrs: true });\r\n    }\r\n\r\n    toSql() {\r\n      return this.sqlType;\r\n    }\r\n  }\r\n\r\n  class ENUM extends BaseTypes.ENUM {\r\n    toSql(options) {\r\n      return `ENUM(${this.values.map(value => options.escape(value)).join(', ')})`;\r\n    }\r\n  }\r\n\r\n  class JSONTYPE extends BaseTypes.JSON {\r\n    _stringify(value, options) {\r\n      return options.operation === 'where' && typeof value === 'string' ? value\r\n        : JSON.stringify(value);\r\n    }\r\n  }\r\n\r\n  return {\r\n    ENUM,\r\n    DATE,\r\n    DATEONLY,\r\n    UUID,\r\n    GEOMETRY,\r\n    DECIMAL,\r\n    JSON: JSONTYPE,\r\n  };\r\n};\r\n"],
  "mappings": "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",
  "names": []
}
