{
  "version": 3,
  "sources": ["../../../src/dialects/db2/query.js"],
  "sourcesContent": ["'use strict';\r\n\r\nimport assert from 'node:assert';\r\nimport util from 'node:util';\r\n\r\nconst { AbstractQuery } = require('../abstract/query');\r\nconst sequelizeErrors = require('../../errors');\r\nconst parserStore = require('../parserStore')('db2');\r\nconst _ = require('lodash');\r\nconst { logger } = require('../../utils/logger');\r\nconst dayjs = require('dayjs');\r\n\r\nconst debug = logger.debugContext('sql:db2');\r\n\r\nexport class Db2Query extends AbstractQuery {\r\n  getInsertIdField() {\r\n    return 'id';\r\n  }\r\n\r\n  getSQLTypeFromJsType(value) {\r\n    if (Buffer.isBuffer(value)) {\r\n      return { ParamType: 'INPUT', DataType: 'BLOB', Data: value };\r\n    }\r\n\r\n    if (typeof value === 'bigint') {\r\n      // The ibm_db module does not handle bigint, send as a string instead:\r\n      return value.toString();\r\n    }\r\n\r\n    return value;\r\n  }\r\n\r\n  async _run(connection, sql, parameters) {\r\n    assert(typeof sql === 'string', `sql parameter must be a string`);\r\n\r\n    this.sql = sql;\r\n    const benchmark = this.sequelize.options.benchmark || this.options.benchmark;\r\n    let queryBegin;\r\n    if (benchmark) {\r\n      queryBegin = Date.now();\r\n    } else {\r\n      this.sequelize.log(`Executing (${this.connection.uuid || 'default'}): ${this.sql}`, this.options);\r\n    }\r\n\r\n    const errStack = new Error().stack;\r\n\r\n    return new Promise((resolve, reject) => {\r\n      // TRANSACTION SUPPORT\r\n      if (_.startsWith(this.sql, 'BEGIN TRANSACTION')) {\r\n        connection.beginTransaction(err => {\r\n          if (err) {\r\n            reject(this.formatError(err, errStack));\r\n          } else {\r\n            resolve(this.formatResults());\r\n          }\r\n        });\r\n      } else if (_.startsWith(this.sql, 'COMMIT TRANSACTION')) {\r\n        connection.commitTransaction(err => {\r\n          if (err) {\r\n            reject(this.formatError(err, errStack));\r\n          } else {\r\n            resolve(this.formatResults());\r\n          }\r\n        });\r\n      } else if (_.startsWith(this.sql, 'ROLLBACK TRANSACTION')) {\r\n        connection.rollbackTransaction(err => {\r\n          if (err) {\r\n            reject(this.formatError(err, errStack));\r\n          } else {\r\n            resolve(this.formatResults());\r\n          }\r\n        });\r\n      } else if (_.startsWith(this.sql, 'SAVE TRANSACTION')) {\r\n        connection.commitTransaction(err => {\r\n          if (err) {\r\n            reject(this.formatError(err, errStack));\r\n          } else {\r\n            connection.beginTransaction(err => {\r\n              if (err) {\r\n                reject(this.formatError(err, errStack));\r\n              } else {\r\n                resolve(this.formatResults());\r\n              }\r\n            });\r\n          }\r\n        }, this.options.transaction.name);\r\n      } else {\r\n        const params = [];\r\n        if (parameters) {\r\n          _.forOwn(parameters, (value, key) => {\r\n            const param = this.getSQLTypeFromJsType(value, key);\r\n            params.push(param);\r\n          });\r\n        }\r\n\r\n        const SQL = this.sql.toUpperCase();\r\n        let newSql = this.sql;\r\n        if ((this.isSelectQuery() || _.startsWith(SQL, 'SELECT '))\r\n            && !SQL.includes(' FROM ', 8)) {\r\n          if (this.sql.charAt(this.sql.length - 1) === ';') {\r\n            newSql = this.sql.slice(0, -1);\r\n          }\r\n\r\n          newSql += ' FROM SYSIBM.SYSDUMMY1;';\r\n        }\r\n\r\n        connection.prepare(newSql, (err, stmt) => {\r\n          if (err) {\r\n            reject(this.formatError(err, errStack));\r\n          }\r\n\r\n          stmt.execute(params, (err, result, outparams) => {\r\n            debug(`executed(${this.connection.uuid || 'default'}):${newSql} ${parameters ? util.inspect(parameters, { compact: true, breakLength: Infinity }) : ''}`);\r\n\r\n            if (benchmark) {\r\n              this.sequelize.log(`Executed (${this.connection.uuid || 'default'}): ${newSql} ${parameters ? util.inspect(parameters, { compact: true, breakLength: Infinity }) : ''}`, Date.now() - queryBegin, this.options);\r\n            }\r\n\r\n            if (err && err.message) {\r\n              err = this.filterSQLError(err, this.sql, connection);\r\n              if (err === null) {\r\n                stmt.closeSync();\r\n                resolve(this.formatResults([], 0));\r\n              }\r\n            }\r\n\r\n            if (err) {\r\n              err.sql = sql;\r\n              stmt.closeSync();\r\n              reject(this.formatError(err, errStack, connection, parameters));\r\n            } else {\r\n              let data = [];\r\n              let metadata = [];\r\n              let affectedRows = 0;\r\n              if (typeof result === 'object') {\r\n                if (_.startsWith(this.sql, 'DELETE FROM ')) {\r\n                  affectedRows = result.getAffectedRowsSync();\r\n                } else {\r\n                  data = result.fetchAllSync();\r\n                  metadata = result.getColumnMetadataSync();\r\n                }\r\n\r\n                result.closeSync();\r\n              }\r\n\r\n              stmt.closeSync();\r\n              const datalen = data.length;\r\n              if (datalen > 0) {\r\n                const coltypes = {};\r\n                for (const metadatum of metadata) {\r\n                  coltypes[metadatum.SQL_DESC_NAME]\r\n                      = metadatum.SQL_DESC_TYPE_NAME;\r\n                }\r\n\r\n                for (let i = 0; i < datalen; i++) {\r\n                  for (const column in data[i]) {\r\n                    const parse = parserStore.get(coltypes[column]);\r\n                    const value = data[i][column];\r\n                    if (value !== null) {\r\n                      if (parse) {\r\n                        data[i][column] = parse(value);\r\n                      } else if (coltypes[column] === 'TIMESTAMP') {\r\n                        data[i][column] = new Date(dayjs.utc(value));\r\n                      } else if (coltypes[column] === 'BLOB') {\r\n                        data[i][column] = new Buffer.from(value);\r\n                      } else if (coltypes[column].indexOf('FOR BIT DATA') > 0) {\r\n                        data[i][column] = new Buffer.from(value, 'hex');\r\n                      }\r\n                    }\r\n                  }\r\n                }\r\n\r\n                if (outparams && outparams.length > 0) {\r\n                  data.unshift(outparams);\r\n                }\r\n\r\n                resolve(this.formatResults(data, datalen, metadata, connection));\r\n              } else {\r\n                resolve(this.formatResults(data, affectedRows));\r\n              }\r\n            }\r\n          });\r\n        });\r\n      }\r\n    });\r\n  }\r\n\r\n  async run(sql, parameters) {\r\n    return await this._run(this.connection, sql, parameters);\r\n  }\r\n\r\n  filterSQLError(err, sql, connection) {\r\n    if (err.message.search('SQL0204N') !== -1 && _.startsWith(sql, 'DROP ')) {\r\n      err = null; // Ignore table not found error for drop table.\r\n    } else if (err.message.search('SQL0443N') !== -1) {\r\n      if (this.isDropSchemaQuery()) {\r\n        // Delete ERRORSCHEMA.ERRORTABLE if it exist.\r\n        connection.querySync('DROP TABLE ERRORSCHEMA.ERRORTABLE;');\r\n        // Retry deleting the schema\r\n        connection.querySync(this.sql);\r\n      }\r\n\r\n      err = null; // Ignore drop schema error.\r\n    } else if (err.message.search('SQL0601N') !== -1) {\r\n      const match = err.message.match(/SQL0601N {2}The name of the object to be created is identical to the existing name \"(.*)\" of type \"(.*)\"./);\r\n      if (match && match.length > 1 && match[2] === 'TABLE') {\r\n        let table;\r\n        const mtarray = match[1].split('.');\r\n        if (mtarray[1]) {\r\n          table = `\"${mtarray[0]}\".\"${mtarray[1]}\"`;\r\n        } else {\r\n          table = `\"${mtarray[0]}\"`;\r\n        }\r\n\r\n        if (connection.dropTable !== false) {\r\n          connection.querySync(`DROP TABLE ${table}`);\r\n          err = connection.querySync(sql);\r\n        } else {\r\n          err = null;\r\n        }\r\n      } else {\r\n        err = null; // Ignore create schema error.\r\n      }\r\n    } else if (err.message.search('SQL0911N') !== -1) {\r\n      if (err.message.search('Reason code \"2\"') !== -1) {\r\n        err = null; // Ignore deadlock error due to program logic.\r\n      }\r\n    } else if (err.message.search('SQL0605W') !== -1) {\r\n      err = null; // Ignore warning.\r\n    } else if (err.message.search('SQL0668N') !== -1\r\n      && _.startsWith(sql, 'ALTER TABLE ')) {\r\n      connection.querySync(`CALL SYSPROC.ADMIN_CMD('REORG TABLE ${sql.slice(12).split(' ')[0]}')`);\r\n      err = connection.querySync(sql);\r\n    }\r\n\r\n    if (err && err.length === 0) {\r\n      err = null;\r\n    }\r\n\r\n    return err;\r\n  }\r\n\r\n  /**\r\n   * High level function that handles the results of a query execution.\r\n   *\r\n   *\r\n   * Example:\r\n   *  query.formatResults([\r\n   *    {\r\n   *      id: 1,              // this is from the main table\r\n   *      attr2: 'snafu',     // this is from the main table\r\n   *      Tasks.id: 1,        // this is from the associated table\r\n   *      Tasks.title: 'task' // this is from the associated table\r\n   *    }\r\n   *  ])\r\n   *\r\n   * @param {Array} data - The result of the query execution.\r\n   * @param {Integer} rowCount - The number of affected rows.\r\n   * @param {Array} metadata - Metadata of the returned result set.\r\n   * @param {object} conn - The connection object.\r\n   * @private\r\n   */\r\n  formatResults(data, rowCount, metadata, conn) {\r\n    let result = this.instance;\r\n    if (this.isInsertQuery(data, metadata)) {\r\n      this.handleInsertQuery(data, metadata);\r\n\r\n      if (!this.instance) {\r\n        if (this.options.plain) {\r\n          const record = data[0];\r\n          result = record[Object.keys(record)[0]];\r\n        } else {\r\n          result = data;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (this.isShowTablesQuery()) {\r\n      result = data;\r\n    } else if (this.isDescribeQuery()) {\r\n      result = {};\r\n      for (const _result of data) {\r\n        if (_result.Default) {\r\n          _result.Default = _result.Default.replace('(\\'', '').replace('\\')', '').replace(/'/g, '');\r\n        }\r\n\r\n        result[_result.Name] = {\r\n          type: _result.Type.toUpperCase(),\r\n          allowNull: _result.IsNull === 'Y',\r\n          defaultValue: _result.Default,\r\n          primaryKey: _result.KeySeq > 0,\r\n          autoIncrement: _result.IsIdentity === 'Y',\r\n          comment: _result.Comment,\r\n        };\r\n      }\r\n    } else if (this.isShowIndexesQuery()) {\r\n      result = this.handleShowIndexesQuery(data);\r\n    } else if (this.isSelectQuery()) {\r\n      result = this.handleSelectQuery(data);\r\n    } else if (this.isUpsertQuery()) {\r\n      result = data;\r\n    } else if (this.isDropSchemaQuery()) {\r\n      result = data[0];\r\n      if (conn) {\r\n        const query = 'DROP TABLE ERRORSCHEMA.ERRORTABLE';\r\n        conn.querySync(query);\r\n      }\r\n    } else if (this.isCallQuery()) {\r\n      result = data;\r\n    } else if (this.isBulkUpdateQuery()) {\r\n      result = data.length;\r\n    } else if (this.isBulkDeleteQuery()) {\r\n      result = rowCount;\r\n    } else if (this.isVersionQuery()) {\r\n      result = data[0].VERSION;\r\n    } else if (this.isForeignKeysQuery()) {\r\n      result = data;\r\n    } else if (this.isInsertQuery() || this.isUpdateQuery()) {\r\n      result = [result, rowCount];\r\n    } else if (this.isShowConstraintsQuery()) {\r\n      result = this.handleShowConstraintsQuery(data);\r\n    } else if (this.isRawQuery()) {\r\n      // Db2 returns row data and metadata (affected rows etc) in a single object - let's standarize it, sorta\r\n      result = [data, metadata];\r\n    } else {\r\n      result = data;\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  handleShowTablesQuery(results) {\r\n    return results.map(resultSet => {\r\n      return {\r\n        tableName: resultSet.TABLE_NAME,\r\n        schema: resultSet.TABLE_SCHEMA,\r\n      };\r\n    });\r\n  }\r\n\r\n  handleShowConstraintsQuery(data) {\r\n    // Remove SQL Contraints from constraints list.\r\n    return _.remove(data, constraint => {\r\n      return !_.startsWith(constraint.constraintName, 'SQL');\r\n    });\r\n  }\r\n\r\n  formatError(err, errStack, conn, parameters) {\r\n    let match;\r\n\r\n    if (!(err && err.message)) {\r\n      err.message = 'No error message found.';\r\n    }\r\n\r\n    match = err.message.match(/SQL0803N {2}One or more values in the INSERT statement, UPDATE statement, or foreign key update caused by a DELETE statement are not valid because the primary key, unique constraint or unique index identified by \"(\\d)+\" constrains table \"(.*)\\.(.*)\" from having duplicate values for the index key./);\r\n    if (match && match.length > 0) {\r\n      let uniqueIndexName = '';\r\n      let uniqueKey = '';\r\n      const fields = {};\r\n      let message = err.message;\r\n      const query = `SELECT INDNAME FROM SYSCAT.INDEXES  WHERE IID = ${match[1]} AND TABSCHEMA = '${match[2]}' AND TABNAME = '${match[3]}'`;\r\n\r\n      if (Boolean(conn) && match.length > 3) {\r\n        uniqueIndexName = conn.querySync(query);\r\n        uniqueIndexName = uniqueIndexName[0].INDNAME;\r\n      }\r\n\r\n      if (this.model && Boolean(uniqueIndexName)) {\r\n        uniqueKey = this.model.uniqueKeys[uniqueIndexName];\r\n      }\r\n\r\n      if (!uniqueKey && this.options.fields) {\r\n        uniqueKey = this.options.fields[match[1] - 1];\r\n      }\r\n\r\n      if (uniqueKey) {\r\n        if (this.options.where\r\n          && this.options.where[uniqueKey.column] !== undefined) {\r\n          fields[uniqueKey.column] = this.options.where[uniqueKey.column];\r\n        } else if (this.options.instance && this.options.instance.dataValues\r\n          && this.options.instance.dataValues[uniqueKey.column]) {\r\n          fields[uniqueKey.column] = this.options.instance.dataValues[uniqueKey.column];\r\n        } else if (parameters) {\r\n          fields[uniqueKey.column] = parameters['0'];\r\n        }\r\n      }\r\n\r\n      if (uniqueKey && Boolean(uniqueKey.msg)) {\r\n        message = uniqueKey.msg;\r\n      }\r\n\r\n      const errors = [];\r\n      _.forOwn(fields, (value, field) => {\r\n        errors.push(new sequelizeErrors.ValidationErrorItem(\r\n          this.getUniqueConstraintErrorMessage(field),\r\n          'unique violation', // sequelizeErrors.ValidationErrorItem.Origins.DB,\r\n          field,\r\n          value,\r\n          this.instance,\r\n          'not_unique',\r\n        ));\r\n      });\r\n\r\n      return new sequelizeErrors.UniqueConstraintError({ message, errors, cause: err, fields, stack: errStack });\r\n    }\r\n\r\n    match = err.message.match(/SQL0532N {2}A parent row cannot be deleted because the relationship \"(.*)\" restricts the deletion/)\r\n      || err.message.match(/SQL0530N/)\r\n      || err.message.match(/SQL0531N/);\r\n    if (match && match.length > 0) {\r\n      return new sequelizeErrors.ForeignKeyConstraintError({\r\n        fields: null,\r\n        index: match[1],\r\n        cause: err,\r\n        stack: errStack,\r\n      });\r\n    }\r\n\r\n    match = err.message.match(/SQL0204N {2}\"(.*)\" is an undefined name./);\r\n    if (match && match.length > 1) {\r\n      const constraint = match[1];\r\n      let table = err.sql.match(/table \"(.+?)\"/i);\r\n      table = table ? table[1] : undefined;\r\n\r\n      return new sequelizeErrors.UnknownConstraintError({\r\n        message: match[0],\r\n        constraint,\r\n        table,\r\n        cause: err,\r\n        stack: errStack,\r\n      });\r\n    }\r\n\r\n    return new sequelizeErrors.DatabaseError(err, { stack: errStack });\r\n  }\r\n\r\n  isDropSchemaQuery() {\r\n    let result = false;\r\n\r\n    if (_.startsWith(this.sql, 'CALL SYSPROC.ADMIN_DROP_SCHEMA')) {\r\n      result = true;\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  isShowOrDescribeQuery() {\r\n    let result = false;\r\n\r\n    result = result || this.sql.toLowerCase().startsWith('select c.column_name as \\'name\\', c.data_type as \\'type\\', c.is_nullable as \\'isnull\\'');\r\n    result = result || this.sql.toLowerCase().startsWith('select tablename = t.name, name = ind.name,');\r\n    result = result || this.sql.toLowerCase().startsWith('exec sys.sp_helpindex @objname');\r\n\r\n    return result;\r\n  }\r\n\r\n  isShowIndexesQuery() {\r\n    let result = false;\r\n\r\n    result = result || this.sql.toLowerCase().startsWith('exec sys.sp_helpindex @objname');\r\n    result = result || this.sql.startsWith('SELECT NAME AS \"name\", TBNAME AS \"tableName\", UNIQUERULE AS \"keyType\", COLNAMES, INDEXTYPE AS \"type\" FROM SYSIBM.SYSINDEXES');\r\n\r\n    return result;\r\n  }\r\n\r\n  handleShowIndexesQuery(data) {\r\n    let currItem;\r\n    const result = [];\r\n    for (const item of data) {\r\n      if (!currItem || currItem.name !== item.Key_name) {\r\n        currItem = {\r\n          primary: item.keyType === 'P',\r\n          fields: [],\r\n          name: item.name,\r\n          tableName: item.tableName,\r\n          unique: item.keyType === 'U',\r\n          type: item.type,\r\n        };\r\n\r\n        _.forEach(item.COLNAMES.replace(/\\+|-/g, x => {\r\n          return ` ${x}`;\r\n        }).split(' '), column => {\r\n          let columnName = column.trim();\r\n          if (columnName) {\r\n            columnName = columnName.replace(/\\+|-/, '');\r\n            currItem.fields.push({\r\n              attribute: columnName,\r\n              length: undefined,\r\n              order: !column.includes('-') ? 'ASC' : 'DESC',\r\n              collate: undefined,\r\n            });\r\n          }\r\n        });\r\n        result.push(currItem);\r\n      }\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  handleInsertQuery(results, metaData) {\r\n    if (this.instance) {\r\n      // add the inserted row id to the instance\r\n      const autoIncrementAttribute = this.model.autoIncrementAttribute;\r\n      let id = null;\r\n      let autoIncrementAttributeAlias = null;\r\n\r\n      if (Object.prototype.hasOwnProperty.call(this.model.rawAttributes, autoIncrementAttribute)\r\n          && this.model.rawAttributes[autoIncrementAttribute].field !== undefined) {\r\n        autoIncrementAttributeAlias = this.model.rawAttributes[autoIncrementAttribute].field;\r\n      }\r\n\r\n      id = id || results && results[0][this.getInsertIdField()];\r\n      id = id || metaData && metaData[this.getInsertIdField()];\r\n      id = id || results && results[0][autoIncrementAttribute];\r\n      id = id || autoIncrementAttributeAlias && results && results[0][autoIncrementAttributeAlias];\r\n      this.instance[autoIncrementAttribute] = id;\r\n    }\r\n  }\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
