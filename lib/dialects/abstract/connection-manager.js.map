{
  "version": 3,
  "sources": ["../../../src/dialects/abstract/connection-manager.js"],
  "sourcesContent": ["'use strict';\r\n\r\nconst { Pool, TimeoutError } = require('sequelize-pool');\r\nconst _ = require('lodash');\r\nconst semver = require('semver');\r\nconst errors = require('../../errors');\r\nconst { logger } = require('../../utils/logger');\r\nconst deprecations = require('../../utils/deprecations');\r\n\r\nconst debug = logger.debugContext('pool');\r\n\r\n/**\r\n * Abstract Connection Manager\r\n *\r\n * Connection manager which handles pooling & replication.\r\n * Uses sequelize-pool for pooling\r\n *\r\n * @private\r\n */\r\nexport class ConnectionManager {\r\n  constructor(dialect, sequelize) {\r\n    const config = _.cloneDeep(sequelize.config);\r\n\r\n    this.sequelize = sequelize;\r\n    this.config = config;\r\n    this.dialect = dialect;\r\n    this.versionPromise = null;\r\n    this.dialectName = this.sequelize.options.dialect;\r\n\r\n    if (config.pool === false) {\r\n      throw new Error('Support for pool:false was removed in v4.0');\r\n    }\r\n\r\n    config.pool = _.defaults(config.pool || {}, {\r\n      max: 5,\r\n      min: 0,\r\n      idle: 10_000,\r\n      acquire: 60_000,\r\n      evict: 1000,\r\n      validate: this._validate.bind(this),\r\n    });\r\n\r\n    this.initPools();\r\n  }\r\n\r\n  refreshTypeParser(dataTypes) {\r\n    _.each(dataTypes, dataType => {\r\n      if (Object.prototype.hasOwnProperty.call(dataType, 'parse')) {\r\n        if (dataType.types[this.dialectName]) {\r\n          this._refreshTypeParser(dataType);\r\n        } else {\r\n          throw new Error(`Parse function not supported for type ${dataType.key} in dialect ${this.dialectName}`);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Try to load dialect module from various configured options.\r\n   * Priority goes like dialectModulePath > dialectModule > require(default)\r\n   *\r\n   * @param {string} moduleName Name of dialect module to lookup\r\n   *\r\n   * @private\r\n   * @returns {object}\r\n   */\r\n  _loadDialectModule(moduleName) {\r\n    try {\r\n      if (this.sequelize.config.dialectModulePath) {\r\n        return require(this.sequelize.config.dialectModulePath);\r\n      }\r\n\r\n      if (this.sequelize.config.dialectModule) {\r\n        return this.sequelize.config.dialectModule;\r\n      }\r\n\r\n      return require(moduleName);\r\n\r\n    } catch (error) {\r\n      if (error.code === 'MODULE_NOT_FOUND') {\r\n        if (this.sequelize.config.dialectModulePath) {\r\n          throw new Error(`Unable to find dialect at ${this.sequelize.config.dialectModulePath}`);\r\n        }\r\n\r\n        throw new Error(`Please install ${moduleName} package manually`);\r\n      }\r\n\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handler which executes on process exit or connection manager shutdown\r\n   *\r\n   * @private\r\n   * @returns {Promise}\r\n   */\r\n  async _onProcessExit() {\r\n    if (!this.pool) {\r\n      return;\r\n    }\r\n\r\n    await this.pool.drain();\r\n    debug('connection drain due to process exit');\r\n\r\n    return await this.pool.destroyAllNow();\r\n  }\r\n\r\n  /**\r\n   * Drain the pool and close it permanently\r\n   *\r\n   * @returns {Promise}\r\n   */\r\n  async close() {\r\n    // Mark close of pool\r\n    this.getConnection = async function getConnection() {\r\n      throw new Error('ConnectionManager.getConnection was called after the connection manager was closed!');\r\n    };\r\n\r\n    return await this._onProcessExit();\r\n  }\r\n\r\n  /**\r\n   * Initialize connection pool. By default pool autostart is set to false, so no connection will be\r\n   * be created unless `pool.acquire` is called.\r\n   */\r\n  initPools() {\r\n    const config = this.config;\r\n\r\n    if (!config.replication) {\r\n      this.pool = new Pool({\r\n        name: 'sequelize',\r\n        create: () => this._connect(config),\r\n        destroy: async connection => {\r\n          const result = await this._disconnect(connection);\r\n          debug('connection destroy');\r\n\r\n          return result;\r\n        },\r\n        validate: config.pool.validate,\r\n        max: config.pool.max,\r\n        min: config.pool.min,\r\n        acquireTimeoutMillis: config.pool.acquire,\r\n        idleTimeoutMillis: config.pool.idle,\r\n        reapIntervalMillis: config.pool.evict,\r\n        maxUses: config.pool.maxUses,\r\n      });\r\n\r\n      debug(`pool created with max/min: ${config.pool.max}/${config.pool.min}, no replication`);\r\n\r\n      return;\r\n    }\r\n\r\n    if (!Array.isArray(config.replication.read)) {\r\n      config.replication.read = [config.replication.read];\r\n    }\r\n\r\n    // Map main connection config\r\n    config.replication.write = _.defaults(config.replication.write, _.omit(config, 'replication'));\r\n\r\n    // Apply defaults to each read config\r\n    config.replication.read = config.replication.read.map(readConfig => _.defaults(readConfig, _.omit(this.config, 'replication')));\r\n\r\n    // custom pooling for replication (original author @janmeier)\r\n    let reads = 0;\r\n    this.pool = {\r\n      release: client => {\r\n        if (client.queryType === 'read') {\r\n          this.pool.read.release(client);\r\n        } else {\r\n          this.pool.write.release(client);\r\n        }\r\n      },\r\n      acquire: (queryType = 'write', useMaster = false) => {\r\n        if (queryType !== 'read' && queryType !== 'write') {\r\n          throw new Error(`Expected queryType to be either read or write. Received ${queryType}`);\r\n        }\r\n\r\n        if (queryType === 'read' && !useMaster) {\r\n          return this.pool.read.acquire();\r\n        }\r\n\r\n        return this.pool.write.acquire();\r\n      },\r\n      destroy: connection => {\r\n        this.pool[connection.queryType].destroy(connection);\r\n        debug('connection destroy');\r\n      },\r\n      destroyAllNow: async () => {\r\n        await Promise.all([\r\n          this.pool.read.destroyAllNow(),\r\n          this.pool.write.destroyAllNow(),\r\n        ]);\r\n\r\n        debug('all connections destroyed');\r\n      },\r\n      drain: async () => Promise.all([\r\n        this.pool.write.drain(),\r\n        this.pool.read.drain(),\r\n      ]),\r\n      read: new Pool({\r\n        name: 'sequelize:read',\r\n        create: async () => {\r\n          // round robin config\r\n          const nextRead = reads++ % config.replication.read.length;\r\n          const connection = await this._connect(config.replication.read[nextRead]);\r\n          connection.queryType = 'read';\r\n\r\n          return connection;\r\n        },\r\n        destroy: connection => this._disconnect(connection),\r\n        validate: config.pool.validate,\r\n        max: config.pool.max,\r\n        min: config.pool.min,\r\n        acquireTimeoutMillis: config.pool.acquire,\r\n        idleTimeoutMillis: config.pool.idle,\r\n        reapIntervalMillis: config.pool.evict,\r\n        maxUses: config.pool.maxUses,\r\n      }),\r\n      write: new Pool({\r\n        name: 'sequelize:write',\r\n        create: async () => {\r\n          const connection = await this._connect(config.replication.write);\r\n          connection.queryType = 'write';\r\n\r\n          return connection;\r\n        },\r\n        destroy: connection => this._disconnect(connection),\r\n        validate: config.pool.validate,\r\n        max: config.pool.max,\r\n        min: config.pool.min,\r\n        acquireTimeoutMillis: config.pool.acquire,\r\n        idleTimeoutMillis: config.pool.idle,\r\n        reapIntervalMillis: config.pool.evict,\r\n        maxUses: config.pool.maxUses,\r\n      }),\r\n    };\r\n\r\n    debug(`pool created with max/min: ${config.pool.max}/${config.pool.min}, with replication`);\r\n  }\r\n\r\n  /**\r\n   * Get connection from pool. It sets database version if it's not already set.\r\n   * Call pool.acquire to get a connection\r\n   *\r\n   * @param {object}   [options]                 Pool options\r\n   * @param {string}   [options.type]            Set which replica to use. Available options are `read` and `write`\r\n   * @param {boolean}  [options.useMaster=false] Force master or write replica to get connection from\r\n   *\r\n   * @returns {Promise<Connection>}\r\n   */\r\n  async getConnection(options) {\r\n    options = options || {};\r\n\r\n    if (this.sequelize.options.databaseVersion === 0) {\r\n      if (!this.versionPromise) {\r\n        this.versionPromise = (async () => {\r\n          try {\r\n            const connection = await this._connect(this.config.replication.write || this.config);\r\n            const _options = {};\r\n\r\n            _options.transaction = { connection }; // Cheat .query to use our private connection\r\n            _options.logging = () => {};\r\n\r\n            _options.logging.__testLoggingFn = true;\r\n\r\n            // connection might have set databaseVersion value at initialization,\r\n            // avoiding a useless round trip\r\n            if (this.sequelize.options.databaseVersion === 0) {\r\n              const version = await this.sequelize.databaseVersion(_options);\r\n              const parsedVersion = _.get(semver.coerce(version), 'version') || version;\r\n              this.sequelize.options.databaseVersion = semver.valid(parsedVersion)\r\n                ? parsedVersion\r\n                : this.dialect.defaultVersion;\r\n            }\r\n\r\n            if (semver.lt(this.sequelize.options.databaseVersion, this.dialect.defaultVersion)) {\r\n              deprecations.unsupportedEngine();\r\n              debug(`Unsupported database engine version ${this.sequelize.options.databaseVersion}`);\r\n            }\r\n\r\n            this.versionPromise = null;\r\n\r\n            return await this._disconnect(connection);\r\n          } catch (error) {\r\n            this.versionPromise = null;\r\n            throw error;\r\n          }\r\n        })();\r\n      }\r\n\r\n      await this.versionPromise;\r\n    }\r\n\r\n    let result;\r\n\r\n    try {\r\n      result = await this.pool.acquire(options.type, options.useMaster);\r\n    } catch (error) {\r\n      if (error instanceof TimeoutError) {\r\n        throw new errors.ConnectionAcquireTimeoutError(error);\r\n      }\r\n\r\n      throw error;\r\n    }\r\n\r\n    debug('connection acquired');\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Release a pooled connection so it can be utilized by other connection requests\r\n   *\r\n   * @param {Connection} connection\r\n   *\r\n   * @returns {Promise}\r\n   */\r\n  async releaseConnection(connection) {\r\n    this.pool.release(connection);\r\n    debug('connection released');\r\n  }\r\n\r\n  /**\r\n   * Call dialect library to get connection\r\n   *\r\n   * @param {*} config Connection config\r\n   * @private\r\n   * @returns {Promise<Connection>}\r\n   */\r\n  async _connect(config) {\r\n    await this.sequelize.runHooks('beforeConnect', config);\r\n    const connection = await this.dialect.connectionManager.connect(config);\r\n    await this.sequelize.runHooks('afterConnect', connection, config);\r\n\r\n    return connection;\r\n  }\r\n\r\n  /**\r\n   * Call dialect library to disconnect a connection\r\n   *\r\n   * @param {Connection} connection\r\n   * @private\r\n   * @returns {Promise}\r\n   */\r\n  async _disconnect(connection) {\r\n    await this.sequelize.runHooks('beforeDisconnect', connection);\r\n    await this.dialect.connectionManager.disconnect(connection);\r\n\r\n    return this.sequelize.runHooks('afterDisconnect', connection);\r\n  }\r\n\r\n  /**\r\n   * Determine if a connection is still valid or not\r\n   *\r\n   * @param {Connection} connection\r\n   *\r\n   * @returns {boolean}\r\n   */\r\n  _validate(connection) {\r\n    if (!this.dialect.connectionManager.validate) {\r\n      return true;\r\n    }\r\n\r\n    return this.dialect.connectionManager.validate(connection);\r\n  }\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
