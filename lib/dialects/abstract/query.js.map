{
  "version": 3,
  "sources": ["../../../src/dialects/abstract/query.js"],
  "sourcesContent": ["'use strict';\r\n\r\nconst _ = require('lodash');\r\nconst SqlString = require('../../sql-string');\r\nconst { QueryTypes } = require('../../query-types');\r\nconst Dot = require('dottie');\r\nconst deprecations = require('../../utils/deprecations');\r\nconst uuid = require('uuid').v4;\r\nconst { safeStringifyJson } = require('../../utils');\r\n\r\nexport class AbstractQuery {\r\n\r\n  constructor(connection, sequelize, options) {\r\n    this.uuid = uuid();\r\n    this.connection = connection;\r\n    this.instance = options.instance;\r\n    this.model = options.model;\r\n    this.sequelize = sequelize;\r\n    this.options = {\r\n      plain: false,\r\n      raw: false,\r\n      logging: console.debug,\r\n      ...options,\r\n    };\r\n    this.checkLoggingOption();\r\n\r\n    if (options.rawErrors) {\r\n      // The default implementation in AbstractQuery just returns the same\r\n      // error object. By overidding this.formatError, this saves every dialect\r\n      // having to check for options.rawErrors in their own formatError\r\n      // implementations.\r\n      this.formatError = AbstractQuery.prototype.formatError;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Formats a raw database error from the database library into a common Sequelize exception.\r\n   *\r\n   * @param {Error} error The exception object.\r\n   * @param {object} errStack The stack trace that started the database query.\r\n   * @returns {BaseError} the new formatted error object.\r\n   */\r\n  formatError(error, errStack) {\r\n    // Default implementation, no formatting.\r\n    // Each dialect overrides this method to parse errors from their respective the database engines.\r\n    error.stack = errStack;\r\n\r\n    return error;\r\n  }\r\n\r\n  /**\r\n   * Execute the passed sql query.\r\n   *\r\n   * Examples:\r\n   *\r\n   *     query.run('SELECT 1')\r\n   *\r\n   * @private\r\n   */\r\n  run() {\r\n    throw new Error('The run method wasn\\'t overwritten!');\r\n  }\r\n\r\n  /**\r\n   * Check the logging option of the instance and print deprecation warnings.\r\n   *\r\n   * @private\r\n   */\r\n  checkLoggingOption() {\r\n    if (this.options.logging === true) {\r\n      deprecations.noTrueLogging();\r\n      this.options.logging = console.debug;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the attributes of an insert query, which contains the just inserted id.\r\n   *\r\n   * @returns {string} The field name.\r\n   * @private\r\n   */\r\n  getInsertIdField() {\r\n    return 'insertId';\r\n  }\r\n\r\n  getUniqueConstraintErrorMessage(field) {\r\n    let message = field ? `${field} must be unique` : 'Must be unique';\r\n\r\n    if (field && this.model) {\r\n      for (const key of Object.keys(this.model.uniqueKeys)) {\r\n        if (this.model.uniqueKeys[key].fields.includes(field.replace(/\"/g, '')) && this.model.uniqueKeys[key].msg) {\r\n          message = this.model.uniqueKeys[key].msg;\r\n        }\r\n      }\r\n    }\r\n\r\n    return message;\r\n  }\r\n\r\n  isRawQuery() {\r\n    return this.options.type === QueryTypes.RAW;\r\n  }\r\n\r\n  isVersionQuery() {\r\n    return this.options.type === QueryTypes.VERSION;\r\n  }\r\n\r\n  isUpsertQuery() {\r\n    return this.options.type === QueryTypes.UPSERT;\r\n  }\r\n\r\n  isInsertQuery(results, metaData) {\r\n    let result = true;\r\n\r\n    if (this.options.type === QueryTypes.INSERT) {\r\n      return true;\r\n    }\r\n\r\n    // is insert query if sql contains insert into\r\n    result = result && this.sql.toLowerCase().startsWith('insert into');\r\n\r\n    // is insert query if no results are passed or if the result has the inserted id\r\n    result = result && (!results || Object.prototype.hasOwnProperty.call(results, this.getInsertIdField()));\r\n\r\n    // is insert query if no metadata are passed or if the metadata has the inserted id\r\n    result = result && (!metaData || Object.prototype.hasOwnProperty.call(metaData, this.getInsertIdField()));\r\n\r\n    return result;\r\n  }\r\n\r\n  handleInsertQuery(results, metaData) {\r\n    if (this.instance) {\r\n      // add the inserted row id to the instance\r\n      const autoIncrementAttribute = this.model.autoIncrementAttribute;\r\n      let id = null;\r\n\r\n      id = id || results && results[this.getInsertIdField()];\r\n      id = id || metaData && metaData[this.getInsertIdField()];\r\n\r\n      this.instance[autoIncrementAttribute] = id;\r\n    }\r\n  }\r\n\r\n  isShowTablesQuery() {\r\n    return this.options.type === QueryTypes.SHOWTABLES;\r\n  }\r\n\r\n  handleShowTablesQuery(results) {\r\n    return results.flatMap(resultSet => Object.values(resultSet));\r\n  }\r\n\r\n  isShowIndexesQuery() {\r\n    return this.options.type === QueryTypes.SHOWINDEXES;\r\n  }\r\n\r\n  isShowConstraintsQuery() {\r\n    return this.options.type === QueryTypes.SHOWCONSTRAINTS;\r\n  }\r\n\r\n  isDescribeQuery() {\r\n    return this.options.type === QueryTypes.DESCRIBE;\r\n  }\r\n\r\n  isSelectQuery() {\r\n    return this.options.type === QueryTypes.SELECT;\r\n  }\r\n\r\n  isBulkUpdateQuery() {\r\n    return this.options.type === QueryTypes.BULKUPDATE;\r\n  }\r\n\r\n  isBulkDeleteQuery() {\r\n    return this.options.type === QueryTypes.BULKDELETE;\r\n  }\r\n\r\n  isForeignKeysQuery() {\r\n    return this.options.type === QueryTypes.FOREIGNKEYS;\r\n  }\r\n\r\n  isUpdateQuery() {\r\n    return this.options.type === QueryTypes.UPDATE;\r\n  }\r\n\r\n  handleSelectQuery(results) {\r\n    let result = null;\r\n\r\n    // Map raw fields to names if a mapping is provided\r\n    if (this.options.fieldMap) {\r\n      const fieldMap = this.options.fieldMap;\r\n      results = results.map(result => _.reduce(fieldMap, (result, name, field) => {\r\n        if (result[field] !== undefined && name !== field) {\r\n          result[name] = result[field];\r\n          delete result[field];\r\n        }\r\n\r\n        return result;\r\n      }, result));\r\n    }\r\n\r\n    // Raw queries\r\n    if (this.options.raw) {\r\n      result = results.map(result => {\r\n        let o = {};\r\n\r\n        for (const key in result) {\r\n          if (Object.prototype.hasOwnProperty.call(result, key)) {\r\n            o[key] = result[key];\r\n          }\r\n        }\r\n\r\n        if (this.options.nest) {\r\n          o = Dot.transform(o);\r\n        }\r\n\r\n        return o;\r\n      });\r\n    // Queries with include\r\n    } else if (this.options.hasJoin === true) {\r\n      results = AbstractQuery._groupJoinData(results, {\r\n        model: this.model,\r\n        includeMap: this.options.includeMap,\r\n        includeNames: this.options.includeNames,\r\n      }, {\r\n        checkExisting: this.options.hasMultiAssociation,\r\n      });\r\n\r\n      result = this.model.bulkBuild(results, {\r\n        isNewRecord: false,\r\n        include: this.options.include,\r\n        includeNames: this.options.includeNames,\r\n        includeMap: this.options.includeMap,\r\n        includeValidated: true,\r\n        attributes: this.options.originalAttributes || this.options.attributes,\r\n        raw: true,\r\n      });\r\n    // Regular queries\r\n    } else {\r\n      result = this.model.bulkBuild(results, {\r\n        isNewRecord: false,\r\n        raw: true,\r\n        attributes: this.options.originalAttributes || this.options.attributes,\r\n      });\r\n    }\r\n\r\n    // return the first real model instance if options.plain is set (e.g. Model.find)\r\n    if (this.options.plain) {\r\n      result = result.length === 0 ? null : result[0];\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  isShowOrDescribeQuery() {\r\n    let result = false;\r\n\r\n    result = result || this.sql.toLowerCase().startsWith('show');\r\n    result = result || this.sql.toLowerCase().startsWith('describe');\r\n\r\n    return result;\r\n  }\r\n\r\n  isCallQuery() {\r\n    return this.sql.toLowerCase().startsWith('call');\r\n  }\r\n\r\n  /**\r\n   * @param {string} sql\r\n   * @param {Function} debugContext\r\n   * @param {Array|object} parameters\r\n   * @protected\r\n   * @returns {Function} A function to call after the query was completed.\r\n   */\r\n  _logQuery(sql, debugContext, parameters) {\r\n    const { connection, options } = this;\r\n    const benchmark = this.sequelize.options.benchmark || options.benchmark;\r\n    const logQueryParameters = this.sequelize.options.logQueryParameters || options.logQueryParameters;\r\n    const startTime = Date.now();\r\n    let logParameter = '';\r\n\r\n    if (logQueryParameters && parameters) {\r\n      const delimiter = sql.endsWith(';') ? '' : ';';\r\n      let paramStr;\r\n      if (Array.isArray(parameters)) {\r\n        paramStr = parameters.map(p => safeStringifyJson(p)).join(', ');\r\n      } else {\r\n        paramStr = safeStringifyJson(parameters);\r\n      }\r\n\r\n      logParameter = `${delimiter} ${paramStr}`;\r\n    }\r\n\r\n    const fmt = `(${connection.uuid || 'default'}): ${sql}${logParameter}`;\r\n    const msg = `Executing ${fmt}`;\r\n    debugContext(msg);\r\n    if (!benchmark) {\r\n      this.sequelize.log(`Executing ${fmt}`, options);\r\n    }\r\n\r\n    return () => {\r\n      const afterMsg = `Executed ${fmt}`;\r\n      debugContext(afterMsg);\r\n      if (benchmark) {\r\n        this.sequelize.log(afterMsg, Date.now() - startTime, options);\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * The function takes the result of the query execution and groups\r\n   * the associated data by the callee.\r\n   *\r\n   * Example:\r\n   *   groupJoinData([\r\n   *     {\r\n   *       some: 'data',\r\n   *       id: 1,\r\n   *       association: { foo: 'bar', id: 1 }\r\n   *     }, {\r\n   *       some: 'data',\r\n   *       id: 1,\r\n   *       association: { foo: 'bar', id: 2 }\r\n   *     }, {\r\n   *       some: 'data',\r\n   *       id: 1,\r\n   *       association: { foo: 'bar', id: 3 }\r\n   *     }\r\n   *   ])\r\n   *\r\n   * Result:\r\n   *   Something like this:\r\n   *\r\n   *   [\r\n   *     {\r\n   *       some: 'data',\r\n   *       id: 1,\r\n   *       association: [\r\n   *         { foo: 'bar', id: 1 },\r\n   *         { foo: 'bar', id: 2 },\r\n   *         { foo: 'bar', id: 3 }\r\n   *       ]\r\n   *     }\r\n   *   ]\r\n   *\r\n   * @param {Array} rows\r\n   * @param {object} includeOptions\r\n   * @param {object} options\r\n   * @private\r\n   */\r\n  static _groupJoinData(rows, includeOptions, options) {\r\n\r\n    /*\r\n     * Assumptions\r\n     * ID is not necessarily the first field\r\n     * All fields for a level is grouped in the same set (i.e. Panel.id, Task.id, Panel.title is not possible)\r\n     * Parent keys will be seen before any include/child keys\r\n     * Previous set won't necessarily be parent set (one parent could have two children, one child would then be previous set for the other)\r\n     */\r\n\r\n    /*\r\n     * Author (MH) comment: This code is an unreadable mess, but it's performant.\r\n     * groupJoinData is a performance critical function so we prioritize perf over readability.\r\n     */\r\n    if (rows.length === 0) {\r\n      return [];\r\n    }\r\n\r\n    // Generic looping\r\n    let i;\r\n    let length;\r\n    let $i;\r\n    let $length;\r\n    // Row specific looping\r\n    let rowsI;\r\n    let row;\r\n    const rowsLength = rows.length;\r\n    // Key specific looping\r\n    let keys;\r\n    let key;\r\n    let keyI;\r\n    let keyLength;\r\n    let prevKey;\r\n    let values;\r\n    let topValues;\r\n    let topExists;\r\n    const checkExisting = options.checkExisting;\r\n    // If we don't have to deduplicate we can pre-allocate the resulting array\r\n    let itemHash;\r\n    let parentHash;\r\n    let topHash;\r\n    const results = checkExisting ? [] : new Array(rowsLength);\r\n    const resultMap = {};\r\n    const includeMap = {};\r\n    // Result variables for the respective functions\r\n    let $keyPrefix;\r\n    let $keyPrefixString;\r\n    let $prevKeyPrefixString;\r\n    let $prevKeyPrefix;\r\n    let $lastKeyPrefix;\r\n    let $current;\r\n    let $parent;\r\n    // Map each key to an include option\r\n    let previousPiece;\r\n    const buildIncludeMap = piece => {\r\n      if (Object.prototype.hasOwnProperty.call($current.includeMap, piece)) {\r\n        includeMap[key] = $current = $current.includeMap[piece];\r\n        if (previousPiece) {\r\n          previousPiece = `${previousPiece}.${piece}`;\r\n        } else {\r\n          previousPiece = piece;\r\n        }\r\n\r\n        includeMap[previousPiece] = $current;\r\n      }\r\n    };\r\n\r\n    // Calculate the string prefix of a key ('User.Results' for 'User.Results.id')\r\n    const keyPrefixStringMemo = {};\r\n    const keyPrefixString = (key, memo) => {\r\n      if (!Object.prototype.hasOwnProperty.call(memo, key)) {\r\n        memo[key] = key.slice(0, Math.max(0, key.lastIndexOf('.')));\r\n      }\r\n\r\n      return memo[key];\r\n    };\r\n\r\n    // Removes the prefix from a key ('id' for 'User.Results.id')\r\n    const removeKeyPrefixMemo = {};\r\n    const removeKeyPrefix = key => {\r\n      if (!Object.prototype.hasOwnProperty.call(removeKeyPrefixMemo, key)) {\r\n        const index = key.lastIndexOf('.');\r\n        removeKeyPrefixMemo[key] = key.slice(index === -1 ? 0 : index + 1);\r\n      }\r\n\r\n      return removeKeyPrefixMemo[key];\r\n    };\r\n\r\n    // Calculates the array prefix of a key (['User', 'Results'] for 'User.Results.id')\r\n    const keyPrefixMemo = {};\r\n    const keyPrefix = key => {\r\n      // We use a double memo and keyPrefixString so that different keys with the same prefix will receive the same array instead of differnet arrays with equal values\r\n      if (!Object.prototype.hasOwnProperty.call(keyPrefixMemo, key)) {\r\n        const prefixString = keyPrefixString(key, keyPrefixStringMemo);\r\n        if (!Object.prototype.hasOwnProperty.call(keyPrefixMemo, prefixString)) {\r\n          keyPrefixMemo[prefixString] = prefixString ? prefixString.split('.') : [];\r\n        }\r\n\r\n        keyPrefixMemo[key] = keyPrefixMemo[prefixString];\r\n      }\r\n\r\n      return keyPrefixMemo[key];\r\n    };\r\n\r\n    // Calcuate the last item in the array prefix ('Results' for 'User.Results.id')\r\n    const lastKeyPrefixMemo = {};\r\n    const lastKeyPrefix = key => {\r\n      if (!Object.prototype.hasOwnProperty.call(lastKeyPrefixMemo, key)) {\r\n        const prefix = keyPrefix(key);\r\n        const length = prefix.length;\r\n\r\n        lastKeyPrefixMemo[key] = !length ? '' : prefix[length - 1];\r\n      }\r\n\r\n      return lastKeyPrefixMemo[key];\r\n    };\r\n\r\n    const getUniqueKeyAttributes = model => {\r\n      let uniqueKeyAttributes = _.chain(model.uniqueKeys);\r\n      uniqueKeyAttributes = uniqueKeyAttributes\r\n        .result(`${uniqueKeyAttributes.findKey()}.fields`)\r\n        .map(field => _.findKey(model.attributes, chr => chr.field === field))\r\n        .value();\r\n\r\n      return uniqueKeyAttributes;\r\n    };\r\n\r\n    const stringify = obj => (obj instanceof Buffer ? obj.toString('hex') : obj);\r\n    let primaryKeyAttributes;\r\n    let uniqueKeyAttributes;\r\n    let prefix;\r\n\r\n    for (rowsI = 0; rowsI < rowsLength; rowsI++) {\r\n      row = rows[rowsI];\r\n\r\n      // Keys are the same for all rows, so only need to compute them on the first row\r\n      if (rowsI === 0) {\r\n        keys = Object.keys(row);\r\n        keyLength = keys.length;\r\n      }\r\n\r\n      if (checkExisting) {\r\n        topExists = false;\r\n\r\n        // Compute top level hash key (this is usually just the primary key values)\r\n        $length = includeOptions.model.primaryKeyAttributes.length;\r\n        topHash = '';\r\n        if ($length === 1) {\r\n          topHash = stringify(row[includeOptions.model.primaryKeyAttributes[0]]);\r\n        } else if ($length > 1) {\r\n          for ($i = 0; $i < $length; $i++) {\r\n            topHash += stringify(row[includeOptions.model.primaryKeyAttributes[$i]]);\r\n          }\r\n        } else if (!_.isEmpty(includeOptions.model.uniqueKeys)) {\r\n          uniqueKeyAttributes = getUniqueKeyAttributes(includeOptions.model);\r\n          for ($i = 0; $i < uniqueKeyAttributes.length; $i++) {\r\n            topHash += row[uniqueKeyAttributes[$i]];\r\n          }\r\n        }\r\n      }\r\n\r\n      topValues = values = {};\r\n      $prevKeyPrefix = undefined;\r\n      for (keyI = 0; keyI < keyLength; keyI++) {\r\n        key = keys[keyI];\r\n\r\n        // The string prefix isn't actualy needed\r\n        // We use it so keyPrefix for different keys will resolve to the same array if they have the same prefix\r\n        // TODO: Find a better way?\r\n        $keyPrefixString = keyPrefixString(key, keyPrefixStringMemo);\r\n        $keyPrefix = keyPrefix(key);\r\n\r\n        // On the first row we compute the includeMap\r\n        if (rowsI === 0 && !Object.prototype.hasOwnProperty.call(includeMap, key)) {\r\n          if ($keyPrefix.length === 0) {\r\n            includeMap[key] = includeMap[''] = includeOptions;\r\n          } else {\r\n            $current = includeOptions;\r\n            previousPiece = undefined;\r\n            $keyPrefix.forEach(buildIncludeMap);\r\n          }\r\n        }\r\n\r\n        // End of key set\r\n        if ($prevKeyPrefix !== undefined && $prevKeyPrefix !== $keyPrefix) {\r\n          if (checkExisting) {\r\n            // Compute hash key for this set instance\r\n            // TODO: Optimize\r\n            length = $prevKeyPrefix.length;\r\n            $parent = null;\r\n            parentHash = null;\r\n\r\n            if (length) {\r\n              for (i = 0; i < length; i++) {\r\n                prefix = $parent ? `${$parent}.${$prevKeyPrefix[i]}` : $prevKeyPrefix[i];\r\n                primaryKeyAttributes = includeMap[prefix].model.primaryKeyAttributes;\r\n                $length = primaryKeyAttributes.length;\r\n                itemHash = prefix;\r\n                if ($length === 1) {\r\n                  itemHash += stringify(row[`${prefix}.${primaryKeyAttributes[0]}`]);\r\n                } else if ($length > 1) {\r\n                  for ($i = 0; $i < $length; $i++) {\r\n                    itemHash += stringify(row[`${prefix}.${primaryKeyAttributes[$i]}`]);\r\n                  }\r\n                } else if (!_.isEmpty(includeMap[prefix].model.uniqueKeys)) {\r\n                  uniqueKeyAttributes = getUniqueKeyAttributes(includeMap[prefix].model);\r\n                  for ($i = 0; $i < uniqueKeyAttributes.length; $i++) {\r\n                    itemHash += row[`${prefix}.${uniqueKeyAttributes[$i]}`];\r\n                  }\r\n                }\r\n\r\n                if (!parentHash) {\r\n                  parentHash = topHash;\r\n                }\r\n\r\n                itemHash = parentHash + itemHash;\r\n                $parent = prefix;\r\n                if (i < length - 1) {\r\n                  parentHash = itemHash;\r\n                }\r\n              }\r\n            } else {\r\n              itemHash = topHash;\r\n            }\r\n\r\n            if (itemHash === topHash) {\r\n              if (!resultMap[itemHash]) {\r\n                resultMap[itemHash] = values;\r\n              } else {\r\n                topExists = true;\r\n              }\r\n            } else if (!resultMap[itemHash]) {\r\n              $parent = resultMap[parentHash];\r\n              $lastKeyPrefix = lastKeyPrefix(prevKey);\r\n\r\n              if (includeMap[prevKey].association.isSingleAssociation) {\r\n                if ($parent) {\r\n                  $parent[$lastKeyPrefix] = resultMap[itemHash] = values;\r\n                }\r\n              } else {\r\n                if (!$parent[$lastKeyPrefix]) {\r\n                  $parent[$lastKeyPrefix] = [];\r\n                }\r\n\r\n                $parent[$lastKeyPrefix].push(resultMap[itemHash] = values);\r\n              }\r\n            }\r\n\r\n            // Reset values\r\n            values = {};\r\n          } else {\r\n            // If checkExisting is false it's because there's only 1:1 associations in this query\r\n            // However we still need to map onto the appropriate parent\r\n            // For 1:1 we map forward, initializing the value object on the parent to be filled in the next iterations of the loop\r\n            $current = topValues;\r\n            length = $keyPrefix.length;\r\n            if (length) {\r\n              for (i = 0; i < length; i++) {\r\n                if (i === length - 1) {\r\n                  values = $current[$keyPrefix[i]] = {};\r\n                }\r\n\r\n                $current = $current[$keyPrefix[i]] || {};\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n        // End of iteration, set value and set prev values (for next iteration)\r\n        values[removeKeyPrefix(key)] = row[key];\r\n        prevKey = key;\r\n        $prevKeyPrefix = $keyPrefix;\r\n        $prevKeyPrefixString = $keyPrefixString;\r\n      }\r\n\r\n      if (checkExisting) {\r\n        length = $prevKeyPrefix.length;\r\n        $parent = null;\r\n        parentHash = null;\r\n\r\n        if (length) {\r\n          for (i = 0; i < length; i++) {\r\n            prefix = $parent ? `${$parent}.${$prevKeyPrefix[i]}` : $prevKeyPrefix[i];\r\n            primaryKeyAttributes = includeMap[prefix].model.primaryKeyAttributes;\r\n            $length = primaryKeyAttributes.length;\r\n            itemHash = prefix;\r\n            if ($length === 1) {\r\n              itemHash += stringify(row[`${prefix}.${primaryKeyAttributes[0]}`]);\r\n            } else if ($length > 0) {\r\n              for ($i = 0; $i < $length; $i++) {\r\n                itemHash += stringify(row[`${prefix}.${primaryKeyAttributes[$i]}`]);\r\n              }\r\n            } else if (!_.isEmpty(includeMap[prefix].model.uniqueKeys)) {\r\n              uniqueKeyAttributes = getUniqueKeyAttributes(includeMap[prefix].model);\r\n              for ($i = 0; $i < uniqueKeyAttributes.length; $i++) {\r\n                itemHash += row[`${prefix}.${uniqueKeyAttributes[$i]}`];\r\n              }\r\n            }\r\n\r\n            if (!parentHash) {\r\n              parentHash = topHash;\r\n            }\r\n\r\n            itemHash = parentHash + itemHash;\r\n            $parent = prefix;\r\n            if (i < length - 1) {\r\n              parentHash = itemHash;\r\n            }\r\n          }\r\n        } else {\r\n          itemHash = topHash;\r\n        }\r\n\r\n        if (itemHash === topHash) {\r\n          if (!resultMap[itemHash]) {\r\n            resultMap[itemHash] = values;\r\n          } else {\r\n            topExists = true;\r\n          }\r\n        } else if (!resultMap[itemHash]) {\r\n          $parent = resultMap[parentHash];\r\n          $lastKeyPrefix = lastKeyPrefix(prevKey);\r\n\r\n          if (includeMap[prevKey].association.isSingleAssociation) {\r\n            if ($parent) {\r\n              $parent[$lastKeyPrefix] = resultMap[itemHash] = values;\r\n            }\r\n          } else {\r\n            if (!$parent[$lastKeyPrefix]) {\r\n              $parent[$lastKeyPrefix] = [];\r\n            }\r\n\r\n            $parent[$lastKeyPrefix].push(resultMap[itemHash] = values);\r\n          }\r\n        }\r\n\r\n        if (!topExists) {\r\n          results.push(topValues);\r\n        }\r\n      } else {\r\n        results[rowsI] = topValues;\r\n      }\r\n    }\r\n\r\n    return results;\r\n  }\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
