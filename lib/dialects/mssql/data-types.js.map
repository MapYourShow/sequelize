{
  "version": 3,
  "sources": ["../../../src/dialects/mssql/data-types.js"],
  "sourcesContent": ["'use strict';\r\n\r\nconst dayjs = require('dayjs');\r\n\r\nmodule.exports = BaseTypes => {\r\n  const warn = BaseTypes.ABSTRACT.warn.bind(undefined, 'https://msdn.microsoft.com/en-us/library/ms187752%28v=sql.110%29.aspx');\r\n\r\n  /**\r\n   * Removes unsupported MSSQL options, i.e., LENGTH, UNSIGNED and ZEROFILL, for the integer data types.\r\n   *\r\n   * @param {object} dataType The base integer data type.\r\n   * @private\r\n   */\r\n  function removeUnsupportedIntegerOptions(dataType) {\r\n    if (dataType._length || dataType.options.length > 0 || dataType._unsigned || dataType._zerofill) {\r\n      warn(`MSSQL does not support '${dataType.key}' with options. Plain '${dataType.key}' will be used instead.`);\r\n      dataType._length = undefined;\r\n      dataType.options.length = undefined;\r\n      dataType._unsigned = undefined;\r\n      dataType._zerofill = undefined;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * types: [hex, ...]\r\n   *\r\n   * @see hex here https://github.com/tediousjs/tedious/blob/master/src/data-type.ts\r\n   */\r\n\r\n  BaseTypes.DATE.types.mssql = [43];\r\n  BaseTypes.STRING.types.mssql = [231, 173];\r\n  BaseTypes.CHAR.types.mssql = [175];\r\n  BaseTypes.TEXT.types.mssql = false;\r\n  // https://msdn.microsoft.com/en-us/library/ms187745(v=sql.110).aspx\r\n  BaseTypes.TINYINT.types.mssql = [30];\r\n  BaseTypes.SMALLINT.types.mssql = [34];\r\n  BaseTypes.MEDIUMINT.types.mssql = false;\r\n  BaseTypes.INTEGER.types.mssql = [38];\r\n  BaseTypes.BIGINT.types.mssql = false;\r\n  BaseTypes.FLOAT.types.mssql = [109];\r\n  BaseTypes.TIME.types.mssql = [41];\r\n  BaseTypes.DATEONLY.types.mssql = [40];\r\n  BaseTypes.BOOLEAN.types.mssql = [104];\r\n  BaseTypes.BLOB.types.mssql = [165];\r\n  BaseTypes.DECIMAL.types.mssql = [106];\r\n  BaseTypes.UUID.types.mssql = false;\r\n  BaseTypes.ENUM.types.mssql = false;\r\n  BaseTypes.REAL.types.mssql = [109];\r\n  BaseTypes.DOUBLE.types.mssql = [109];\r\n  // BaseTypes.GEOMETRY.types.mssql = [240]; // not yet supported\r\n  BaseTypes.GEOMETRY.types.mssql = false;\r\n\r\n  class BLOB extends BaseTypes.BLOB {\r\n    toSql() {\r\n      if (this._length) {\r\n        if (this._length.toLowerCase() === 'tiny') { // tiny = 2^8\r\n          warn('MSSQL does not support BLOB with the `length` = `tiny` option. `VARBINARY(256)` will be used instead.');\r\n\r\n          return 'VARBINARY(256)';\r\n        }\r\n\r\n        warn('MSSQL does not support BLOB with the `length` option. `VARBINARY(MAX)` will be used instead.');\r\n      }\r\n\r\n      return 'VARBINARY(MAX)';\r\n    }\r\n\r\n    _hexify(hex) {\r\n      return `0x${hex}`;\r\n    }\r\n  }\r\n\r\n  class STRING extends BaseTypes.STRING {\r\n    toSql() {\r\n      if (!this._binary) {\r\n        return `NVARCHAR(${this._length})`;\r\n      }\r\n\r\n      return `BINARY(${this._length})`;\r\n    }\r\n\r\n    _stringify(value, options) {\r\n      if (this._binary) {\r\n        return BLOB.prototype._stringify(value);\r\n      }\r\n\r\n      return options.escape(value);\r\n    }\r\n\r\n    _bindParam(value, options) {\r\n      return options.bindParam(this._binary ? Buffer.from(value) : value);\r\n    }\r\n  }\r\n\r\n  STRING.prototype.escape = false;\r\n\r\n  class TEXT extends BaseTypes.TEXT {\r\n    toSql() {\r\n      // TEXT is deprecated in mssql and it would normally be saved as a non-unicode string.\r\n      // Using unicode is just future proof\r\n      if (this._length) {\r\n        if (this._length.toLowerCase() === 'tiny') { // tiny = 2^8\r\n          warn('MSSQL does not support TEXT with the `length` = `tiny` option. `NVARCHAR(256)` will be used instead.');\r\n\r\n          return 'NVARCHAR(256)';\r\n        }\r\n\r\n        warn('MSSQL does not support TEXT with the `length` option. `NVARCHAR(MAX)` will be used instead.');\r\n      }\r\n\r\n      return 'NVARCHAR(MAX)';\r\n    }\r\n  }\r\n\r\n  class BOOLEAN extends BaseTypes.BOOLEAN {\r\n    toSql() {\r\n      return 'BIT';\r\n    }\r\n  }\r\n\r\n  class UUID extends BaseTypes.UUID {\r\n    toSql() {\r\n      return 'CHAR(36)';\r\n    }\r\n  }\r\n\r\n  class NOW extends BaseTypes.NOW {\r\n    toSql() {\r\n      return 'GETDATE()';\r\n    }\r\n  }\r\n\r\n  class DATE extends BaseTypes.DATE {\r\n    toSql() {\r\n      return 'DATETIMEOFFSET';\r\n    }\r\n  }\r\n\r\n  class DATEONLY extends BaseTypes.DATEONLY {\r\n    static parse(value) {\r\n      return dayjs(value).format('YYYY-MM-DD');\r\n    }\r\n  }\r\n\r\n  class INTEGER extends BaseTypes.INTEGER {\r\n    constructor(length) {\r\n      super(length);\r\n      removeUnsupportedIntegerOptions(this);\r\n    }\r\n  }\r\n\r\n  class TINYINT extends BaseTypes.TINYINT {\r\n    constructor(length) {\r\n      super(length);\r\n      removeUnsupportedIntegerOptions(this);\r\n    }\r\n  }\r\n\r\n  class SMALLINT extends BaseTypes.SMALLINT {\r\n    constructor(length) {\r\n      super(length);\r\n      removeUnsupportedIntegerOptions(this);\r\n    }\r\n  }\r\n\r\n  class BIGINT extends BaseTypes.BIGINT {\r\n    constructor(length) {\r\n      super(length);\r\n      removeUnsupportedIntegerOptions(this);\r\n    }\r\n  }\r\n\r\n  class REAL extends BaseTypes.REAL {\r\n    constructor(length, decimals) {\r\n      super(length, decimals);\r\n      // MSSQL does not support any options for real\r\n      if (this._length || this.options.length > 0 || this._unsigned || this._zerofill) {\r\n        warn('MSSQL does not support REAL with options. Plain `REAL` will be used instead.');\r\n        this._length = undefined;\r\n        this.options.length = undefined;\r\n        this._unsigned = undefined;\r\n        this._zerofill = undefined;\r\n      }\r\n    }\r\n  }\r\n\r\n  class FLOAT extends BaseTypes.FLOAT {\r\n    constructor(length, decimals) {\r\n      super(length, decimals);\r\n      // MSSQL does only support lengths as option.\r\n      // Values between 1-24 result in 7 digits precision (4 bytes storage size)\r\n      // Values between 25-53 result in 15 digits precision (8 bytes storage size)\r\n      // If decimals are provided remove these and print a warning\r\n      if (this._decimals) {\r\n        warn('MSSQL does not support Float with decimals. Plain `FLOAT` will be used instead.');\r\n        this._length = undefined;\r\n        this.options.length = undefined;\r\n      }\r\n\r\n      if (this._unsigned) {\r\n        warn('MSSQL does not support Float unsigned. `UNSIGNED` was removed.');\r\n        this._unsigned = undefined;\r\n      }\r\n\r\n      if (this._zerofill) {\r\n        warn('MSSQL does not support Float zerofill. `ZEROFILL` was removed.');\r\n        this._zerofill = undefined;\r\n      }\r\n    }\r\n  }\r\n\r\n  class ENUM extends BaseTypes.ENUM {\r\n    toSql() {\r\n      return 'VARCHAR(255)';\r\n    }\r\n  }\r\n\r\n  return {\r\n    BLOB,\r\n    BOOLEAN,\r\n    ENUM,\r\n    STRING,\r\n    UUID,\r\n    DATE,\r\n    DATEONLY,\r\n    NOW,\r\n    TINYINT,\r\n    SMALLINT,\r\n    INTEGER,\r\n    BIGINT,\r\n    REAL,\r\n    FLOAT,\r\n    TEXT,\r\n  };\r\n};\r\n"],
  "mappings": ";AAEA,MAAM,QAAQ,QAAQ,OAAO;AAE7B,OAAO,UAAU,eAAa;AAC5B,QAAM,OAAO,UAAU,SAAS,KAAK,KAAK,QAAW,uEAAuE;AAQ5H,2CAAyC,UAAU;AACjD,QAAI,SAAS,WAAW,SAAS,QAAQ,SAAS,KAAK,SAAS,aAAa,SAAS,WAAW;AAC/F,WAAK,2BAA2B,SAAS,6BAA6B,SAAS,4BAA4B;AAC3G,eAAS,UAAU;AACnB,eAAS,QAAQ,SAAS;AAC1B,eAAS,YAAY;AACrB,eAAS,YAAY;AAAA,IACvB;AAAA,EACF;AAQA,YAAU,KAAK,MAAM,QAAQ,CAAC,EAAE;AAChC,YAAU,OAAO,MAAM,QAAQ,CAAC,KAAK,GAAG;AACxC,YAAU,KAAK,MAAM,QAAQ,CAAC,GAAG;AACjC,YAAU,KAAK,MAAM,QAAQ;AAE7B,YAAU,QAAQ,MAAM,QAAQ,CAAC,EAAE;AACnC,YAAU,SAAS,MAAM,QAAQ,CAAC,EAAE;AACpC,YAAU,UAAU,MAAM,QAAQ;AAClC,YAAU,QAAQ,MAAM,QAAQ,CAAC,EAAE;AACnC,YAAU,OAAO,MAAM,QAAQ;AAC/B,YAAU,MAAM,MAAM,QAAQ,CAAC,GAAG;AAClC,YAAU,KAAK,MAAM,QAAQ,CAAC,EAAE;AAChC,YAAU,SAAS,MAAM,QAAQ,CAAC,EAAE;AACpC,YAAU,QAAQ,MAAM,QAAQ,CAAC,GAAG;AACpC,YAAU,KAAK,MAAM,QAAQ,CAAC,GAAG;AACjC,YAAU,QAAQ,MAAM,QAAQ,CAAC,GAAG;AACpC,YAAU,KAAK,MAAM,QAAQ;AAC7B,YAAU,KAAK,MAAM,QAAQ;AAC7B,YAAU,KAAK,MAAM,QAAQ,CAAC,GAAG;AACjC,YAAU,OAAO,MAAM,QAAQ,CAAC,GAAG;AAEnC,YAAU,SAAS,MAAM,QAAQ;AAEjC,QAAM,aAAa,UAAU,KAAK;AAAA,IAChC,QAAQ;AACN,UAAI,KAAK,SAAS;AAChB,YAAI,KAAK,QAAQ,YAAY,MAAM,QAAQ;AACzC,eAAK,uGAAuG;AAE5G,iBAAO;AAAA,QACT;AAEA,aAAK,8FAA8F;AAAA,MACrG;AAEA,aAAO;AAAA,IACT;AAAA,IAEA,QAAQ,KAAK;AACX,aAAO,KAAK;AAAA,IACd;AAAA,EACF;AAEA,QAAM,eAAe,UAAU,OAAO;AAAA,IACpC,QAAQ;AACN,UAAI,CAAC,KAAK,SAAS;AACjB,eAAO,YAAY,KAAK;AAAA,MAC1B;AAEA,aAAO,UAAU,KAAK;AAAA,IACxB;AAAA,IAEA,WAAW,OAAO,SAAS;AACzB,UAAI,KAAK,SAAS;AAChB,eAAO,KAAK,UAAU,WAAW,KAAK;AAAA,MACxC;AAEA,aAAO,QAAQ,OAAO,KAAK;AAAA,IAC7B;AAAA,IAEA,WAAW,OAAO,SAAS;AACzB,aAAO,QAAQ,UAAU,KAAK,UAAU,OAAO,KAAK,KAAK,IAAI,KAAK;AAAA,IACpE;AAAA,EACF;AAEA,SAAO,UAAU,SAAS;AAE1B,QAAM,aAAa,UAAU,KAAK;AAAA,IAChC,QAAQ;AAGN,UAAI,KAAK,SAAS;AAChB,YAAI,KAAK,QAAQ,YAAY,MAAM,QAAQ;AACzC,eAAK,sGAAsG;AAE3G,iBAAO;AAAA,QACT;AAEA,aAAK,6FAA6F;AAAA,MACpG;AAEA,aAAO;AAAA,IACT;AAAA,EACF;AAEA,QAAM,gBAAgB,UAAU,QAAQ;AAAA,IACtC,QAAQ;AACN,aAAO;AAAA,IACT;AAAA,EACF;AAEA,QAAM,aAAa,UAAU,KAAK;AAAA,IAChC,QAAQ;AACN,aAAO;AAAA,IACT;AAAA,EACF;AAEA,QAAM,YAAY,UAAU,IAAI;AAAA,IAC9B,QAAQ;AACN,aAAO;AAAA,IACT;AAAA,EACF;AAEA,QAAM,aAAa,UAAU,KAAK;AAAA,IAChC,QAAQ;AACN,aAAO;AAAA,IACT;AAAA,EACF;AAEA,QAAM,iBAAiB,UAAU,SAAS;AAAA,WACjC,MAAM,OAAO;AAClB,aAAO,MAAM,KAAK,EAAE,OAAO,YAAY;AAAA,IACzC;AAAA,EACF;AAEA,QAAM,gBAAgB,UAAU,QAAQ;AAAA,IACtC,YAAY,QAAQ;AAClB,YAAM,MAAM;AACZ,sCAAgC,IAAI;AAAA,IACtC;AAAA,EACF;AAEA,QAAM,gBAAgB,UAAU,QAAQ;AAAA,IACtC,YAAY,QAAQ;AAClB,YAAM,MAAM;AACZ,sCAAgC,IAAI;AAAA,IACtC;AAAA,EACF;AAEA,QAAM,iBAAiB,UAAU,SAAS;AAAA,IACxC,YAAY,QAAQ;AAClB,YAAM,MAAM;AACZ,sCAAgC,IAAI;AAAA,IACtC;AAAA,EACF;AAEA,QAAM,eAAe,UAAU,OAAO;AAAA,IACpC,YAAY,QAAQ;AAClB,YAAM,MAAM;AACZ,sCAAgC,IAAI;AAAA,IACtC;AAAA,EACF;AAEA,QAAM,aAAa,UAAU,KAAK;AAAA,IAChC,YAAY,QAAQ,UAAU;AAC5B,YAAM,QAAQ,QAAQ;AAEtB,UAAI,KAAK,WAAW,KAAK,QAAQ,SAAS,KAAK,KAAK,aAAa,KAAK,WAAW;AAC/E,aAAK,8EAA8E;AACnF,aAAK,UAAU;AACf,aAAK,QAAQ,SAAS;AACtB,aAAK,YAAY;AACjB,aAAK,YAAY;AAAA,MACnB;AAAA,IACF;AAAA,EACF;AAEA,QAAM,cAAc,UAAU,MAAM;AAAA,IAClC,YAAY,QAAQ,UAAU;AAC5B,YAAM,QAAQ,QAAQ;AAKtB,UAAI,KAAK,WAAW;AAClB,aAAK,iFAAiF;AACtF,aAAK,UAAU;AACf,aAAK,QAAQ,SAAS;AAAA,MACxB;AAEA,UAAI,KAAK,WAAW;AAClB,aAAK,gEAAgE;AACrE,aAAK,YAAY;AAAA,MACnB;AAEA,UAAI,KAAK,WAAW;AAClB,aAAK,gEAAgE;AACrE,aAAK,YAAY;AAAA,MACnB;AAAA,IACF;AAAA,EACF;AAEA,QAAM,aAAa,UAAU,KAAK;AAAA,IAChC,QAAQ;AACN,aAAO;AAAA,IACT;AAAA,EACF;AAEA,SAAO;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACF;",
  "names": []
}
