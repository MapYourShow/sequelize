{
  "version": 3,
  "sources": ["../../../src/dialects/mssql/async-queue.ts"],
  "sourcesContent": ["import BaseError from '../../errors/base-error';\r\nimport ConnectionError from '../../errors/connection-error';\r\n\r\n/**\r\n * Thrown when a connection to a database is closed while an operation is in progress\r\n */\r\nexport class AsyncQueueError extends BaseError {\r\n  constructor(message: string) {\r\n    super(message);\r\n    this.name = 'SequelizeAsyncQueueError';\r\n  }\r\n}\r\n\r\nexport class AsyncQueue {\r\n  previous: Promise<unknown>;\r\n  closed: boolean;\r\n  rejectCurrent: (reason?: any) => void;\r\n\r\n  constructor() {\r\n    this.previous = Promise.resolve();\r\n    this.closed = false;\r\n    this.rejectCurrent = () => {\r\n      /** do nothing */\r\n    };\r\n  }\r\n\r\n  close() {\r\n    this.closed = true;\r\n    this.rejectCurrent(\r\n      new ConnectionError(\r\n        new AsyncQueueError(\r\n          'the connection was closed before this query could finish executing',\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  async enqueue(asyncFunction: (...args: any[]) => Promise<unknown>) {\r\n    // This outer promise might seems superflous since down below we return asyncFunction().then(resolve, reject).\r\n    // However, this ensures that this.previous will never be a rejected promise so the queue will\r\n    // always keep going, while still communicating rejection from asyncFunction to the user.\r\n    return new Promise((resolve, reject) => {\r\n      this.previous = this.previous.then(() => {\r\n        this.rejectCurrent = reject;\r\n        if (this.closed) {\r\n          return reject(\r\n            new ConnectionError(\r\n              new AsyncQueueError(\r\n                'the connection was closed before this query could be executed',\r\n              ),\r\n            ),\r\n          );\r\n        }\r\n\r\n        return asyncFunction().then(resolve, reject);\r\n      });\r\n    });\r\n  }\r\n}\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAsB;AACtB,8BAA4B;AAKrB,MAAM,wBAAwB,0BAAU;AAAA,EAC7C,YAAY,SAAiB;AAC3B,UAAM,OAAO;AACb,SAAK,OAAO;AAAA,EACd;AACF;AAEO,MAAM,WAAW;AAAA,EACtB;AAAA,EACA;AAAA,EACA;AAAA,EAEA,cAAc;AACZ,SAAK,WAAW,QAAQ,QAAQ;AAChC,SAAK,SAAS;AACd,SAAK,gBAAgB,MAAM;AAAA,IAE3B;AAAA,EACF;AAAA,EAEA,QAAQ;AACN,SAAK,SAAS;AACd,SAAK,cACH,IAAI,gCACF,IAAI,gBACF,oEACF,CACF,CACF;AAAA,EACF;AAAA,QAEM,QAAQ,eAAqD;AAIjE,WAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,WAAK,WAAW,KAAK,SAAS,KAAK,MAAM;AACvC,aAAK,gBAAgB;AACrB,YAAI,KAAK,QAAQ;AACf,iBAAO,OACL,IAAI,gCACF,IAAI,gBACF,+DACF,CACF,CACF;AAAA,QACF;AAEA,eAAO,cAAc,EAAE,KAAK,SAAS,MAAM;AAAA,MAC7C,CAAC;AAAA,IACH,CAAC;AAAA,EACH;AACF;",
  "names": []
}
