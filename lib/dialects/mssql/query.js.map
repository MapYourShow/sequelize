{
  "version": 3,
  "sources": ["../../../src/dialects/mssql/query.js"],
  "sourcesContent": ["'use strict';\r\n\r\nconst { AbstractQuery } = require('../abstract/query');\r\nconst sequelizeErrors = require('../../errors');\r\nconst parserStore = require('../parserStore')('mssql');\r\nconst _ = require('lodash');\r\nconst { logger } = require('../../utils/logger');\r\n\r\nconst debug = logger.debugContext('sql:mssql');\r\n\r\nconst minSafeIntegerAsBigInt = BigInt(Number.MIN_SAFE_INTEGER);\r\nconst maxSafeIntegerAsBigInt = BigInt(Number.MAX_SAFE_INTEGER);\r\n\r\nfunction getScale(aNum) {\r\n  if (!Number.isFinite(aNum)) {\r\n    return 0;\r\n  }\r\n\r\n  let e = 1;\r\n  while (Math.round(aNum * e) / e !== aNum) {\r\n    e *= 10;\r\n  }\r\n\r\n  return Math.log10(e);\r\n}\r\n\r\nexport class MsSqlQuery extends AbstractQuery {\r\n  getInsertIdField() {\r\n    return 'id';\r\n  }\r\n\r\n  getSQLTypeFromJsType(value, TYPES) {\r\n    const paramType = { type: TYPES.NVarChar, typeOptions: {}, value };\r\n    if (typeof value === 'number') {\r\n      if (Number.isInteger(value)) {\r\n        if (value >= -2_147_483_648 && value <= 2_147_483_647) {\r\n          paramType.type = TYPES.Int;\r\n        } else {\r\n          paramType.type = TYPES.BigInt;\r\n        }\r\n      } else {\r\n        paramType.type = TYPES.Numeric;\r\n        // Default to a reasonable numeric precision/scale pending more sophisticated logic\r\n        paramType.typeOptions = { precision: 30, scale: getScale(value) };\r\n      }\r\n    } else if (typeof value === 'bigint') {\r\n      if (value < minSafeIntegerAsBigInt || value > maxSafeIntegerAsBigInt) {\r\n        paramType.type = TYPES.VarChar;\r\n        paramType.value = value.toString();\r\n      } else {\r\n        return this.getSQLTypeFromJsType(Number(value), TYPES);\r\n      }\r\n    } else if (typeof value === 'boolean') {\r\n      paramType.type = TYPES.Bit;\r\n    }\r\n\r\n    if (Buffer.isBuffer(value)) {\r\n      paramType.type = TYPES.VarBinary;\r\n    }\r\n\r\n    return paramType;\r\n  }\r\n\r\n  async _run(connection, sql, parameters, errStack) {\r\n    this.sql = sql;\r\n    const { options } = this;\r\n\r\n    const complete = this._logQuery(sql, debug, parameters);\r\n\r\n    const query = new Promise((resolve, reject) => {\r\n      // TRANSACTION SUPPORT\r\n      if (sql.startsWith('BEGIN TRANSACTION')) {\r\n        connection.beginTransaction(error => (error ? reject(error) : resolve([])), options.transaction.name, connection.lib.ISOLATION_LEVEL[options.isolationLevel]);\r\n\r\n        return;\r\n      }\r\n\r\n      if (sql.startsWith('COMMIT TRANSACTION')) {\r\n        connection.commitTransaction(error => (error ? reject(error) : resolve([])));\r\n\r\n        return;\r\n      }\r\n\r\n      if (sql.startsWith('ROLLBACK TRANSACTION')) {\r\n        connection.rollbackTransaction(error => (error ? reject(error) : resolve([])), options.transaction.name);\r\n\r\n        return;\r\n      }\r\n\r\n      if (sql.startsWith('SAVE TRANSACTION')) {\r\n        connection.saveTransaction(error => (error ? reject(error) : resolve([])), options.transaction.name);\r\n\r\n        return;\r\n      }\r\n\r\n      const rows = [];\r\n      const request = new connection.lib.Request(sql, (err, rowCount) => (err ? reject(err) : resolve([rows, rowCount])));\r\n\r\n      if (parameters) {\r\n        if (Array.isArray(parameters)) {\r\n          // eslint-disable-next-line unicorn/no-for-loop\r\n          for (let i = 0; i < parameters.length; i++) {\r\n            const paramType = this.getSQLTypeFromJsType(parameters[i], connection.lib.TYPES);\r\n            request.addParameter(String(i + 1), paramType.type, paramType.value, paramType.typeOptions);\r\n          }\r\n        } else {\r\n          _.forOwn(parameters, (parameter, parameterName) => {\r\n            const paramType = this.getSQLTypeFromJsType(parameter, connection.lib.TYPES);\r\n            request.addParameter(parameterName, paramType.type, paramType.value, paramType.typeOptions);\r\n          });\r\n        }\r\n\r\n      }\r\n\r\n      request.on('row', columns => {\r\n        rows.push(columns);\r\n      });\r\n\r\n      connection.execSql(request);\r\n    });\r\n\r\n    let rows;\r\n    let rowCount;\r\n\r\n    try {\r\n      [rows, rowCount] = await query;\r\n    } catch (error) {\r\n      error.sql = sql;\r\n      error.parameters = parameters;\r\n\r\n      throw this.formatError(error, errStack);\r\n    }\r\n\r\n    complete();\r\n\r\n    if (Array.isArray(rows)) {\r\n      rows = rows.map(columns => {\r\n        const row = {};\r\n        for (const column of columns) {\r\n          const typeid = column.metadata.type.id;\r\n          const parse = parserStore.get(typeid);\r\n          let value = column.value;\r\n\r\n          if (value !== null & Boolean(parse)) {\r\n            value = parse(value);\r\n          }\r\n\r\n          row[column.metadata.colName] = value;\r\n        }\r\n\r\n        return row;\r\n      });\r\n    }\r\n\r\n    return this.formatResults(rows, rowCount);\r\n  }\r\n\r\n  run(sql, parameters) {\r\n\r\n    const errForStack = new Error();\r\n\r\n    return this.connection.queue.enqueue(() => this._run(this.connection, sql, parameters, errForStack.stack));\r\n  }\r\n\r\n  /**\r\n   * High level function that handles the results of a query execution.\r\n   *\r\n   * @param {Array} data - The result of the query execution.\r\n   * @param {number} rowCount\r\n   * @private\r\n   * @example\r\n   * Example:\r\n   *  query.formatResults([\r\n   *    {\r\n   *      id: 1,              // this is from the main table\r\n   *      attr2: 'snafu',     // this is from the main table\r\n   *      Tasks.id: 1,        // this is from the associated table\r\n   *      Tasks.title: 'task' // this is from the associated table\r\n   *    }\r\n   *  ])\r\n   */\r\n  formatResults(data, rowCount) {\r\n    if (this.isInsertQuery(data)) {\r\n      this.handleInsertQuery(data);\r\n\r\n      return [this.instance || data, rowCount];\r\n    }\r\n\r\n    if (this.isShowTablesQuery()) {\r\n      return this.handleShowTablesQuery(data);\r\n    }\r\n\r\n    if (this.isDescribeQuery()) {\r\n      const result = {};\r\n      for (const _result of data) {\r\n        if (_result.Default) {\r\n          _result.Default = _result.Default.replace('(\\'', '').replace('\\')', '').replace(/'/g, '');\r\n        }\r\n\r\n        result[_result.Name] = {\r\n          type: _result.Type.toUpperCase(),\r\n          allowNull: _result.IsNull === 'YES',\r\n          defaultValue: _result.Default,\r\n          primaryKey: _result.Constraint === 'PRIMARY KEY',\r\n          autoIncrement: _result.IsIdentity === 1,\r\n          comment: _result.Comment,\r\n        };\r\n\r\n        if (\r\n          result[_result.Name].type.includes('CHAR')\r\n          && _result.Length\r\n        ) {\r\n          if (_result.Length === -1) {\r\n            result[_result.Name].type += '(MAX)';\r\n          } else {\r\n            result[_result.Name].type += `(${_result.Length})`;\r\n          }\r\n        }\r\n      }\r\n\r\n      return result;\r\n    }\r\n\r\n    if (this.isSelectQuery()) {\r\n      return this.handleSelectQuery(data);\r\n    }\r\n\r\n    if (this.isShowIndexesQuery()) {\r\n      return this.handleShowIndexesQuery(data);\r\n    }\r\n\r\n    if (this.isCallQuery()) {\r\n      return data[0];\r\n    }\r\n\r\n    if (this.isBulkUpdateQuery()) {\r\n      if (this.options.returning) {\r\n        return this.handleSelectQuery(data);\r\n      }\r\n\r\n      return rowCount;\r\n    }\r\n\r\n    if (this.isBulkDeleteQuery()) {\r\n      return data[0] ? data[0].AFFECTEDROWS : 0;\r\n    }\r\n\r\n    if (this.isVersionQuery()) {\r\n      return data[0].version;\r\n    }\r\n\r\n    if (this.isForeignKeysQuery()) {\r\n      return data;\r\n    }\r\n\r\n    if (this.isUpsertQuery()) {\r\n      // if this was an upsert and no data came back, that means the record exists, but the update was a noop.\r\n      // return the current instance and mark it as an \"not an insert\".\r\n      if (data && data.length === 0) {\r\n        return [this.instance || data, false];\r\n      }\r\n\r\n      this.handleInsertQuery(data);\r\n\r\n      return [this.instance || data, data[0].$action === 'INSERT'];\r\n    }\r\n\r\n    if (this.isUpdateQuery()) {\r\n      return [this.instance || data, rowCount];\r\n    }\r\n\r\n    if (this.isShowConstraintsQuery()) {\r\n      return this.handleShowConstraintsQuery(data);\r\n    }\r\n\r\n    if (this.isRawQuery()) {\r\n      return [data, rowCount];\r\n    }\r\n\r\n    return data;\r\n  }\r\n\r\n  handleShowTablesQuery(results) {\r\n    return results.map(resultSet => {\r\n      return {\r\n        tableName: resultSet.TABLE_NAME,\r\n        schema: resultSet.TABLE_SCHEMA,\r\n      };\r\n    });\r\n  }\r\n\r\n  handleShowConstraintsQuery(data) {\r\n    // Convert snake_case keys to camelCase as it's generated by stored procedure\r\n    return data.slice(1).map(result => {\r\n      const constraint = {};\r\n      for (const key in result) {\r\n        constraint[_.camelCase(key)] = result[key];\r\n      }\r\n\r\n      return constraint;\r\n    });\r\n  }\r\n\r\n  formatError(err, errStack) {\r\n    let match;\r\n\r\n    match = err.message.match(/Violation of (?:UNIQUE|PRIMARY) KEY constraint '([^']*)'. Cannot insert duplicate key in object '.*'.(:? The duplicate key value is \\((.*)\\).)?/);\r\n    match = match || err.message.match(/Cannot insert duplicate key row in object .* with unique index '(.*)'/);\r\n    if (match && match.length > 1) {\r\n      let fields = {};\r\n      const uniqueKey = this.model && this.model.uniqueKeys[match[1]];\r\n      let message = 'Validation error';\r\n\r\n      if (uniqueKey && Boolean(uniqueKey.msg)) {\r\n        message = uniqueKey.msg;\r\n      }\r\n\r\n      if (match[3]) {\r\n        const values = match[3].split(',').map(part => part.trim());\r\n        if (uniqueKey) {\r\n          fields = _.zipObject(uniqueKey.fields, values);\r\n        } else {\r\n          fields[match[1]] = match[3];\r\n        }\r\n      }\r\n\r\n      const errors = [];\r\n      _.forOwn(fields, (value, field) => {\r\n        errors.push(new sequelizeErrors.ValidationErrorItem(\r\n          this.getUniqueConstraintErrorMessage(field),\r\n          'unique violation', // sequelizeErrors.ValidationErrorItem.Origins.DB,\r\n          field,\r\n          value,\r\n          this.instance,\r\n          'not_unique',\r\n        ));\r\n      });\r\n\r\n      return new sequelizeErrors.UniqueConstraintError({ message, errors, cause: err, fields, stack: errStack });\r\n    }\r\n\r\n    match = err.message.match(/Failed on step '(.*)'.Could not create constraint. See previous errors./)\r\n      || err.message.match(/The DELETE statement conflicted with the REFERENCE constraint \"(.*)\". The conflict occurred in database \"(.*)\", table \"(.*)\", column '(.*)'./)\r\n      || err.message.match(/The (?:INSERT|MERGE|UPDATE) statement conflicted with the FOREIGN KEY constraint \"(.*)\". The conflict occurred in database \"(.*)\", table \"(.*)\", column '(.*)'./);\r\n    if (match && match.length > 0) {\r\n      return new sequelizeErrors.ForeignKeyConstraintError({\r\n        fields: null,\r\n        index: match[1],\r\n        cause: err,\r\n        stack: errStack,\r\n      });\r\n    }\r\n\r\n    match = err.message.match(/Could not drop constraint. See previous errors./);\r\n    if (match && match.length > 0) {\r\n      let constraint = err.sql.match(/(?:constraint|index) \\[(.+?)]/i);\r\n      constraint = constraint ? constraint[1] : undefined;\r\n      let table = err.sql.match(/table \\[(.+?)]/i);\r\n      table = table ? table[1] : undefined;\r\n\r\n      return new sequelizeErrors.UnknownConstraintError({\r\n        message: match[1],\r\n        constraint,\r\n        table,\r\n        cause: err,\r\n        stack: errStack,\r\n      });\r\n    }\r\n\r\n    return new sequelizeErrors.DatabaseError(err, { stack: errStack });\r\n  }\r\n\r\n  isShowOrDescribeQuery() {\r\n    let result = false;\r\n\r\n    result = result || this.sql.toLowerCase().startsWith('select c.column_name as \\'name\\', c.data_type as \\'type\\', c.is_nullable as \\'isnull\\'');\r\n    result = result || this.sql.toLowerCase().startsWith('select tablename = t.name, name = ind.name,');\r\n    result = result || this.sql.toLowerCase().startsWith('exec sys.sp_helpindex @objname');\r\n\r\n    return result;\r\n  }\r\n\r\n  isShowIndexesQuery() {\r\n    return this.sql.toLowerCase().startsWith('exec sys.sp_helpindex @objname');\r\n  }\r\n\r\n  handleShowIndexesQuery(data) {\r\n    // Group by index name, and collect all fields\r\n    data = data.reduce((acc, item) => {\r\n      if (!(item.index_name in acc)) {\r\n        acc[item.index_name] = item;\r\n        item.fields = [];\r\n      }\r\n\r\n      for (const column of item.index_keys.split(',')) {\r\n        let columnName = column.trim();\r\n        if (columnName.includes('(-)')) {\r\n          columnName = columnName.replace('(-)', '');\r\n        }\r\n\r\n        acc[item.index_name].fields.push({\r\n          attribute: columnName,\r\n          length: undefined,\r\n          order: column.includes('(-)') ? 'DESC' : 'ASC',\r\n          collate: undefined,\r\n        });\r\n      }\r\n\r\n      delete item.index_keys;\r\n\r\n      return acc;\r\n    }, {});\r\n\r\n    return _.map(data, item => ({\r\n      primary: item.index_name.toLowerCase().startsWith('pk'),\r\n      fields: item.fields,\r\n      name: item.index_name,\r\n      tableName: undefined,\r\n      unique: item.index_description.toLowerCase().includes('unique'),\r\n      type: undefined,\r\n    }));\r\n  }\r\n\r\n  handleInsertQuery(results, metaData) {\r\n    if (this.instance) {\r\n      // add the inserted row id to the instance\r\n      const autoIncrementAttribute = this.model.autoIncrementAttribute;\r\n      let id = null;\r\n      let autoIncrementAttributeAlias = null;\r\n\r\n      if (Object.prototype.hasOwnProperty.call(this.model.rawAttributes, autoIncrementAttribute)\r\n        && this.model.rawAttributes[autoIncrementAttribute].field !== undefined) {\r\n        autoIncrementAttributeAlias = this.model.rawAttributes[autoIncrementAttribute].field;\r\n      }\r\n\r\n      id = id || results && results[0][this.getInsertIdField()];\r\n      id = id || metaData && metaData[this.getInsertIdField()];\r\n      id = id || results && results[0][autoIncrementAttribute];\r\n      id = id || autoIncrementAttributeAlias && results && results[0][autoIncrementAttributeAlias];\r\n\r\n      this.instance[autoIncrementAttribute] = id;\r\n\r\n      if (this.instance.dataValues) {\r\n        for (const key in results[0]) {\r\n          if (Object.prototype.hasOwnProperty.call(results[0], key)) {\r\n            const record = results[0][key];\r\n\r\n            const attr = _.find(this.model.rawAttributes, attribute => attribute.fieldName === key || attribute.field === key);\r\n\r\n            this.instance.dataValues[attr && attr.fieldName || key] = record;\r\n          }\r\n        }\r\n      }\r\n\r\n    }\r\n  }\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
