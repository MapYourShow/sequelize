{
  "version": 3,
  "sources": ["../../../src/dialects/mssql/query-generator.js"],
  "sourcesContent": ["'use strict';\r\n\r\nconst _ = require('lodash');\r\nconst Utils = require('../../utils');\r\nconst DataTypes = require('../../data-types');\r\nconst { TableHints } = require('../../table-hints');\r\nconst { AbstractQueryGenerator } = require('../abstract/query-generator');\r\nconst randomBytes = require('crypto').randomBytes;\r\nconst semver = require('semver');\r\nconst { Op } = require('../../operators');\r\n\r\n/* istanbul ignore next */\r\nfunction throwMethodUndefined(methodName) {\r\n  throw new Error(`The method \"${methodName}\" is not defined! Please add it to your sql dialect.`);\r\n}\r\n\r\nexport class MsSqlQueryGenerator extends AbstractQueryGenerator {\r\n  createDatabaseQuery(databaseName, options) {\r\n    options = { collate: null, ...options };\r\n\r\n    const collation = options.collate ? `COLLATE ${this.escape(options.collate)}` : '';\r\n\r\n    return [\r\n      'IF NOT EXISTS (SELECT * FROM sys.databases WHERE name =', wrapSingleQuote(databaseName), ')',\r\n      'BEGIN',\r\n      'CREATE DATABASE', this.quoteIdentifier(databaseName),\r\n      `${collation};`,\r\n      'END;',\r\n    ].join(' ');\r\n  }\r\n\r\n  dropDatabaseQuery(databaseName) {\r\n    return [\r\n      'IF EXISTS (SELECT * FROM sys.databases WHERE name =', wrapSingleQuote(databaseName), ')',\r\n      'BEGIN',\r\n      'DROP DATABASE', this.quoteIdentifier(databaseName), ';',\r\n      'END;',\r\n    ].join(' ');\r\n  }\r\n\r\n  createSchema(schema) {\r\n    return [\r\n      'IF NOT EXISTS (SELECT schema_name',\r\n      'FROM information_schema.schemata',\r\n      'WHERE schema_name =', wrapSingleQuote(schema), ')',\r\n      'BEGIN',\r\n      'EXEC sp_executesql N\\'CREATE SCHEMA',\r\n      this.quoteIdentifier(schema),\r\n      ';\\'',\r\n      'END;',\r\n    ].join(' ');\r\n  }\r\n\r\n  dropSchema(schema) {\r\n    // Mimics Postgres CASCADE, will drop objects belonging to the schema\r\n    const quotedSchema = wrapSingleQuote(schema);\r\n\r\n    return [\r\n      'IF EXISTS (SELECT schema_name',\r\n      'FROM information_schema.schemata',\r\n      'WHERE schema_name =', quotedSchema, ')',\r\n      'BEGIN',\r\n      'DECLARE @id INT, @ms_sql NVARCHAR(2000);',\r\n      'DECLARE @cascade TABLE (',\r\n      'id INT NOT NULL IDENTITY PRIMARY KEY,',\r\n      'ms_sql NVARCHAR(2000) NOT NULL );',\r\n      'INSERT INTO @cascade ( ms_sql )',\r\n      'SELECT CASE WHEN o.type IN (\\'F\\',\\'PK\\')',\r\n      'THEN N\\'ALTER TABLE [\\'+ s.name + N\\'].[\\' + p.name + N\\'] DROP CONSTRAINT [\\' + o.name + N\\']\\'',\r\n      'ELSE N\\'DROP TABLE [\\'+ s.name + N\\'].[\\' + o.name + N\\']\\' END',\r\n      'FROM sys.objects o',\r\n      'JOIN sys.schemas s on o.schema_id = s.schema_id',\r\n      'LEFT OUTER JOIN sys.objects p on o.parent_object_id = p.object_id',\r\n      'WHERE o.type IN (\\'F\\', \\'PK\\', \\'U\\') AND s.name = ', quotedSchema,\r\n      'ORDER BY o.type ASC;',\r\n      'SELECT TOP 1 @id = id, @ms_sql = ms_sql FROM @cascade ORDER BY id;',\r\n      'WHILE @id IS NOT NULL',\r\n      'BEGIN',\r\n      'BEGIN TRY EXEC sp_executesql @ms_sql; END TRY',\r\n      'BEGIN CATCH BREAK; THROW; END CATCH;',\r\n      'DELETE FROM @cascade WHERE id = @id;',\r\n      'SELECT @id = NULL, @ms_sql = NULL;',\r\n      'SELECT TOP 1 @id = id, @ms_sql = ms_sql FROM @cascade ORDER BY id;',\r\n      'END',\r\n      'EXEC sp_executesql N\\'DROP SCHEMA', this.quoteIdentifier(schema), ';\\'',\r\n      'END;',\r\n    ].join(' ');\r\n  }\r\n\r\n  showSchemasQuery() {\r\n    return [\r\n      'SELECT \"name\" as \"schema_name\" FROM sys.schemas as s',\r\n      'WHERE \"s\".\"name\" NOT IN (',\r\n      '\\'INFORMATION_SCHEMA\\', \\'dbo\\', \\'guest\\', \\'sys\\', \\'archive\\'',\r\n      ')', 'AND', '\"s\".\"name\" NOT LIKE', '\\'db_%\\'',\r\n    ].join(' ');\r\n  }\r\n\r\n  versionQuery() {\r\n    // Uses string manipulation to convert the MS Maj.Min.Patch.Build to semver Maj.Min.Patch\r\n    return [\r\n      'DECLARE @ms_ver NVARCHAR(20);',\r\n      'SET @ms_ver = REVERSE(CONVERT(NVARCHAR(20), SERVERPROPERTY(\\'ProductVersion\\')));',\r\n      'SELECT REVERSE(SUBSTRING(@ms_ver, CHARINDEX(\\'.\\', @ms_ver)+1, 20)) AS \\'version\\'',\r\n    ].join(' ');\r\n  }\r\n\r\n  createTableQuery(tableName, attributes, options) {\r\n    const primaryKeys = [];\r\n    const foreignKeys = {};\r\n    const attributesClauseParts = [];\r\n\r\n    let commentStr = '';\r\n\r\n    for (const attr in attributes) {\r\n      if (Object.prototype.hasOwnProperty.call(attributes, attr)) {\r\n        let dataType = attributes[attr];\r\n        let match;\r\n\r\n        if (dataType.includes('COMMENT ')) {\r\n          const commentMatch = dataType.match(/^(.+) (COMMENT.*)$/);\r\n          const commentText = commentMatch[2].replace('COMMENT', '').trim();\r\n          commentStr += this.commentTemplate(commentText, tableName, attr);\r\n          // remove comment related substring from dataType\r\n          dataType = commentMatch[1];\r\n        }\r\n\r\n        if (dataType.includes('PRIMARY KEY')) {\r\n          primaryKeys.push(attr);\r\n\r\n          if (dataType.includes('REFERENCES')) {\r\n            // MSSQL doesn't support inline REFERENCES declarations: move to the end\r\n            match = dataType.match(/^(.+) (REFERENCES.*)$/);\r\n            attributesClauseParts.push(`${this.quoteIdentifier(attr)} ${match[1].replace('PRIMARY KEY', '')}`);\r\n            foreignKeys[attr] = match[2];\r\n          } else {\r\n            attributesClauseParts.push(`${this.quoteIdentifier(attr)} ${dataType.replace('PRIMARY KEY', '')}`);\r\n          }\r\n        } else if (dataType.includes('REFERENCES')) {\r\n          // MSSQL doesn't support inline REFERENCES declarations: move to the end\r\n          match = dataType.match(/^(.+) (REFERENCES.*)$/);\r\n          attributesClauseParts.push(`${this.quoteIdentifier(attr)} ${match[1]}`);\r\n          foreignKeys[attr] = match[2];\r\n        } else {\r\n          attributesClauseParts.push(`${this.quoteIdentifier(attr)} ${dataType}`);\r\n        }\r\n      }\r\n    }\r\n\r\n    const pkString = primaryKeys.map(pk => this.quoteIdentifier(pk)).join(', ');\r\n\r\n    if (options.uniqueKeys) {\r\n      _.each(options.uniqueKeys, (columns, indexName) => {\r\n        if (columns.customIndex) {\r\n          if (typeof indexName !== 'string') {\r\n            indexName = `uniq_${tableName}_${columns.fields.join('_')}`;\r\n          }\r\n\r\n          attributesClauseParts.push(`CONSTRAINT ${\r\n            this.quoteIdentifier(indexName)\r\n          } UNIQUE (${\r\n            columns.fields.map(field => this.quoteIdentifier(field)).join(', ')\r\n          })`);\r\n        }\r\n      });\r\n    }\r\n\r\n    if (pkString.length > 0) {\r\n      attributesClauseParts.push(`PRIMARY KEY (${pkString})`);\r\n    }\r\n\r\n    for (const fkey in foreignKeys) {\r\n      if (Object.prototype.hasOwnProperty.call(foreignKeys, fkey)) {\r\n        attributesClauseParts.push(`FOREIGN KEY (${this.quoteIdentifier(fkey)}) ${foreignKeys[fkey]}`);\r\n      }\r\n    }\r\n\r\n    const quotedTableName = this.quoteTable(tableName);\r\n\r\n    return Utils.joinSQLFragments([\r\n      `IF OBJECT_ID('${quotedTableName}', 'U') IS NULL`,\r\n      `CREATE TABLE ${quotedTableName} (${attributesClauseParts.join(', ')})`,\r\n      ';',\r\n      commentStr,\r\n    ]);\r\n  }\r\n\r\n  describeTableQuery(tableName, schema) {\r\n    let sql = [\r\n      'SELECT',\r\n      'c.COLUMN_NAME AS \\'Name\\',',\r\n      'c.DATA_TYPE AS \\'Type\\',',\r\n      'c.CHARACTER_MAXIMUM_LENGTH AS \\'Length\\',',\r\n      'c.IS_NULLABLE as \\'IsNull\\',',\r\n      'COLUMN_DEFAULT AS \\'Default\\',',\r\n      'pk.CONSTRAINT_TYPE AS \\'Constraint\\',',\r\n      'COLUMNPROPERTY(OBJECT_ID(c.TABLE_SCHEMA+\\'.\\'+c.TABLE_NAME), c.COLUMN_NAME, \\'IsIdentity\\') as \\'IsIdentity\\',',\r\n      'CAST(prop.value AS NVARCHAR) AS \\'Comment\\'',\r\n      'FROM',\r\n      'INFORMATION_SCHEMA.TABLES t',\r\n      'INNER JOIN',\r\n      'INFORMATION_SCHEMA.COLUMNS c ON t.TABLE_NAME = c.TABLE_NAME AND t.TABLE_SCHEMA = c.TABLE_SCHEMA',\r\n      'LEFT JOIN (SELECT tc.table_schema, tc.table_name, ',\r\n      'cu.column_name, tc.CONSTRAINT_TYPE ',\r\n      'FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS tc ',\r\n      'JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE  cu ',\r\n      'ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name ',\r\n      'and tc.constraint_name=cu.constraint_name ',\r\n      'and tc.CONSTRAINT_TYPE=\\'PRIMARY KEY\\') pk ',\r\n      'ON pk.table_schema=c.table_schema ',\r\n      'AND pk.table_name=c.table_name ',\r\n      'AND pk.column_name=c.column_name ',\r\n      'INNER JOIN sys.columns AS sc',\r\n      'ON sc.object_id = object_id(t.table_schema + \\'.\\' + t.table_name) AND sc.name = c.column_name',\r\n      'LEFT JOIN sys.extended_properties prop ON prop.major_id = sc.object_id',\r\n      'AND prop.minor_id = sc.column_id',\r\n      'AND prop.name = \\'MS_Description\\'',\r\n      'WHERE t.TABLE_NAME =', wrapSingleQuote(tableName),\r\n    ].join(' ');\r\n\r\n    if (schema) {\r\n      sql += `AND t.TABLE_SCHEMA =${wrapSingleQuote(schema)}`;\r\n    }\r\n\r\n    return sql;\r\n  }\r\n\r\n  renameTableQuery(before, after) {\r\n    return `EXEC sp_rename ${this.quoteTable(before)}, ${this.quoteTable(after)};`;\r\n  }\r\n\r\n  showTablesQuery() {\r\n    return 'SELECT TABLE_NAME, TABLE_SCHEMA FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = \\'BASE TABLE\\';';\r\n  }\r\n\r\n  dropTableQuery(tableName) {\r\n    const quoteTbl = this.quoteTable(tableName);\r\n\r\n    return Utils.joinSQLFragments([\r\n      `IF OBJECT_ID('${quoteTbl}', 'U') IS NOT NULL`,\r\n      'DROP TABLE',\r\n      quoteTbl,\r\n      ';',\r\n    ]);\r\n  }\r\n\r\n  addColumnQuery(table, key, dataType) {\r\n    // TODO: attributeToSQL SHOULD be using attributes in addColumnQuery\r\n    //       but instead we need to pass the key along as the field here\r\n    dataType.field = key;\r\n    let commentStr = '';\r\n\r\n    if (dataType.comment && _.isString(dataType.comment)) {\r\n      commentStr = this.commentTemplate(dataType.comment, table, key);\r\n      // attributeToSQL will try to include `COMMENT 'Comment Text'` when it returns if the comment key\r\n      // is present. This is needed for createTable statement where that part is extracted with regex.\r\n      // Here we can intercept the object and remove comment property since we have the original object.\r\n      delete dataType.comment;\r\n    }\r\n\r\n    return Utils.joinSQLFragments([\r\n      'ALTER TABLE',\r\n      this.quoteTable(table),\r\n      'ADD',\r\n      this.quoteIdentifier(key),\r\n      this.attributeToSQL(dataType, { context: 'addColumn' }),\r\n      ';',\r\n      commentStr,\r\n    ]);\r\n  }\r\n\r\n  commentTemplate(comment, table, column) {\r\n    return ' EXEC sp_addextendedproperty '\r\n        + `@name = N'MS_Description', @value = ${this.escape(comment)}, `\r\n        + '@level0type = N\\'Schema\\', @level0name = \\'dbo\\', '\r\n        + `@level1type = N'Table', @level1name = ${this.quoteTable(table)}, `\r\n        + `@level2type = N'Column', @level2name = ${this.quoteIdentifier(column)};`;\r\n  }\r\n\r\n  removeColumnQuery(tableName, attributeName) {\r\n    return Utils.joinSQLFragments([\r\n      'ALTER TABLE',\r\n      this.quoteTable(tableName),\r\n      'DROP COLUMN',\r\n      this.quoteIdentifier(attributeName),\r\n      ';',\r\n    ]);\r\n  }\r\n\r\n  changeColumnQuery(tableName, attributes) {\r\n    const attrString = [];\r\n    const constraintString = [];\r\n    let commentString = '';\r\n\r\n    for (const attributeName in attributes) {\r\n      const quotedAttrName = this.quoteIdentifier(attributeName);\r\n      let definition = attributes[attributeName];\r\n      if (definition.includes('COMMENT ')) {\r\n        const commentMatch = definition.match(/^(.+) (COMMENT.*)$/);\r\n        const commentText = commentMatch[2].replace('COMMENT', '').trim();\r\n        commentString += this.commentTemplate(commentText, tableName, attributeName);\r\n        // remove comment related substring from dataType\r\n        definition = commentMatch[1];\r\n      }\r\n\r\n      if (definition.includes('REFERENCES')) {\r\n        constraintString.push(`FOREIGN KEY (${quotedAttrName}) ${definition.replace(/.+?(?=REFERENCES)/, '')}`);\r\n      } else {\r\n        attrString.push(`${quotedAttrName} ${definition}`);\r\n      }\r\n    }\r\n\r\n    return Utils.joinSQLFragments([\r\n      'ALTER TABLE',\r\n      this.quoteTable(tableName),\r\n      attrString.length && `ALTER COLUMN ${attrString.join(', ')}`,\r\n      constraintString.length && `ADD ${constraintString.join(', ')}`,\r\n      ';',\r\n      commentString,\r\n    ]);\r\n  }\r\n\r\n  renameColumnQuery(tableName, attrBefore, attributes) {\r\n    const newName = Object.keys(attributes)[0];\r\n\r\n    return Utils.joinSQLFragments([\r\n      'EXEC sp_rename',\r\n      `'${this.quoteTable(tableName)}.${attrBefore}',`,\r\n      `'${newName}',`,\r\n      '\\'COLUMN\\'',\r\n      ';',\r\n    ]);\r\n  }\r\n\r\n  bulkInsertQuery(tableName, attrValueHashes, options, attributes) {\r\n    const quotedTable = this.quoteTable(tableName);\r\n    options = options || {};\r\n    attributes = attributes || {};\r\n\r\n    const tuples = [];\r\n    const allAttributes = [];\r\n    const allQueries = [];\r\n\r\n    let needIdentityInsertWrapper = false;\r\n    let outputFragment = '';\r\n\r\n    if (options.returning) {\r\n      const returnValues = this.generateReturnValues(attributes, options);\r\n\r\n      outputFragment = returnValues.outputFragment;\r\n    }\r\n\r\n    const emptyQuery = `INSERT INTO ${quotedTable}${outputFragment} DEFAULT VALUES`;\r\n\r\n    for (const attrValueHash of attrValueHashes) {\r\n      // special case for empty objects with primary keys\r\n      const fields = Object.keys(attrValueHash);\r\n      const firstAttr = attributes[fields[0]];\r\n      if (fields.length === 1 && firstAttr && firstAttr.autoIncrement && attrValueHash[fields[0]] === null) {\r\n        allQueries.push(emptyQuery);\r\n        continue;\r\n      }\r\n\r\n      // normal case\r\n      _.forOwn(attrValueHash, (value, key) => {\r\n        if (value !== null && attributes[key] && attributes[key].autoIncrement) {\r\n          needIdentityInsertWrapper = true;\r\n        }\r\n\r\n        if (!allAttributes.includes(key)) {\r\n          if (value === null && attributes[key] && attributes[key].autoIncrement) {\r\n            return;\r\n          }\r\n\r\n          allAttributes.push(key);\r\n        }\r\n      });\r\n    }\r\n\r\n    if (allAttributes.length > 0) {\r\n      for (const attrValueHash of attrValueHashes) {\r\n        tuples.push(`(${\r\n          allAttributes.map(key => this.escape(attrValueHash[key], undefined, options)).join(',')\r\n        })`);\r\n      }\r\n\r\n      const quotedAttributes = allAttributes.map(attr => this.quoteIdentifier(attr)).join(',');\r\n      allQueries.push(tupleStr => `INSERT INTO ${quotedTable} (${quotedAttributes})${outputFragment} VALUES ${tupleStr};`);\r\n    }\r\n\r\n    const commands = [];\r\n    let offset = 0;\r\n    const batch = Math.floor(250 / (allAttributes.length + 1)) + 1;\r\n    while (offset < Math.max(tuples.length, 1)) {\r\n      const tupleStr = tuples.slice(offset, Math.min(tuples.length, offset + batch));\r\n      let generatedQuery = allQueries.map(v => (typeof v === 'string' ? v : v(tupleStr))).join(';');\r\n      if (needIdentityInsertWrapper) {\r\n        generatedQuery = `SET IDENTITY_INSERT ${quotedTable} ON; ${generatedQuery}; SET IDENTITY_INSERT ${quotedTable} OFF;`;\r\n      }\r\n\r\n      commands.push(generatedQuery);\r\n      offset += batch;\r\n    }\r\n\r\n    return commands.join(';');\r\n  }\r\n\r\n  updateQuery(tableName, attrValueHash, where, options = {}, attributes) {\r\n    const sql = super.updateQuery(tableName, attrValueHash, where, options, attributes);\r\n\r\n    if (options.limit) {\r\n      const updateArgs = `UPDATE TOP(${this.escape(options.limit, undefined, options)})`;\r\n      sql.query = sql.query.replace('UPDATE', updateArgs);\r\n    }\r\n\r\n    return sql;\r\n  }\r\n\r\n  upsertQuery(tableName, insertValues, updateValues, where, model, options) {\r\n    const targetTableAlias = this.quoteTable(`${tableName}_target`);\r\n    const sourceTableAlias = this.quoteTable(`${tableName}_source`);\r\n    const primaryKeysAttrs = [];\r\n    const identityAttrs = [];\r\n    const uniqueAttrs = [];\r\n    const tableNameQuoted = this.quoteTable(tableName);\r\n    let needIdentityInsertWrapper = false;\r\n\r\n    // Obtain primaryKeys, uniquekeys and identity attrs from rawAttributes as model is not passed\r\n    for (const key in model.rawAttributes) {\r\n      if (model.rawAttributes[key].primaryKey) {\r\n        primaryKeysAttrs.push(model.rawAttributes[key].field || key);\r\n      }\r\n\r\n      if (model.rawAttributes[key].unique) {\r\n        uniqueAttrs.push(model.rawAttributes[key].field || key);\r\n      }\r\n\r\n      if (model.rawAttributes[key].autoIncrement) {\r\n        identityAttrs.push(model.rawAttributes[key].field || key);\r\n      }\r\n    }\r\n\r\n    // Add unique indexes defined by indexes option to uniqueAttrs\r\n    for (const index of model._indexes) {\r\n      if (index.unique && index.fields) {\r\n        for (const field of index.fields) {\r\n          const fieldName = typeof field === 'string' ? field : field.name || field.attribute;\r\n          if (!uniqueAttrs.includes(fieldName) && model.rawAttributes[fieldName]) {\r\n            uniqueAttrs.push(fieldName);\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    const updateKeys = Object.keys(updateValues);\r\n    const insertKeys = Object.keys(insertValues);\r\n    const insertKeysQuoted = insertKeys.map(key => this.quoteIdentifier(key)).join(', ');\r\n    const insertValuesEscaped = insertKeys.map(key => this.escape(insertValues[key], undefined, options)).join(', ');\r\n    const sourceTableQuery = `VALUES(${insertValuesEscaped})`; // Virtual Table\r\n    let joinCondition;\r\n\r\n    // IDENTITY_INSERT Condition\r\n    for (const key of identityAttrs) {\r\n      if (insertValues[key] && insertValues[key] !== null) {\r\n        needIdentityInsertWrapper = true;\r\n        /*\r\n         * IDENTITY_INSERT Column Cannot be updated, only inserted\r\n         * http://stackoverflow.com/a/30176254/2254360\r\n         */\r\n      }\r\n    }\r\n\r\n    // Filter NULL Clauses\r\n    const clauses = where[Op.or].filter(clause => {\r\n      let valid = true;\r\n      /*\r\n       * Exclude NULL Composite PK/UK. Partial Composite clauses should also be excluded as it doesn't guarantee a single row\r\n       */\r\n      for (const key of Object.keys(clause)) {\r\n        if (clause[key] == null) {\r\n          valid = false;\r\n          break;\r\n        }\r\n      }\r\n\r\n      return valid;\r\n    });\r\n\r\n    /*\r\n     * Generate ON condition using PK(s).\r\n     * If not, generate using UK(s). Else throw error\r\n     */\r\n    const getJoinSnippet = array => {\r\n      return array.map(key => {\r\n        key = this.quoteIdentifier(key);\r\n\r\n        return `${targetTableAlias}.${key} = ${sourceTableAlias}.${key}`;\r\n      });\r\n    };\r\n\r\n    if (clauses.length === 0) {\r\n      throw new Error('Primary Key or Unique key should be passed to upsert query');\r\n    } else {\r\n      // Search for primary key attribute in clauses -- Model can have two separate unique keys\r\n      for (const key in clauses) {\r\n        const keys = Object.keys(clauses[key]);\r\n        if (primaryKeysAttrs.includes(keys[0])) {\r\n          joinCondition = getJoinSnippet(primaryKeysAttrs).join(' AND ');\r\n          break;\r\n        }\r\n      }\r\n\r\n      if (!joinCondition) {\r\n        joinCondition = getJoinSnippet(uniqueAttrs).join(' AND ');\r\n      }\r\n    }\r\n\r\n    // Remove the IDENTITY_INSERT Column from update\r\n    const filteredUpdateClauses = updateKeys.filter(key => !identityAttrs.includes(key))\r\n      .map(key => {\r\n        const value = this.escape(updateValues[key], undefined, options);\r\n        key = this.quoteIdentifier(key);\r\n\r\n        return `${targetTableAlias}.${key} = ${value}`;\r\n      });\r\n    const updateSnippet = filteredUpdateClauses.length > 0 ? `WHEN MATCHED THEN UPDATE SET ${filteredUpdateClauses.join(', ')}` : '';\r\n\r\n    const insertSnippet = `(${insertKeysQuoted}) VALUES(${insertValuesEscaped})`;\r\n\r\n    let query = `MERGE INTO ${tableNameQuoted} WITH(HOLDLOCK) AS ${targetTableAlias} USING (${sourceTableQuery}) AS ${sourceTableAlias}(${insertKeysQuoted}) ON ${joinCondition}`;\r\n    query += ` ${updateSnippet} WHEN NOT MATCHED THEN INSERT ${insertSnippet} OUTPUT $action, INSERTED.*;`;\r\n    if (needIdentityInsertWrapper) {\r\n      query = `SET IDENTITY_INSERT ${tableNameQuoted} ON; ${query} SET IDENTITY_INSERT ${tableNameQuoted} OFF;`;\r\n    }\r\n\r\n    return query;\r\n  }\r\n\r\n  truncateTableQuery(tableName) {\r\n    return `TRUNCATE TABLE ${this.quoteTable(tableName)}`;\r\n  }\r\n\r\n  deleteQuery(tableName, where, options = {}, model) {\r\n    const table = this.quoteTable(tableName);\r\n    const whereClause = this.getWhereConditions(where, null, model, options);\r\n\r\n    return Utils.joinSQLFragments([\r\n      'DELETE',\r\n      options.limit && `TOP(${this.escape(options.limit, undefined, options)})`,\r\n      'FROM',\r\n      table,\r\n      whereClause && `WHERE ${whereClause}`,\r\n      ';',\r\n      'SELECT @@ROWCOUNT AS AFFECTEDROWS',\r\n      ';',\r\n    ]);\r\n  }\r\n\r\n  showIndexesQuery(tableName) {\r\n    return `EXEC sys.sp_helpindex @objname = N'${this.quoteTable(tableName)}';`;\r\n  }\r\n\r\n  showConstraintsQuery(tableName) {\r\n    return `EXEC sp_helpconstraint @objname = ${this.escape(this.quoteTable(tableName))};`;\r\n  }\r\n\r\n  removeIndexQuery(tableName, indexNameOrAttributes) {\r\n    let indexName = indexNameOrAttributes;\r\n\r\n    if (typeof indexName !== 'string') {\r\n      indexName = Utils.underscore(`${tableName}_${indexNameOrAttributes.join('_')}`);\r\n    }\r\n\r\n    return `DROP INDEX ${this.quoteIdentifiers(indexName)} ON ${this.quoteIdentifiers(tableName)}`;\r\n  }\r\n\r\n  attributeToSQL(attribute, options) {\r\n    if (!_.isPlainObject(attribute)) {\r\n      attribute = {\r\n        type: attribute,\r\n      };\r\n    }\r\n\r\n    // handle self referential constraints\r\n    if (attribute.references && attribute.Model && attribute.Model.tableName === attribute.references.model) {\r\n      this.sequelize.log('MSSQL does not support self referencial constraints, '\r\n          + 'we will remove it but we recommend restructuring your query');\r\n      attribute.onDelete = '';\r\n      attribute.onUpdate = '';\r\n    }\r\n\r\n    let template;\r\n\r\n    if (attribute.type instanceof DataTypes.ENUM) {\r\n      if (attribute.type.values && !attribute.values) {\r\n        attribute.values = attribute.type.values;\r\n      }\r\n\r\n      // enums are a special case\r\n      template = attribute.type.toSql();\r\n      template += ` CHECK (${this.quoteIdentifier(attribute.field)} IN(${attribute.values.map(value => {\r\n        return this.escape(value, undefined, options);\r\n      }).join(', ')}))`;\r\n\r\n      return template;\r\n    }\r\n\r\n    template = attribute.type.toString();\r\n\r\n    if (attribute.allowNull === false) {\r\n      template += ' NOT NULL';\r\n    } else if (!attribute.primaryKey && !Utils.defaultValueSchemable(attribute.defaultValue)) {\r\n      template += ' NULL';\r\n    }\r\n\r\n    if (attribute.autoIncrement) {\r\n      template += ' IDENTITY(1,1)';\r\n    }\r\n\r\n    // Blobs/texts cannot have a defaultValue\r\n    if (attribute.type !== 'TEXT' && attribute.type._binary !== true\r\n        && Utils.defaultValueSchemable(attribute.defaultValue)) {\r\n      template += ` DEFAULT ${this.escape(attribute.defaultValue, undefined, options)}`;\r\n    }\r\n\r\n    if (attribute.unique === true) {\r\n      template += ' UNIQUE';\r\n    }\r\n\r\n    if (attribute.primaryKey) {\r\n      template += ' PRIMARY KEY';\r\n    }\r\n\r\n    if (attribute.references) {\r\n      template += ` REFERENCES ${this.quoteTable(attribute.references.model)}`;\r\n\r\n      if (attribute.references.key) {\r\n        template += ` (${this.quoteIdentifier(attribute.references.key)})`;\r\n      } else {\r\n        template += ` (${this.quoteIdentifier('id')})`;\r\n      }\r\n\r\n      if (attribute.onDelete) {\r\n        template += ` ON DELETE ${attribute.onDelete.toUpperCase()}`;\r\n      }\r\n\r\n      if (attribute.onUpdate) {\r\n        template += ` ON UPDATE ${attribute.onUpdate.toUpperCase()}`;\r\n      }\r\n    }\r\n\r\n    if (attribute.comment && typeof attribute.comment === 'string') {\r\n      template += ` COMMENT ${attribute.comment}`;\r\n    }\r\n\r\n    return template;\r\n  }\r\n\r\n  attributesToSQL(attributes, options) {\r\n    const result = {};\r\n    const existingConstraints = [];\r\n    let key;\r\n    let attribute;\r\n\r\n    for (key in attributes) {\r\n      attribute = attributes[key];\r\n\r\n      if (attribute.references) {\r\n        if (existingConstraints.includes(attribute.references.model.toString())) {\r\n          // no cascading constraints to a table more than once\r\n          attribute.onDelete = '';\r\n          attribute.onUpdate = '';\r\n        } else {\r\n          existingConstraints.push(attribute.references.model.toString());\r\n\r\n          // NOTE: this really just disables cascading updates for all\r\n          //       definitions. Can be made more robust to support the\r\n          //       few cases where MSSQL actually supports them\r\n          attribute.onUpdate = '';\r\n        }\r\n\r\n      }\r\n\r\n      if (key && !attribute.field) {\r\n        attribute.field = key;\r\n      }\r\n\r\n      result[attribute.field || key] = this.attributeToSQL(attribute, options);\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  createTrigger() {\r\n    throwMethodUndefined('createTrigger');\r\n  }\r\n\r\n  dropTrigger() {\r\n    throwMethodUndefined('dropTrigger');\r\n  }\r\n\r\n  renameTrigger() {\r\n    throwMethodUndefined('renameTrigger');\r\n  }\r\n\r\n  createFunction() {\r\n    throwMethodUndefined('createFunction');\r\n  }\r\n\r\n  dropFunction() {\r\n    throwMethodUndefined('dropFunction');\r\n  }\r\n\r\n  renameFunction() {\r\n    throwMethodUndefined('renameFunction');\r\n  }\r\n\r\n  /**\r\n   * Generate common SQL prefix for ForeignKeysQuery.\r\n   *\r\n   * @param {string} catalogName\r\n   * @returns {string}\r\n   */\r\n  _getForeignKeysQueryPrefix(catalogName) {\r\n    return `SELECT constraint_name = OBJ.NAME, constraintName = OBJ.NAME, ${\r\n      catalogName ? `constraintCatalog = '${catalogName}', ` : ''\r\n    }constraintSchema = SCHEMA_NAME(OBJ.SCHEMA_ID), `\r\n      + 'tableName = TB.NAME, '\r\n      + `tableSchema = SCHEMA_NAME(TB.SCHEMA_ID), ${\r\n        catalogName ? `tableCatalog = '${catalogName}', ` : ''\r\n      }columnName = COL.NAME, `\r\n      + `referencedTableSchema = SCHEMA_NAME(RTB.SCHEMA_ID), ${\r\n        catalogName ? `referencedCatalog = '${catalogName}', ` : ''\r\n      }referencedTableName = RTB.NAME, `\r\n      + 'referencedColumnName = RCOL.NAME '\r\n      + 'FROM sys.foreign_key_columns FKC '\r\n      + 'INNER JOIN sys.objects OBJ ON OBJ.OBJECT_ID = FKC.CONSTRAINT_OBJECT_ID '\r\n      + 'INNER JOIN sys.tables TB ON TB.OBJECT_ID = FKC.PARENT_OBJECT_ID '\r\n      + 'INNER JOIN sys.columns COL ON COL.COLUMN_ID = PARENT_COLUMN_ID AND COL.OBJECT_ID = TB.OBJECT_ID '\r\n      + 'INNER JOIN sys.tables RTB ON RTB.OBJECT_ID = FKC.REFERENCED_OBJECT_ID '\r\n      + 'INNER JOIN sys.columns RCOL ON RCOL.COLUMN_ID = REFERENCED_COLUMN_ID AND RCOL.OBJECT_ID = RTB.OBJECT_ID';\r\n  }\r\n\r\n  /**\r\n   * Generates an SQL query that returns all foreign keys details of a table.\r\n   *\r\n   * @param {string|object} table\r\n   * @param {string} catalogName database name\r\n   * @returns {string}\r\n   */\r\n  getForeignKeysQuery(table, catalogName) {\r\n    const tableName = table.tableName || table;\r\n    let sql = `${this._getForeignKeysQueryPrefix(catalogName)\r\n    } WHERE TB.NAME =${wrapSingleQuote(tableName)}`;\r\n\r\n    if (table.schema) {\r\n      sql += ` AND SCHEMA_NAME(TB.SCHEMA_ID) =${wrapSingleQuote(table.schema)}`;\r\n    }\r\n\r\n    return sql;\r\n  }\r\n\r\n  getForeignKeyQuery(table, attributeName) {\r\n    const tableName = table.tableName || table;\r\n\r\n    return Utils.joinSQLFragments([\r\n      this._getForeignKeysQueryPrefix(),\r\n      'WHERE',\r\n      `TB.NAME =${wrapSingleQuote(tableName)}`,\r\n      'AND',\r\n      `COL.NAME =${wrapSingleQuote(attributeName)}`,\r\n      table.schema && `AND SCHEMA_NAME(TB.SCHEMA_ID) =${wrapSingleQuote(table.schema)}`,\r\n    ]);\r\n  }\r\n\r\n  getPrimaryKeyConstraintQuery(table, attributeName) {\r\n    const tableName = wrapSingleQuote(table.tableName || table);\r\n\r\n    return Utils.joinSQLFragments([\r\n      'SELECT K.TABLE_NAME AS tableName,',\r\n      'K.COLUMN_NAME AS columnName,',\r\n      'K.CONSTRAINT_NAME AS constraintName',\r\n      'FROM INFORMATION_SCHEMA.TABLE_CONSTRAINTS AS C',\r\n      'JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE AS K',\r\n      'ON C.TABLE_NAME = K.TABLE_NAME',\r\n      'AND C.CONSTRAINT_CATALOG = K.CONSTRAINT_CATALOG',\r\n      'AND C.CONSTRAINT_SCHEMA = K.CONSTRAINT_SCHEMA',\r\n      'AND C.CONSTRAINT_NAME = K.CONSTRAINT_NAME',\r\n      'WHERE C.CONSTRAINT_TYPE = \\'PRIMARY KEY\\'',\r\n      `AND K.COLUMN_NAME = ${wrapSingleQuote(attributeName)}`,\r\n      `AND K.TABLE_NAME = ${tableName}`,\r\n      ';',\r\n    ]);\r\n  }\r\n\r\n  dropForeignKeyQuery(tableName, foreignKey) {\r\n    return Utils.joinSQLFragments([\r\n      'ALTER TABLE',\r\n      this.quoteTable(tableName),\r\n      'DROP',\r\n      this.quoteIdentifier(foreignKey),\r\n    ]);\r\n  }\r\n\r\n  getDefaultConstraintQuery(tableName, attributeName) {\r\n    const quotedTable = this.quoteTable(tableName);\r\n\r\n    return Utils.joinSQLFragments([\r\n      'SELECT name FROM sys.default_constraints',\r\n      `WHERE PARENT_OBJECT_ID = OBJECT_ID('${quotedTable}', 'U')`,\r\n      `AND PARENT_COLUMN_ID = (SELECT column_id FROM sys.columns WHERE NAME = ('${attributeName}')`,\r\n      `AND object_id = OBJECT_ID('${quotedTable}', 'U'))`,\r\n      ';',\r\n    ]);\r\n  }\r\n\r\n  dropConstraintQuery(tableName, constraintName) {\r\n    return Utils.joinSQLFragments([\r\n      'ALTER TABLE',\r\n      this.quoteTable(tableName),\r\n      'DROP CONSTRAINT',\r\n      this.quoteIdentifier(constraintName),\r\n      ';',\r\n    ]);\r\n  }\r\n\r\n  setIsolationLevelQuery() {}\r\n\r\n  generateTransactionId() {\r\n    return randomBytes(10).toString('hex');\r\n  }\r\n\r\n  startTransactionQuery(transaction) {\r\n    if (transaction.parent) {\r\n      return `SAVE TRANSACTION ${this.quoteIdentifier(transaction.name)};`;\r\n    }\r\n\r\n    return 'BEGIN TRANSACTION;';\r\n  }\r\n\r\n  commitTransactionQuery(transaction) {\r\n    if (transaction.parent) {\r\n      return;\r\n    }\r\n\r\n    return 'COMMIT TRANSACTION;';\r\n  }\r\n\r\n  rollbackTransactionQuery(transaction) {\r\n    if (transaction.parent) {\r\n      return `ROLLBACK TRANSACTION ${this.quoteIdentifier(transaction.name)};`;\r\n    }\r\n\r\n    return 'ROLLBACK TRANSACTION;';\r\n  }\r\n\r\n  selectFromTableFragment(options, model, attributes, tables, mainTableAs, where) {\r\n    this._throwOnEmptyAttributes(attributes, { modelName: model && model.name, as: mainTableAs });\r\n\r\n    const dbVersion = this.sequelize.options.databaseVersion;\r\n    const isSQLServer2008 = semver.valid(dbVersion) && semver.lt(dbVersion, '11.0.0');\r\n\r\n    if (isSQLServer2008 && options.offset) {\r\n      // For earlier versions of SQL server, we need to nest several queries\r\n      // in order to emulate the OFFSET behavior.\r\n      //\r\n      // 1. The outermost query selects all items from the inner query block.\r\n      //    This is due to a limitation in SQL server with the use of computed\r\n      //    columns (e.g. SELECT ROW_NUMBER()...AS x) in WHERE clauses.\r\n      // 2. The next query handles the LIMIT and OFFSET behavior by getting\r\n      //    the TOP N rows of the query where the row number is > OFFSET\r\n      // 3. The innermost query is the actual set we want information from\r\n\r\n      const offset = options.offset || 0;\r\n      const isSubQuery = options.hasIncludeWhere || options.hasIncludeRequired || options.hasMultiAssociation;\r\n      let orders = { mainQueryOrder: [] };\r\n      if (options.order) {\r\n        orders = this.getQueryOrders(options, model, isSubQuery);\r\n      }\r\n\r\n      if (orders.mainQueryOrder.length === 0) {\r\n        orders.mainQueryOrder.push(this.quoteIdentifier(model.primaryKeyField));\r\n      }\r\n\r\n      const tmpTable = mainTableAs || 'OffsetTable';\r\n\r\n      if (options.include) {\r\n        const subQuery = options.subQuery === undefined ? options.limit && options.hasMultiAssociation : options.subQuery;\r\n        const mainTable = {\r\n          name: mainTableAs,\r\n          quotedName: null,\r\n          as: null,\r\n          model,\r\n        };\r\n        const topLevelInfo = {\r\n          names: mainTable,\r\n          options,\r\n          subQuery,\r\n        };\r\n\r\n        let mainJoinQueries = [];\r\n        for (const include of options.include) {\r\n          if (include.separate) {\r\n            continue;\r\n          }\r\n\r\n          const joinQueries = this.generateInclude(include, { externalAs: mainTableAs, internalAs: mainTableAs }, topLevelInfo);\r\n          mainJoinQueries = mainJoinQueries.concat(joinQueries.mainQuery);\r\n        }\r\n\r\n        return Utils.joinSQLFragments([\r\n          'SELECT TOP 100 PERCENT',\r\n          attributes.join(', '),\r\n          'FROM (',\r\n          [\r\n            'SELECT',\r\n            options.limit && `TOP ${options.limit}`,\r\n            '* FROM (',\r\n            [\r\n              'SELECT ROW_NUMBER() OVER (',\r\n              [\r\n                'ORDER BY',\r\n                orders.mainQueryOrder.join(', '),\r\n              ],\r\n              `) as row_num, ${tmpTable}.* FROM (`,\r\n              [\r\n                'SELECT DISTINCT',\r\n                `${tmpTable}.* FROM ${tables} AS ${tmpTable}`,\r\n                mainJoinQueries,\r\n                where && `WHERE ${where}`,\r\n              ],\r\n              `) AS ${tmpTable}`,\r\n            ],\r\n            `) AS ${tmpTable} WHERE row_num > ${offset}`,\r\n          ],\r\n          `) AS ${tmpTable}`,\r\n        ]);\r\n      }\r\n\r\n      return Utils.joinSQLFragments([\r\n        'SELECT TOP 100 PERCENT',\r\n        attributes.join(', '),\r\n        'FROM (',\r\n        [\r\n          'SELECT',\r\n          options.limit && `TOP ${options.limit}`,\r\n          '* FROM (',\r\n          [\r\n            'SELECT ROW_NUMBER() OVER (',\r\n            [\r\n              'ORDER BY',\r\n              orders.mainQueryOrder.join(', '),\r\n            ],\r\n            `) as row_num, * FROM ${tables} AS ${tmpTable}`,\r\n            where && `WHERE ${where}`,\r\n          ],\r\n          `) AS ${tmpTable} WHERE row_num > ${offset}`,\r\n        ],\r\n        `) AS ${tmpTable}`,\r\n      ]);\r\n    }\r\n\r\n    return Utils.joinSQLFragments([\r\n      'SELECT',\r\n      isSQLServer2008 && options.limit && `TOP ${options.limit}`,\r\n      attributes.join(', '),\r\n      `FROM ${tables}`,\r\n      mainTableAs && `AS ${mainTableAs}`,\r\n      options.tableHint && TableHints[options.tableHint] && `WITH (${TableHints[options.tableHint]})`,\r\n    ]);\r\n  }\r\n\r\n  addLimitAndOffset(options, model) {\r\n    // Skip handling of limit and offset as postfixes for older SQL Server versions\r\n    if (semver.valid(this.sequelize.options.databaseVersion) && semver.lt(this.sequelize.options.databaseVersion, '11.0.0')) {\r\n      return '';\r\n    }\r\n\r\n    const offset = options.offset || 0;\r\n    const isSubQuery = options.subQuery === undefined\r\n      ? options.hasIncludeWhere || options.hasIncludeRequired || options.hasMultiAssociation\r\n      : options.subQuery;\r\n\r\n    let fragment = '';\r\n    let orders = {};\r\n\r\n    if (options.order) {\r\n      orders = this.getQueryOrders(options, model, isSubQuery);\r\n    }\r\n\r\n    if (options.limit || options.offset) {\r\n      // TODO: document why this is adding the primary key of the model in ORDER BY\r\n      //  if options.include is set\r\n      if (!options.order || options.order.length === 0 || options.include && orders.subQueryOrder.length === 0) {\r\n        const tablePkFragment = `${this.quoteTable(options.tableAs || model.name)}.${this.quoteIdentifier(model.primaryKeyField)}`;\r\n        if (!options.order || options.order.length === 0) {\r\n          fragment += ` ORDER BY ${tablePkFragment}`;\r\n        } else {\r\n          const orderFieldNames = _.map(options.order, order => order[0]);\r\n          const primaryKeyFieldAlreadyPresent = _.includes(orderFieldNames, model.primaryKeyField);\r\n\r\n          if (!primaryKeyFieldAlreadyPresent) {\r\n            fragment += options.order && !isSubQuery ? ', ' : ' ORDER BY ';\r\n            fragment += tablePkFragment;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (options.offset || options.limit) {\r\n        fragment += ` OFFSET ${this.escape(offset, undefined, options)} ROWS`;\r\n      }\r\n\r\n      if (options.limit) {\r\n        fragment += ` FETCH NEXT ${this.escape(options.limit, undefined, options)} ROWS ONLY`;\r\n      }\r\n    }\r\n\r\n    return fragment;\r\n  }\r\n\r\n  booleanValue(value) {\r\n    return value ? 1 : 0;\r\n  }\r\n\r\n  /**\r\n   * Quote identifier in sql clause\r\n   *\r\n   * @param {string} identifier\r\n   * @param {boolean} force\r\n   *\r\n   * @returns {string}\r\n   */\r\n  quoteIdentifier(identifier, force) {\r\n    return `[${identifier.replace(/['[\\]]+/g, '')}]`;\r\n  }\r\n}\r\n\r\n// private methods\r\nfunction wrapSingleQuote(identifier) {\r\n  return Utils.addTicks(Utils.removeTicks(identifier, '\\''), '\\'');\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
