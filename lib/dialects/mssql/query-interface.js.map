{
  "version": 3,
  "sources": ["../../../src/dialects/mssql/query-interface.js"],
  "sourcesContent": ["'use strict';\r\n\r\nimport { assertNoReservedBind } from '../../utils/sql';\r\n\r\nconst _ = require('lodash');\r\n\r\nconst Utils = require('../../utils');\r\nconst { QueryTypes } = require('../../query-types');\r\nconst { Op } = require('../../operators');\r\nconst { QueryInterface } = require('../abstract/query-interface');\r\n\r\n/**\r\n * The interface that Sequelize uses to talk with MSSQL database\r\n */\r\nexport class MsSqlQueryInterface extends QueryInterface {\r\n  /**\r\n  * A wrapper that fixes MSSQL's inability to cleanly remove columns from existing tables if they have a default constraint.\r\n  *\r\n  * @override\r\n  */\r\n  async removeColumn(tableName, attributeName, options) {\r\n    options = { raw: true, ...options };\r\n\r\n    const findConstraintSql = this.queryGenerator.getDefaultConstraintQuery(tableName, attributeName);\r\n    const [results0] = await this.sequelize.queryRaw(findConstraintSql, options);\r\n    if (results0.length > 0) {\r\n      // No default constraint found -- we can cleanly remove the column\r\n      const dropConstraintSql = this.queryGenerator.dropConstraintQuery(tableName, results0[0].name);\r\n      await this.sequelize.queryRaw(dropConstraintSql, options);\r\n    }\r\n\r\n    const findForeignKeySql = this.queryGenerator.getForeignKeyQuery(tableName, attributeName);\r\n    const [results] = await this.sequelize.queryRaw(findForeignKeySql, options);\r\n    if (results.length > 0) {\r\n      // No foreign key constraints found, so we can remove the column\r\n      const dropForeignKeySql = this.queryGenerator.dropForeignKeyQuery(tableName, results[0].constraint_name);\r\n      await this.sequelize.queryRaw(dropForeignKeySql, options);\r\n    }\r\n\r\n    // Check if the current column is a primaryKey\r\n    const primaryKeyConstraintSql = this.queryGenerator.getPrimaryKeyConstraintQuery(tableName, attributeName);\r\n    const [result] = await this.sequelize.queryRaw(primaryKeyConstraintSql, options);\r\n    if (result.length > 0) {\r\n      const dropConstraintSql = this.queryGenerator.dropConstraintQuery(tableName, result[0].constraintName);\r\n      await this.sequelize.queryRaw(dropConstraintSql, options);\r\n    }\r\n\r\n    const removeSql = this.queryGenerator.removeColumnQuery(tableName, attributeName);\r\n\r\n    return this.sequelize.queryRaw(removeSql, options);\r\n  }\r\n\r\n  /**\r\n   * @override\r\n   */\r\n  async upsert(tableName, insertValues, updateValues, where, options) {\r\n    if (options.bind) {\r\n      assertNoReservedBind(options.bind);\r\n    }\r\n\r\n    const model = options.model;\r\n    const wheres = [];\r\n\r\n    options = { ...options };\r\n\r\n    if (!Utils.isWhereEmpty(where)) {\r\n      wheres.push(where);\r\n    }\r\n\r\n    // Lets combine unique keys and indexes into one\r\n    let indexes = Object.values(model.uniqueKeys).map(item => item.fields);\r\n    indexes = indexes.concat(Object.values(model._indexes).filter(item => item.unique).map(item => item.fields));\r\n\r\n    const attributes = Object.keys(insertValues);\r\n    for (const index of indexes) {\r\n      if (_.intersection(attributes, index).length === index.length) {\r\n        where = {};\r\n        for (const field of index) {\r\n          where[field] = insertValues[field];\r\n        }\r\n\r\n        wheres.push(where);\r\n      }\r\n    }\r\n\r\n    where = { [Op.or]: wheres };\r\n\r\n    options.type = QueryTypes.UPSERT;\r\n    options.raw = true;\r\n\r\n    const sql = this.queryGenerator.upsertQuery(tableName, insertValues, updateValues, where, model, options);\r\n\r\n    // unlike bind, replacements are handled by QueryGenerator, not QueryRaw, and queryRaw will throw if we use the option\r\n    delete options.replacements;\r\n\r\n    return await this.sequelize.queryRaw(sql, options);\r\n  }\r\n}\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,iBAAqC;AAErC,MAAM,IAAI,QAAQ,QAAQ;AAE1B,MAAM,QAAQ,QAAQ,aAAa;AACnC,MAAM,EAAE,eAAe,QAAQ,mBAAmB;AAClD,MAAM,EAAE,OAAO,QAAQ,iBAAiB;AACxC,MAAM,EAAE,mBAAmB,QAAQ,6BAA6B;AAKzD,MAAM,4BAA4B,eAAe;AAAA,QAMhD,aAAa,WAAW,eAAe,SAAS;AACpD,cAAU,iBAAE,KAAK,QAAS;AAE1B,UAAM,oBAAoB,KAAK,eAAe,0BAA0B,WAAW,aAAa;AAChG,UAAM,CAAC,YAAY,MAAM,KAAK,UAAU,SAAS,mBAAmB,OAAO;AAC3E,QAAI,SAAS,SAAS,GAAG;AAEvB,YAAM,oBAAoB,KAAK,eAAe,oBAAoB,WAAW,SAAS,GAAG,IAAI;AAC7F,YAAM,KAAK,UAAU,SAAS,mBAAmB,OAAO;AAAA,IAC1D;AAEA,UAAM,oBAAoB,KAAK,eAAe,mBAAmB,WAAW,aAAa;AACzF,UAAM,CAAC,WAAW,MAAM,KAAK,UAAU,SAAS,mBAAmB,OAAO;AAC1E,QAAI,QAAQ,SAAS,GAAG;AAEtB,YAAM,oBAAoB,KAAK,eAAe,oBAAoB,WAAW,QAAQ,GAAG,eAAe;AACvG,YAAM,KAAK,UAAU,SAAS,mBAAmB,OAAO;AAAA,IAC1D;AAGA,UAAM,0BAA0B,KAAK,eAAe,6BAA6B,WAAW,aAAa;AACzG,UAAM,CAAC,UAAU,MAAM,KAAK,UAAU,SAAS,yBAAyB,OAAO;AAC/E,QAAI,OAAO,SAAS,GAAG;AACrB,YAAM,oBAAoB,KAAK,eAAe,oBAAoB,WAAW,OAAO,GAAG,cAAc;AACrG,YAAM,KAAK,UAAU,SAAS,mBAAmB,OAAO;AAAA,IAC1D;AAEA,UAAM,YAAY,KAAK,eAAe,kBAAkB,WAAW,aAAa;AAEhF,WAAO,KAAK,UAAU,SAAS,WAAW,OAAO;AAAA,EACnD;AAAA,QAKM,OAAO,WAAW,cAAc,cAAc,OAAO,SAAS;AAClE,QAAI,QAAQ,MAAM;AAChB,2CAAqB,QAAQ,IAAI;AAAA,IACnC;AAEA,UAAM,QAAQ,QAAQ;AACtB,UAAM,SAAS,CAAC;AAEhB,cAAU,mBAAK;AAEf,QAAI,CAAC,MAAM,aAAa,KAAK,GAAG;AAC9B,aAAO,KAAK,KAAK;AAAA,IACnB;AAGA,QAAI,UAAU,OAAO,OAAO,MAAM,UAAU,EAAE,IAAI,UAAQ,KAAK,MAAM;AACrE,cAAU,QAAQ,OAAO,OAAO,OAAO,MAAM,QAAQ,EAAE,OAAO,UAAQ,KAAK,MAAM,EAAE,IAAI,UAAQ,KAAK,MAAM,CAAC;AAE3G,UAAM,aAAa,OAAO,KAAK,YAAY;AAC3C,eAAW,SAAS,SAAS;AAC3B,UAAI,EAAE,aAAa,YAAY,KAAK,EAAE,WAAW,MAAM,QAAQ;AAC7D,gBAAQ,CAAC;AACT,mBAAW,SAAS,OAAO;AACzB,gBAAM,SAAS,aAAa;AAAA,QAC9B;AAEA,eAAO,KAAK,KAAK;AAAA,MACnB;AAAA,IACF;AAEA,YAAQ,GAAG,GAAG,KAAK,OAAO;AAE1B,YAAQ,OAAO,WAAW;AAC1B,YAAQ,MAAM;AAEd,UAAM,MAAM,KAAK,eAAe,YAAY,WAAW,cAAc,cAAc,OAAO,OAAO,OAAO;AAGxG,WAAO,QAAQ;AAEf,WAAO,MAAM,KAAK,UAAU,SAAS,KAAK,OAAO;AAAA,EACnD;AACF;",
  "names": []
}
