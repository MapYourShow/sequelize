{
  "version": 3,
  "sources": ["../../../src/dialects/mssql/connection-manager.js"],
  "sourcesContent": ["'use strict';\r\n\r\nconst { ConnectionManager } = require('../abstract/connection-manager');\r\nconst { AsyncQueue } = require('./async-queue');\r\nconst { logger } = require('../../utils/logger');\r\nconst sequelizeErrors = require('../../errors');\r\nconst DataTypes = require('../../data-types').mssql;\r\nconst parserStore = require('../parserStore')('mssql');\r\n\r\nconst debug = logger.debugContext('connection:mssql');\r\nconst debugTedious = logger.debugContext('connection:mssql:tedious');\r\n\r\nexport class MsSqlConnectionManager extends ConnectionManager {\r\n  constructor(dialect, sequelize) {\r\n    sequelize.config.port = sequelize.config.port || 1433;\r\n    super(dialect, sequelize);\r\n    this.lib = this._loadDialectModule('tedious');\r\n    this.refreshTypeParser(DataTypes);\r\n  }\r\n\r\n  _refreshTypeParser(dataType) {\r\n    parserStore.refresh(dataType);\r\n  }\r\n\r\n  _clearTypeParser() {\r\n    parserStore.clear();\r\n  }\r\n\r\n  async connect(config) {\r\n    const connectionConfig = {\r\n      server: config.host,\r\n      authentication: {\r\n        type: 'default',\r\n        options: {\r\n          userName: config.username || undefined,\r\n          password: config.password || undefined,\r\n        },\r\n      },\r\n      options: {\r\n        port: Number.parseInt(config.port, 10),\r\n        database: config.database,\r\n        trustServerCertificate: true,\r\n      },\r\n    };\r\n\r\n    if (config.dialectOptions) {\r\n      // only set port if no instance name was provided\r\n      if (\r\n        config.dialectOptions.options\r\n        && config.dialectOptions.options.instanceName\r\n      ) {\r\n        delete connectionConfig.options.port;\r\n      }\r\n\r\n      if (config.dialectOptions.authentication) {\r\n        Object.assign(connectionConfig.authentication, config.dialectOptions.authentication);\r\n      }\r\n\r\n      Object.assign(connectionConfig.options, config.dialectOptions.options);\r\n    }\r\n\r\n    try {\r\n      return await new Promise((resolve, reject) => {\r\n        const connection = new this.lib.Connection(connectionConfig);\r\n        if (connection.state === connection.STATE.INITIALIZED) {\r\n          connection.connect();\r\n        }\r\n\r\n        connection.queue = new AsyncQueue();\r\n        connection.lib = this.lib;\r\n\r\n        const connectHandler = error => {\r\n          connection.removeListener('end', endHandler);\r\n          connection.removeListener('error', errorHandler);\r\n\r\n          if (error) {\r\n            return reject(error);\r\n          }\r\n\r\n          debug('connection acquired');\r\n          resolve(connection);\r\n        };\r\n\r\n        const endHandler = () => {\r\n          connection.removeListener('connect', connectHandler);\r\n          connection.removeListener('error', errorHandler);\r\n          reject(new Error('Connection was closed by remote server'));\r\n        };\r\n\r\n        const errorHandler = error => {\r\n          connection.removeListener('connect', connectHandler);\r\n          connection.removeListener('end', endHandler);\r\n          reject(error);\r\n        };\r\n\r\n        connection.once('error', errorHandler);\r\n        connection.once('end', endHandler);\r\n        connection.once('connect', connectHandler);\r\n\r\n        /*\r\n         * Permanently attach this event before connection is even acquired\r\n         * tedious sometime emits error even after connect(with error).\r\n         *\r\n         * If we dont attach this even that unexpected error event will crash node process\r\n         *\r\n         * E.g. connectTimeout is set higher than requestTimeout\r\n         */\r\n        connection.on('error', error => {\r\n          switch (error.code) {\r\n            case 'ESOCKET':\r\n            case 'ECONNRESET':\r\n              this.pool.destroy(connection);\r\n          }\r\n        });\r\n\r\n        if (config.dialectOptions && config.dialectOptions.debug) {\r\n          connection.on('debug', debugTedious.log.bind(debugTedious));\r\n        }\r\n      });\r\n    } catch (error) {\r\n      if (!error.code) {\r\n        throw new sequelizeErrors.ConnectionError(error);\r\n      }\r\n\r\n      switch (error.code) {\r\n        case 'ESOCKET':\r\n          if (error.message.includes('connect EHOSTUNREACH')) {\r\n            throw new sequelizeErrors.HostNotReachableError(error);\r\n          }\r\n\r\n          if (error.message.includes('connect ENETUNREACH')) {\r\n            throw new sequelizeErrors.HostNotReachableError(error);\r\n          }\r\n\r\n          if (error.message.includes('connect EADDRNOTAVAIL')) {\r\n            throw new sequelizeErrors.HostNotReachableError(error);\r\n          }\r\n\r\n          if (error.message.includes('getaddrinfo ENOTFOUND')) {\r\n            throw new sequelizeErrors.HostNotFoundError(error);\r\n          }\r\n\r\n          if (error.message.includes('connect ECONNREFUSED')) {\r\n            throw new sequelizeErrors.ConnectionRefusedError(error);\r\n          }\r\n\r\n          throw new sequelizeErrors.ConnectionError(error);\r\n        case 'ER_ACCESS_DENIED_ERROR':\r\n        case 'ELOGIN':\r\n          throw new sequelizeErrors.AccessDeniedError(error);\r\n        case 'EINVAL':\r\n          throw new sequelizeErrors.InvalidConnectionError(error);\r\n        default:\r\n          throw new sequelizeErrors.ConnectionError(error);\r\n      }\r\n    }\r\n  }\r\n\r\n  async disconnect(connection) {\r\n    // Don't disconnect a connection that is already disconnected\r\n    if (connection.closed) {\r\n      return;\r\n    }\r\n\r\n    connection.queue.close();\r\n\r\n    return new Promise(resolve => {\r\n      connection.on('end', resolve);\r\n      connection.close();\r\n      debug('connection closed');\r\n    });\r\n  }\r\n\r\n  validate(connection) {\r\n    return connection && (connection.loggedIn || connection.state.name === 'LoggedIn');\r\n  }\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
