{
  "version": 3,
  "sources": ["../../../src/dialects/snowflake/data-types.js"],
  "sourcesContent": ["'use strict';\r\n\r\nconst dayjs = require('dayjs');\r\nconst { isValidTimeZone } = require('../../utils/dayjs');\r\n\r\nmodule.exports = BaseTypes => {\r\n  BaseTypes.ABSTRACT.prototype.dialectTypes = 'https://dev.snowflake.com/doc/refman/5.7/en/data-types.html';\r\n\r\n  /**\r\n   * types: [buffer_type, ...]\r\n   *\r\n   * @see buffer_type here https://dev.snowflake.com/doc/refman/5.7/en/c-api-prepared-statement-type-codes.html\r\n   * @see hex here https://github.com/sidorares/node-mysql2/blob/master/lib/constants/types.js\r\n   */\r\n\r\n  BaseTypes.DATE.types.snowflake = ['DATETIME'];\r\n  BaseTypes.STRING.types.snowflake = ['VAR_STRING'];\r\n  BaseTypes.CHAR.types.snowflake = ['STRING'];\r\n  BaseTypes.TEXT.types.snowflake = ['BLOB'];\r\n  BaseTypes.TINYINT.types.snowflake = ['TINY'];\r\n  BaseTypes.SMALLINT.types.snowflake = ['SHORT'];\r\n  BaseTypes.MEDIUMINT.types.snowflake = ['INT24'];\r\n  BaseTypes.INTEGER.types.snowflake = ['LONG'];\r\n  BaseTypes.BIGINT.types.snowflake = ['LONGLONG'];\r\n  BaseTypes.FLOAT.types.snowflake = ['FLOAT'];\r\n  BaseTypes.TIME.types.snowflake = ['TIME'];\r\n  BaseTypes.DATEONLY.types.snowflake = ['DATE'];\r\n  BaseTypes.BOOLEAN.types.snowflake = ['TINY'];\r\n  BaseTypes.BLOB.types.snowflake = ['TINYBLOB', 'BLOB', 'LONGBLOB'];\r\n  BaseTypes.DECIMAL.types.snowflake = ['NEWDECIMAL'];\r\n  BaseTypes.UUID.types.snowflake = false;\r\n  // Enum is not supported\r\n  // https://docs.snowflake.com/en/sql-reference/data-types-unsupported.html\r\n  BaseTypes.ENUM.types.snowflake = false;\r\n  BaseTypes.REAL.types.snowflake = ['DOUBLE'];\r\n  BaseTypes.DOUBLE.types.snowflake = ['DOUBLE'];\r\n  BaseTypes.GEOMETRY.types.snowflake = ['GEOMETRY'];\r\n  BaseTypes.JSON.types.snowflake = ['JSON'];\r\n\r\n  class DATE extends BaseTypes.DATE {\r\n    toSql() {\r\n      return 'TIMESTAMP';\r\n    }\r\n\r\n    _stringify(date, options) {\r\n      date = this._applyTimezone(date, options);\r\n\r\n      if (this._length) {\r\n        return date.format('YYYY-MM-DD HH:mm:ss.SSS');\r\n      }\r\n\r\n      return date.format('YYYY-MM-DD HH:mm:ss');\r\n    }\r\n\r\n    static parse(value, options) {\r\n      value = value.string();\r\n      if (value === null) {\r\n        return value;\r\n      }\r\n\r\n      if (isValidTimeZone(options.timezone)) {\r\n        value = dayjs.tz(value, options.timezone).toDate();\r\n      } else {\r\n        value = new Date(`${value} ${options.timezone}`);\r\n      }\r\n\r\n      return value;\r\n    }\r\n  }\r\n\r\n  class DATEONLY extends BaseTypes.DATEONLY {\r\n    static parse(value) {\r\n      return value.string();\r\n    }\r\n  }\r\n\r\n  class UUID extends BaseTypes.UUID {\r\n    toSql() {\r\n      // https://community.snowflake.com/s/question/0D50Z00009LH2fl/what-is-the-best-way-to-store-uuids\r\n      return 'VARCHAR(36)';\r\n    }\r\n  }\r\n\r\n  class TEXT extends BaseTypes.TEXT {\r\n    toSql() {\r\n      return 'TEXT';\r\n    }\r\n  }\r\n\r\n  class BOOLEAN extends BaseTypes.BOOLEAN {\r\n    toSql() {\r\n      return 'BOOLEAN';\r\n    }\r\n  }\r\n\r\n  class JSONTYPE extends BaseTypes.JSON {\r\n    _stringify(value, options) {\r\n      return options.operation === 'where' && typeof value === 'string' ? value : JSON.stringify(value);\r\n    }\r\n  }\r\n\r\n  return {\r\n    TEXT,\r\n    DATE,\r\n    BOOLEAN,\r\n    DATEONLY,\r\n    UUID,\r\n    JSON: JSONTYPE,\r\n  };\r\n};\r\n"],
  "mappings": ";AAEA,MAAM,QAAQ,QAAQ,OAAO;AAC7B,MAAM,EAAE,oBAAoB,QAAQ,mBAAmB;AAEvD,OAAO,UAAU,eAAa;AAC5B,YAAU,SAAS,UAAU,eAAe;AAS5C,YAAU,KAAK,MAAM,YAAY,CAAC,UAAU;AAC5C,YAAU,OAAO,MAAM,YAAY,CAAC,YAAY;AAChD,YAAU,KAAK,MAAM,YAAY,CAAC,QAAQ;AAC1C,YAAU,KAAK,MAAM,YAAY,CAAC,MAAM;AACxC,YAAU,QAAQ,MAAM,YAAY,CAAC,MAAM;AAC3C,YAAU,SAAS,MAAM,YAAY,CAAC,OAAO;AAC7C,YAAU,UAAU,MAAM,YAAY,CAAC,OAAO;AAC9C,YAAU,QAAQ,MAAM,YAAY,CAAC,MAAM;AAC3C,YAAU,OAAO,MAAM,YAAY,CAAC,UAAU;AAC9C,YAAU,MAAM,MAAM,YAAY,CAAC,OAAO;AAC1C,YAAU,KAAK,MAAM,YAAY,CAAC,MAAM;AACxC,YAAU,SAAS,MAAM,YAAY,CAAC,MAAM;AAC5C,YAAU,QAAQ,MAAM,YAAY,CAAC,MAAM;AAC3C,YAAU,KAAK,MAAM,YAAY,CAAC,YAAY,QAAQ,UAAU;AAChE,YAAU,QAAQ,MAAM,YAAY,CAAC,YAAY;AACjD,YAAU,KAAK,MAAM,YAAY;AAGjC,YAAU,KAAK,MAAM,YAAY;AACjC,YAAU,KAAK,MAAM,YAAY,CAAC,QAAQ;AAC1C,YAAU,OAAO,MAAM,YAAY,CAAC,QAAQ;AAC5C,YAAU,SAAS,MAAM,YAAY,CAAC,UAAU;AAChD,YAAU,KAAK,MAAM,YAAY,CAAC,MAAM;AAExC,QAAM,aAAa,UAAU,KAAK;AAAA,IAChC,QAAQ;AACN,aAAO;AAAA,IACT;AAAA,IAEA,WAAW,MAAM,SAAS;AACxB,aAAO,KAAK,eAAe,MAAM,OAAO;AAExC,UAAI,KAAK,SAAS;AAChB,eAAO,KAAK,OAAO,yBAAyB;AAAA,MAC9C;AAEA,aAAO,KAAK,OAAO,qBAAqB;AAAA,IAC1C;AAAA,WAEO,MAAM,OAAO,SAAS;AAC3B,cAAQ,MAAM,OAAO;AACrB,UAAI,UAAU,MAAM;AAClB,eAAO;AAAA,MACT;AAEA,UAAI,gBAAgB,QAAQ,QAAQ,GAAG;AACrC,gBAAQ,MAAM,GAAG,OAAO,QAAQ,QAAQ,EAAE,OAAO;AAAA,MACnD,OAAO;AACL,gBAAQ,IAAI,KAAK,GAAG,SAAS,QAAQ,UAAU;AAAA,MACjD;AAEA,aAAO;AAAA,IACT;AAAA,EACF;AAEA,QAAM,iBAAiB,UAAU,SAAS;AAAA,WACjC,MAAM,OAAO;AAClB,aAAO,MAAM,OAAO;AAAA,IACtB;AAAA,EACF;AAEA,QAAM,aAAa,UAAU,KAAK;AAAA,IAChC,QAAQ;AAEN,aAAO;AAAA,IACT;AAAA,EACF;AAEA,QAAM,aAAa,UAAU,KAAK;AAAA,IAChC,QAAQ;AACN,aAAO;AAAA,IACT;AAAA,EACF;AAEA,QAAM,gBAAgB,UAAU,QAAQ;AAAA,IACtC,QAAQ;AACN,aAAO;AAAA,IACT;AAAA,EACF;AAEA,QAAM,iBAAiB,UAAU,KAAK;AAAA,IACpC,WAAW,OAAO,SAAS;AACzB,aAAO,QAAQ,cAAc,WAAW,OAAO,UAAU,WAAW,QAAQ,KAAK,UAAU,KAAK;AAAA,IAClG;AAAA,EACF;AAEA,SAAO;AAAA,IACL;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,MAAM;AAAA,EACR;AACF;",
  "names": []
}
