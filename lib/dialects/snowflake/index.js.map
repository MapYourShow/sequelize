{
  "version": 3,
  "sources": ["../../../src/dialects/snowflake/index.js"],
  "sourcesContent": ["'use strict';\r\n\r\nimport { createUnspecifiedOrderedBindCollector } from '../../utils/sql';\r\n\r\nconst _ = require('lodash');\r\nconst { AbstractDialect } = require('../abstract');\r\nconst { SnowflakeConnectionManager } = require('./connection-manager');\r\nconst { SnowflakeQuery } = require('./query');\r\nconst { SnowflakeQueryGenerator } = require('./query-generator');\r\nconst DataTypes = require('../../data-types').snowflake;\r\nconst { SnowflakeQueryInterface } = require('./query-interface');\r\n\r\nexport class SnowflakeDialect extends AbstractDialect {\r\n  static supports = _.merge(_.cloneDeep(AbstractDialect.supports), {\r\n    'VALUES ()': true,\r\n    'LIMIT ON UPDATE': true,\r\n    lock: true,\r\n    forShare: 'LOCK IN SHARE MODE',\r\n    settingIsolationLevelDuringTransaction: false,\r\n    inserts: {\r\n      ignoreDuplicates: ' IGNORE',\r\n      // disable for now, but could be enable by approach below\r\n      // https://stackoverflow.com/questions/54828745/how-to-migrate-on-conflict-do-nothing-from-postgresql-to-snowflake\r\n      // updateOnDuplicate: true\r\n    },\r\n    index: {\r\n      collate: false,\r\n      length: true,\r\n      parser: true,\r\n      type: true,\r\n      using: 1,\r\n    },\r\n    constraints: {\r\n      dropConstraint: false,\r\n      check: false,\r\n    },\r\n    indexViaAlter: true,\r\n    indexHints: true,\r\n    NUMERIC: true,\r\n    // disable for now, need more work to enable the GEOGRAPHY MAPPING\r\n    // GEOMETRY: true,\r\n    // JSON: true,\r\n    REGEXP: true,\r\n    schemas: true,\r\n  });\r\n\r\n  constructor(sequelize) {\r\n    super();\r\n    this.sequelize = sequelize;\r\n    this.connectionManager = new SnowflakeConnectionManager(this, sequelize);\r\n    this.queryGenerator = new SnowflakeQueryGenerator({\r\n      _dialect: this,\r\n      sequelize,\r\n    });\r\n    this.queryInterface = new SnowflakeQueryInterface(sequelize, this.queryGenerator);\r\n  }\r\n\r\n  createBindCollector() {\r\n    return createUnspecifiedOrderedBindCollector();\r\n  }\r\n}\r\n\r\nSnowflakeDialect.prototype.defaultVersion = '5.7.0';\r\nSnowflakeDialect.prototype.Query = SnowflakeQuery;\r\nSnowflakeDialect.prototype.QueryGenerator = SnowflakeQueryGenerator;\r\nSnowflakeDialect.prototype.DataTypes = DataTypes;\r\nSnowflakeDialect.prototype.name = 'snowflake';\r\nSnowflakeDialect.prototype.TICK_CHAR = '\"';\r\nSnowflakeDialect.prototype.TICK_CHAR_LEFT = SnowflakeDialect.prototype.TICK_CHAR;\r\nSnowflakeDialect.prototype.TICK_CHAR_RIGHT = SnowflakeDialect.prototype.TICK_CHAR;\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,iBAAsD;AAEtD,MAAM,IAAI,QAAQ,QAAQ;AAC1B,MAAM,EAAE,oBAAoB,QAAQ,aAAa;AACjD,MAAM,EAAE,+BAA+B,QAAQ,sBAAsB;AACrE,MAAM,EAAE,mBAAmB,QAAQ,SAAS;AAC5C,MAAM,EAAE,4BAA4B,QAAQ,mBAAmB;AAC/D,MAAM,YAAY,QAAQ,kBAAkB,EAAE;AAC9C,MAAM,EAAE,4BAA4B,QAAQ,mBAAmB;AAExD,MAAM,yBAAyB,gBAAgB;AAAA,SAC7C,WAAW,EAAE,MAAM,EAAE,UAAU,gBAAgB,QAAQ,GAAG;AAAA,IAC/D,aAAa;AAAA,IACb,mBAAmB;AAAA,IACnB,MAAM;AAAA,IACN,UAAU;AAAA,IACV,wCAAwC;AAAA,IACxC,SAAS;AAAA,MACP,kBAAkB;AAAA,IAIpB;AAAA,IACA,OAAO;AAAA,MACL,SAAS;AAAA,MACT,QAAQ;AAAA,MACR,QAAQ;AAAA,MACR,MAAM;AAAA,MACN,OAAO;AAAA,IACT;AAAA,IACA,aAAa;AAAA,MACX,gBAAgB;AAAA,MAChB,OAAO;AAAA,IACT;AAAA,IACA,eAAe;AAAA,IACf,YAAY;AAAA,IACZ,SAAS;AAAA,IAIT,QAAQ;AAAA,IACR,SAAS;AAAA,EACX,CAAC;AAAA,EAED,YAAY,WAAW;AACrB,UAAM;AACN,SAAK,YAAY;AACjB,SAAK,oBAAoB,IAAI,2BAA2B,MAAM,SAAS;AACvE,SAAK,iBAAiB,IAAI,wBAAwB;AAAA,MAChD,UAAU;AAAA,MACV;AAAA,IACF,CAAC;AACD,SAAK,iBAAiB,IAAI,wBAAwB,WAAW,KAAK,cAAc;AAAA,EAClF;AAAA,EAEA,sBAAsB;AACpB,WAAO,sDAAsC;AAAA,EAC/C;AACF;AAEA,iBAAiB,UAAU,iBAAiB;AAC5C,iBAAiB,UAAU,QAAQ;AACnC,iBAAiB,UAAU,iBAAiB;AAC5C,iBAAiB,UAAU,YAAY;AACvC,iBAAiB,UAAU,OAAO;AAClC,iBAAiB,UAAU,YAAY;AACvC,iBAAiB,UAAU,iBAAiB,iBAAiB,UAAU;AACvE,iBAAiB,UAAU,kBAAkB,iBAAiB,UAAU;",
  "names": []
}
