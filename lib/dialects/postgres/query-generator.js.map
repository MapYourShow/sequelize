{
  "version": 3,
  "sources": ["../../../src/dialects/postgres/query-generator.js"],
  "sourcesContent": ["'use strict';\r\n\r\nconst Utils = require('../../utils');\r\nconst util = require('util');\r\nconst DataTypes = require('../../data-types');\r\nconst { AbstractQueryGenerator } = require('../abstract/query-generator');\r\nconst semver = require('semver');\r\nconst _ = require('lodash');\r\n\r\n/**\r\n * list of reserved words in PostgreSQL 10\r\n * source: https://www.postgresql.org/docs/10/static/sql-keywords-appendix.html\r\n *\r\n * @private\r\n */\r\nconst POSTGRES_RESERVED_WORDS = 'all,analyse,analyze,and,any,array,as,asc,asymmetric,authorization,binary,both,case,cast,check,collate,collation,column,concurrently,constraint,create,cross,current_catalog,current_date,current_role,current_schema,current_time,current_timestamp,current_user,default,deferrable,desc,distinct,do,else,end,except,false,fetch,for,foreign,freeze,from,full,grant,group,having,ilike,in,initially,inner,intersect,into,is,isnull,join,lateral,leading,left,like,limit,localtime,localtimestamp,natural,not,notnull,null,offset,on,only,or,order,outer,overlaps,placing,primary,references,returning,right,select,session_user,similar,some,symmetric,table,tablesample,then,to,trailing,true,union,unique,user,using,variadic,verbose,when,where,window,with'.split(',');\r\n\r\nexport class PostgresQueryGenerator extends AbstractQueryGenerator {\r\n  setSearchPath(searchPath) {\r\n    return `SET search_path to ${searchPath};`;\r\n  }\r\n\r\n  createDatabaseQuery(databaseName, options) {\r\n    options = {\r\n      encoding: null,\r\n      collate: null,\r\n      ...options,\r\n    };\r\n\r\n    const values = {\r\n      database: this.quoteTable(databaseName),\r\n      encoding: options.encoding ? ` ENCODING = ${this.escape(options.encoding)}` : '',\r\n      collation: options.collate ? ` LC_COLLATE = ${this.escape(options.collate)}` : '',\r\n      ctype: options.ctype ? ` LC_CTYPE = ${this.escape(options.ctype)}` : '',\r\n      template: options.template ? ` TEMPLATE = ${this.escape(options.template)}` : '',\r\n    };\r\n\r\n    return `CREATE DATABASE ${values.database}${values.encoding}${values.collation}${values.ctype}${values.template};`;\r\n  }\r\n\r\n  dropDatabaseQuery(databaseName) {\r\n    return `DROP DATABASE IF EXISTS ${this.quoteTable(databaseName)};`;\r\n  }\r\n\r\n  createSchema(schema) {\r\n    const databaseVersion = _.get(this, 'sequelize.options.databaseVersion', 0);\r\n\r\n    if (databaseVersion && semver.gte(databaseVersion, '9.2.0')) {\r\n      return `CREATE SCHEMA IF NOT EXISTS ${schema};`;\r\n    }\r\n\r\n    return `CREATE SCHEMA ${schema};`;\r\n  }\r\n\r\n  dropSchema(schema) {\r\n    return `DROP SCHEMA IF EXISTS ${schema} CASCADE;`;\r\n  }\r\n\r\n  showSchemasQuery() {\r\n    return 'SELECT schema_name FROM information_schema.schemata WHERE schema_name <> \\'information_schema\\' AND schema_name != \\'public\\' AND schema_name !~ E\\'^pg_\\';';\r\n  }\r\n\r\n  versionQuery() {\r\n    return 'SHOW SERVER_VERSION';\r\n  }\r\n\r\n  createTableQuery(tableName, attributes, options) {\r\n    options = { ...options };\r\n\r\n    // Postgres 9.0 does not support CREATE TABLE IF NOT EXISTS, 9.1 and above do\r\n    const databaseVersion = _.get(this, 'sequelize.options.databaseVersion', 0);\r\n    const attrStr = [];\r\n    let comments = '';\r\n    let columnComments = '';\r\n\r\n    const quotedTable = this.quoteTable(tableName);\r\n\r\n    if (options.comment && typeof options.comment === 'string') {\r\n      comments += `; COMMENT ON TABLE ${quotedTable} IS ${this.escape(options.comment)}`;\r\n    }\r\n\r\n    for (const attr in attributes) {\r\n      const quotedAttr = this.quoteIdentifier(attr);\r\n      const i = attributes[attr].indexOf('COMMENT ');\r\n      if (i !== -1) {\r\n        // Move comment to a separate query\r\n        const escapedCommentText = this.escape(attributes[attr].slice(Math.max(0, i + 8)));\r\n        columnComments += `; COMMENT ON COLUMN ${quotedTable}.${quotedAttr} IS ${escapedCommentText}`;\r\n        attributes[attr] = attributes[attr].slice(0, Math.max(0, i));\r\n      }\r\n\r\n      const dataType = this.dataTypeMapping(tableName, attr, attributes[attr]);\r\n      attrStr.push(`${quotedAttr} ${dataType}`);\r\n    }\r\n\r\n    let attributesClause = attrStr.join(', ');\r\n\r\n    if (options.uniqueKeys) {\r\n      _.each(options.uniqueKeys, columns => {\r\n        if (columns.customIndex) {\r\n          attributesClause += `, UNIQUE (${columns.fields.map(field => this.quoteIdentifier(field)).join(', ')})`;\r\n        }\r\n      });\r\n    }\r\n\r\n    const pks = _.reduce(attributes, (acc, attribute, key) => {\r\n      if (attribute.includes('PRIMARY KEY')) {\r\n        acc.push(this.quoteIdentifier(key));\r\n      }\r\n\r\n      return acc;\r\n    }, []).join(',');\r\n\r\n    if (pks.length > 0) {\r\n      attributesClause += `, PRIMARY KEY (${pks})`;\r\n    }\r\n\r\n    return `CREATE TABLE ${databaseVersion === 0 || semver.gte(databaseVersion, '9.1.0') ? 'IF NOT EXISTS ' : ''}${quotedTable} (${attributesClause})${comments}${columnComments};`;\r\n  }\r\n\r\n  dropTableQuery(tableName, options) {\r\n    options = options || {};\r\n\r\n    return `DROP TABLE IF EXISTS ${this.quoteTable(tableName)}${options.cascade ? ' CASCADE' : ''};`;\r\n  }\r\n\r\n  showTablesQuery() {\r\n    return 'SELECT table_name FROM information_schema.tables WHERE table_schema = \\'public\\' AND table_type LIKE \\'%TABLE\\' AND table_name != \\'spatial_ref_sys\\';';\r\n  }\r\n\r\n  describeTableQuery(tableName, schema) {\r\n    if (!schema) {\r\n      schema = 'public';\r\n    }\r\n\r\n    return 'SELECT '\r\n      + 'pk.constraint_type as \"Constraint\",'\r\n      + 'c.column_name as \"Field\", '\r\n      + 'c.column_default as \"Default\",'\r\n      + 'c.is_nullable as \"Null\", '\r\n      + '(CASE WHEN c.udt_name = \\'hstore\\' THEN c.udt_name ELSE c.data_type END) || (CASE WHEN c.character_maximum_length IS NOT NULL THEN \\'(\\' || c.character_maximum_length || \\')\\' ELSE \\'\\' END) as \"Type\", '\r\n      + '(SELECT array_agg(e.enumlabel) FROM pg_catalog.pg_type t JOIN pg_catalog.pg_enum e ON t.oid=e.enumtypid WHERE t.typname=c.udt_name) AS \"special\", '\r\n      + '(SELECT pgd.description FROM pg_catalog.pg_statio_all_tables AS st INNER JOIN pg_catalog.pg_description pgd on (pgd.objoid=st.relid) WHERE c.ordinal_position=pgd.objsubid AND c.table_name=st.relname) AS \"Comment\" '\r\n      + 'FROM information_schema.columns c '\r\n      + 'LEFT JOIN (SELECT tc.table_schema, tc.table_name, '\r\n      + 'cu.column_name, tc.constraint_type '\r\n      + 'FROM information_schema.TABLE_CONSTRAINTS tc '\r\n      + 'JOIN information_schema.KEY_COLUMN_USAGE  cu '\r\n      + 'ON tc.table_schema=cu.table_schema and tc.table_name=cu.table_name '\r\n      + 'and tc.constraint_name=cu.constraint_name '\r\n      + 'and tc.constraint_type=\\'PRIMARY KEY\\') pk '\r\n      + 'ON pk.table_schema=c.table_schema '\r\n      + 'AND pk.table_name=c.table_name '\r\n      + 'AND pk.column_name=c.column_name '\r\n      + `WHERE c.table_name = ${this.escape(tableName)} AND c.table_schema = ${this.escape(schema)} `;\r\n  }\r\n\r\n  /**\r\n   * Check whether the statmement is json function or simple path\r\n   *\r\n   * @param   {string}  stmt  The statement to validate\r\n   * @returns {boolean}       true if the given statement is json function\r\n   * @throws  {Error}         throw if the statement looks like json function but has invalid token\r\n   */\r\n  _checkValidJsonStatement(stmt) {\r\n    if (typeof stmt !== 'string') {\r\n      return false;\r\n    }\r\n\r\n    // https://www.postgresql.org/docs/current/static/functions-json.html\r\n    const jsonFunctionRegex = /^\\s*((?:[a-z]+_){0,2}jsonb?(?:_[a-z]+){0,2})\\([^)]*\\)/i;\r\n    const jsonOperatorRegex = /^\\s*(->>?|#>>?|@>|<@|\\?[&|]?|\\|{2}|#-)/i;\r\n    const tokenCaptureRegex = /^\\s*((?:([\"'`])(?:(?!\\2).|\\2{2})*\\2)|[\\s\\w]+|[()+,.;-])/i;\r\n\r\n    let currentIndex = 0;\r\n    let openingBrackets = 0;\r\n    let closingBrackets = 0;\r\n    let hasJsonFunction = false;\r\n    let hasInvalidToken = false;\r\n\r\n    while (currentIndex < stmt.length) {\r\n      const string = stmt.slice(currentIndex);\r\n      const functionMatches = jsonFunctionRegex.exec(string);\r\n      if (functionMatches) {\r\n        currentIndex += functionMatches[0].indexOf('(');\r\n        hasJsonFunction = true;\r\n        continue;\r\n      }\r\n\r\n      const operatorMatches = jsonOperatorRegex.exec(string);\r\n      if (operatorMatches) {\r\n        currentIndex += operatorMatches[0].length;\r\n        hasJsonFunction = true;\r\n        continue;\r\n      }\r\n\r\n      const tokenMatches = tokenCaptureRegex.exec(string);\r\n      if (tokenMatches) {\r\n        const capturedToken = tokenMatches[1];\r\n        if (capturedToken === '(') {\r\n          openingBrackets++;\r\n        } else if (capturedToken === ')') {\r\n          closingBrackets++;\r\n        } else if (capturedToken === ';') {\r\n          hasInvalidToken = true;\r\n          break;\r\n        }\r\n\r\n        currentIndex += tokenMatches[0].length;\r\n        continue;\r\n      }\r\n\r\n      break;\r\n    }\r\n\r\n    // Check invalid json statement\r\n    hasInvalidToken |= openingBrackets !== closingBrackets;\r\n    if (hasJsonFunction && hasInvalidToken) {\r\n      throw new Error(`Invalid json statement: ${stmt}`);\r\n    }\r\n\r\n    // return true if the statement has valid json function\r\n    return hasJsonFunction;\r\n  }\r\n\r\n  handleSequelizeMethod(smth, tableName, factory, options, prepend) {\r\n    if (smth instanceof Utils.Json) {\r\n      // Parse nested object\r\n      if (smth.conditions) {\r\n        const conditions = this.parseConditionObject(smth.conditions).map(condition => `${this.jsonPathExtractionQuery(condition.path[0], _.tail(condition.path))} = '${condition.value}'`);\r\n\r\n        return conditions.join(' AND ');\r\n      }\r\n\r\n      if (smth.path) {\r\n        let str;\r\n\r\n        // Allow specifying conditions using the postgres json syntax\r\n        if (this._checkValidJsonStatement(smth.path)) {\r\n          str = smth.path;\r\n        } else {\r\n          // Also support json property accessors\r\n          const paths = _.toPath(smth.path);\r\n          const column = paths.shift();\r\n          str = this.jsonPathExtractionQuery(column, paths);\r\n        }\r\n\r\n        if (smth.value) {\r\n          str += util.format(' = %s', this.escape(smth.value));\r\n        }\r\n\r\n        return str;\r\n      }\r\n    }\r\n\r\n    return super.handleSequelizeMethod.call(this, smth, tableName, factory, options, prepend);\r\n  }\r\n\r\n  addColumnQuery(table, key, attribute) {\r\n    const dbDataType = this.attributeToSQL(attribute, { context: 'addColumn', table, key });\r\n    const dataType = attribute.type || attribute;\r\n    const definition = this.dataTypeMapping(table, key, dbDataType);\r\n    const quotedKey = this.quoteIdentifier(key);\r\n    const quotedTable = this.quoteTable(this.extractTableDetails(table));\r\n\r\n    let query = `ALTER TABLE ${quotedTable} ADD COLUMN ${quotedKey} ${definition};`;\r\n\r\n    if (dataType instanceof DataTypes.ENUM) {\r\n      query = this.pgEnum(table, key, dataType) + query;\r\n    } else if (dataType.type && dataType.type instanceof DataTypes.ENUM) {\r\n      query = this.pgEnum(table, key, dataType.type) + query;\r\n    }\r\n\r\n    return query;\r\n  }\r\n\r\n  removeColumnQuery(tableName, attributeName) {\r\n    const quotedTableName = this.quoteTable(this.extractTableDetails(tableName));\r\n    const quotedAttributeName = this.quoteIdentifier(attributeName);\r\n\r\n    return `ALTER TABLE ${quotedTableName} DROP COLUMN ${quotedAttributeName};`;\r\n  }\r\n\r\n  changeColumnQuery(tableName, attributes) {\r\n    const query = subQuery => `ALTER TABLE ${this.quoteTable(tableName)} ALTER COLUMN ${subQuery};`;\r\n    const sql = [];\r\n    for (const attributeName in attributes) {\r\n      let definition = this.dataTypeMapping(tableName, attributeName, attributes[attributeName]);\r\n      let attrSql = '';\r\n\r\n      if (definition.includes('NOT NULL')) {\r\n        attrSql += query(`${this.quoteIdentifier(attributeName)} SET NOT NULL`);\r\n\r\n        definition = definition.replace('NOT NULL', '').trim();\r\n      } else if (!definition.includes('REFERENCES')) {\r\n        attrSql += query(`${this.quoteIdentifier(attributeName)} DROP NOT NULL`);\r\n      }\r\n\r\n      if (definition.includes('DEFAULT')) {\r\n        attrSql += query(`${this.quoteIdentifier(attributeName)} SET DEFAULT ${definition.match(/DEFAULT ([^;]+)/)[1]}`);\r\n\r\n        definition = definition.replace(/(DEFAULT[^;]+)/, '').trim();\r\n      } else if (!definition.includes('REFERENCES')) {\r\n        attrSql += query(`${this.quoteIdentifier(attributeName)} DROP DEFAULT`);\r\n      }\r\n\r\n      if (attributes[attributeName].startsWith('ENUM(')) {\r\n        attrSql += this.pgEnum(tableName, attributeName, attributes[attributeName]);\r\n        definition = definition.replace(/^ENUM\\(.+\\)/, this.pgEnumName(tableName, attributeName, { schema: false }));\r\n        definition += ` USING (${this.quoteIdentifier(attributeName)}::${this.pgEnumName(tableName, attributeName)})`;\r\n      }\r\n\r\n      if (/UNIQUE;*$/.test(definition)) {\r\n        definition = definition.replace(/UNIQUE;*$/, '');\r\n        attrSql += query(`ADD UNIQUE (${this.quoteIdentifier(attributeName)})`).replace('ALTER COLUMN', '');\r\n      }\r\n\r\n      if (definition.includes('REFERENCES')) {\r\n        definition = definition.replace(/.+?(?=REFERENCES)/, '');\r\n        attrSql += query(`ADD FOREIGN KEY (${this.quoteIdentifier(attributeName)}) ${definition}`).replace('ALTER COLUMN', '');\r\n      } else {\r\n        attrSql += query(`${this.quoteIdentifier(attributeName)} TYPE ${definition}`);\r\n      }\r\n\r\n      sql.push(attrSql);\r\n    }\r\n\r\n    return sql.join('');\r\n  }\r\n\r\n  renameColumnQuery(tableName, attrBefore, attributes) {\r\n\r\n    const attrString = [];\r\n\r\n    for (const attributeName in attributes) {\r\n      attrString.push(`${this.quoteIdentifier(attrBefore)} TO ${this.quoteIdentifier(attributeName)}`);\r\n    }\r\n\r\n    return `ALTER TABLE ${this.quoteTable(tableName)} RENAME COLUMN ${attrString.join(', ')};`;\r\n  }\r\n\r\n  fn(fnName, tableName, parameters, body, returns, language) {\r\n    fnName = fnName || 'testfunc';\r\n    language = language || 'plpgsql';\r\n    returns = returns ? `RETURNS ${returns}` : '';\r\n    parameters = parameters || '';\r\n\r\n    return `CREATE OR REPLACE FUNCTION pg_temp.${fnName}(${parameters}) ${returns} AS $func$ BEGIN ${body} END; $func$ LANGUAGE ${language}; SELECT * FROM pg_temp.${fnName}();`;\r\n  }\r\n\r\n  truncateTableQuery(tableName, options = {}) {\r\n    return [\r\n      `TRUNCATE ${this.quoteTable(tableName)}`,\r\n      options.restartIdentity ? ' RESTART IDENTITY' : '',\r\n      options.cascade ? ' CASCADE' : '',\r\n    ].join('');\r\n  }\r\n\r\n  deleteQuery(tableName, where, options = {}, model) {\r\n    const table = this.quoteTable(tableName);\r\n    let whereClause = this.getWhereConditions(where, null, model, options);\r\n    const limit = options.limit ? ` LIMIT ${this.escape(options.limit, undefined, _.pick(options, ['replacements', 'bind']))}` : '';\r\n    let primaryKeys = '';\r\n    let primaryKeysSelection = '';\r\n\r\n    if (whereClause) {\r\n      whereClause = ` WHERE ${whereClause}`;\r\n    }\r\n\r\n    if (options.limit) {\r\n      if (!model) {\r\n        throw new Error('Cannot LIMIT delete without a model.');\r\n      }\r\n\r\n      const pks = Object.values(model.primaryKeys).map(pk => this.quoteIdentifier(pk.field)).join(',');\r\n\r\n      primaryKeys = model.primaryKeyAttributes.length > 1 ? `(${pks})` : pks;\r\n      primaryKeysSelection = pks;\r\n\r\n      return `DELETE FROM ${table} WHERE ${primaryKeys} IN (SELECT ${primaryKeysSelection} FROM ${table}${whereClause}${limit})`;\r\n    }\r\n\r\n    return `DELETE FROM ${table}${whereClause}`;\r\n  }\r\n\r\n  showIndexesQuery(tableName) {\r\n    let schemaJoin = '';\r\n    let schemaWhere = '';\r\n    if (typeof tableName !== 'string') {\r\n      schemaJoin = ', pg_namespace s';\r\n      schemaWhere = ` AND s.oid = t.relnamespace AND s.nspname = '${tableName.schema}'`;\r\n      tableName = tableName.tableName;\r\n    }\r\n\r\n    // This is ARCANE!\r\n    return 'SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, '\r\n      + 'array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) '\r\n      + `AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a${schemaJoin} `\r\n      + 'WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND '\r\n      + `t.relkind = 'r' and t.relname = '${tableName}'${schemaWhere} `\r\n      + 'GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;';\r\n  }\r\n\r\n  showConstraintsQuery(tableName) {\r\n    // Postgres converts camelCased alias to lowercase unless quoted\r\n    return [\r\n      'SELECT constraint_catalog AS \"constraintCatalog\",',\r\n      'constraint_schema AS \"constraintSchema\",',\r\n      'constraint_name AS \"constraintName\",',\r\n      'table_catalog AS \"tableCatalog\",',\r\n      'table_schema AS \"tableSchema\",',\r\n      'table_name AS \"tableName\",',\r\n      'constraint_type AS \"constraintType\",',\r\n      'is_deferrable AS \"isDeferrable\",',\r\n      'initially_deferred AS \"initiallyDeferred\"',\r\n      'from INFORMATION_SCHEMA.table_constraints',\r\n      `WHERE table_name='${tableName}';`,\r\n    ].join(' ');\r\n  }\r\n\r\n  removeIndexQuery(tableName, indexNameOrAttributes, options) {\r\n    let indexName = indexNameOrAttributes;\r\n\r\n    if (typeof indexName !== 'string') {\r\n      indexName = Utils.underscore(`${tableName}_${indexNameOrAttributes.join('_')}`);\r\n    }\r\n\r\n    return [\r\n      'DROP INDEX',\r\n      options && options.concurrently && 'CONCURRENTLY',\r\n      `IF EXISTS ${this.quoteIdentifiers(indexName)}`,\r\n    ].filter(Boolean).join(' ');\r\n  }\r\n\r\n  addLimitAndOffset(options) {\r\n    let fragment = '';\r\n    if (options.limit != null) {\r\n      fragment += ` LIMIT ${this.escape(options.limit, undefined, options)}`;\r\n    }\r\n\r\n    if (options.offset) {\r\n      fragment += ` OFFSET ${this.escape(options.offset, undefined, options)}`;\r\n    }\r\n\r\n    return fragment;\r\n  }\r\n\r\n  attributeToSQL(attribute, options) {\r\n    if (!_.isPlainObject(attribute)) {\r\n      attribute = {\r\n        type: attribute,\r\n      };\r\n    }\r\n\r\n    let type;\r\n    if (\r\n      attribute.type instanceof DataTypes.ENUM\r\n      || attribute.type instanceof DataTypes.ARRAY && attribute.type.type instanceof DataTypes.ENUM\r\n    ) {\r\n      const enumType = attribute.type.type || attribute.type;\r\n      let values = attribute.values;\r\n\r\n      if (enumType.values && !attribute.values) {\r\n        values = enumType.values;\r\n      }\r\n\r\n      if (Array.isArray(values) && values.length > 0) {\r\n        type = `ENUM(${values.map(value => this.escape(value)).join(', ')})`;\r\n\r\n        if (attribute.type instanceof DataTypes.ARRAY) {\r\n          type += '[]';\r\n        }\r\n\r\n      } else {\r\n        throw new Error('Values for ENUM haven\\'t been defined.');\r\n      }\r\n    }\r\n\r\n    if (!type) {\r\n      type = attribute.type;\r\n    }\r\n\r\n    let sql = type.toString();\r\n\r\n    if (attribute.allowNull === false) {\r\n      sql += ' NOT NULL';\r\n    }\r\n\r\n    if (attribute.autoIncrement) {\r\n      if (attribute.autoIncrementIdentity) {\r\n        sql += ' GENERATED BY DEFAULT AS IDENTITY';\r\n      } else {\r\n        sql += ' SERIAL';\r\n      }\r\n    }\r\n\r\n    if (Utils.defaultValueSchemable(attribute.defaultValue)) {\r\n      sql += ` DEFAULT ${this.escape(attribute.defaultValue, attribute)}`;\r\n    }\r\n\r\n    if (attribute.unique === true) {\r\n      sql += ' UNIQUE';\r\n    }\r\n\r\n    if (attribute.primaryKey) {\r\n      sql += ' PRIMARY KEY';\r\n    }\r\n\r\n    if (attribute.references) {\r\n      let referencesTable = this.quoteTable(attribute.references.model);\r\n      let schema;\r\n\r\n      if (options.schema) {\r\n        schema = options.schema;\r\n      } else if (\r\n        (!attribute.references.model || typeof attribute.references.model === 'string')\r\n        && options.table\r\n        && options.table.schema\r\n      ) {\r\n        schema = options.table.schema;\r\n      }\r\n\r\n      if (schema) {\r\n        referencesTable = this.quoteTable(this.addSchema({\r\n          tableName: referencesTable,\r\n          _schema: schema,\r\n        }));\r\n      }\r\n\r\n      let referencesKey;\r\n\r\n      if (attribute.references.key) {\r\n        referencesKey = this.quoteIdentifiers(attribute.references.key);\r\n      } else {\r\n        referencesKey = this.quoteIdentifier('id');\r\n      }\r\n\r\n      sql += ` REFERENCES ${referencesTable} (${referencesKey})`;\r\n\r\n      if (attribute.onDelete) {\r\n        sql += ` ON DELETE ${attribute.onDelete.toUpperCase()}`;\r\n      }\r\n\r\n      if (attribute.onUpdate) {\r\n        sql += ` ON UPDATE ${attribute.onUpdate.toUpperCase()}`;\r\n      }\r\n\r\n      if (attribute.references.deferrable) {\r\n        sql += ` ${attribute.references.deferrable.toString(this)}`;\r\n      }\r\n    }\r\n\r\n    if (attribute.comment && typeof attribute.comment === 'string') {\r\n      if (options && ['addColumn', 'changeColumn'].includes(options.context)) {\r\n        const quotedAttr = this.quoteIdentifier(options.key);\r\n        const escapedCommentText = this.escape(attribute.comment);\r\n        sql += `; COMMENT ON COLUMN ${this.quoteTable(options.table)}.${quotedAttr} IS ${escapedCommentText}`;\r\n      } else {\r\n        // for createTable event which does it's own parsing\r\n        // TODO: centralize creation of comment statements here\r\n        sql += ` COMMENT ${attribute.comment}`;\r\n      }\r\n    }\r\n\r\n    return sql;\r\n  }\r\n\r\n  deferConstraintsQuery(options) {\r\n    return options.deferrable.toString(this);\r\n  }\r\n\r\n  setConstraintQuery(columns, type) {\r\n    let columnFragment = 'ALL';\r\n\r\n    if (columns) {\r\n      columnFragment = columns.map(column => this.quoteIdentifier(column)).join(', ');\r\n    }\r\n\r\n    return `SET CONSTRAINTS ${columnFragment} ${type}`;\r\n  }\r\n\r\n  setDeferredQuery(columns) {\r\n    return this.setConstraintQuery(columns, 'DEFERRED');\r\n  }\r\n\r\n  setImmediateQuery(columns) {\r\n    return this.setConstraintQuery(columns, 'IMMEDIATE');\r\n  }\r\n\r\n  attributesToSQL(attributes, options) {\r\n    const result = {};\r\n\r\n    for (const key in attributes) {\r\n      const attribute = attributes[key];\r\n      result[attribute.field || key] = this.attributeToSQL(attribute, { key, ...options });\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  createTrigger(tableName, triggerName, eventType, fireOnSpec, functionName, functionParams, optionsArray) {\r\n    const decodedEventType = this.decodeTriggerEventType(eventType);\r\n    const eventSpec = this.expandTriggerEventSpec(fireOnSpec);\r\n    const expandedOptions = this.expandOptions(optionsArray);\r\n    const paramList = this._expandFunctionParamList(functionParams);\r\n\r\n    return `CREATE ${this.triggerEventTypeIsConstraint(eventType)}TRIGGER ${this.quoteIdentifier(triggerName)} ${decodedEventType} ${\r\n      eventSpec} ON ${this.quoteTable(tableName)}${expandedOptions ? ` ${expandedOptions}` : ''} EXECUTE PROCEDURE ${functionName}(${paramList});`;\r\n  }\r\n\r\n  dropTrigger(tableName, triggerName) {\r\n    return `DROP TRIGGER ${this.quoteIdentifier(triggerName)} ON ${this.quoteTable(tableName)} RESTRICT;`;\r\n  }\r\n\r\n  renameTrigger(tableName, oldTriggerName, newTriggerName) {\r\n    return `ALTER TRIGGER ${this.quoteIdentifier(oldTriggerName)} ON ${this.quoteTable(tableName)} RENAME TO ${this.quoteIdentifier(newTriggerName)};`;\r\n  }\r\n\r\n  createFunction(functionName, params, returnType, language, body, optionsArray, options) {\r\n    if (!functionName || !returnType || !language || !body) {\r\n      throw new Error('createFunction missing some parameters. Did you pass functionName, returnType, language and body?');\r\n    }\r\n\r\n    const paramList = this._expandFunctionParamList(params);\r\n    const variableList = options && options.variables ? this._expandFunctionVariableList(options.variables) : '';\r\n    const expandedOptionsArray = this.expandOptions(optionsArray);\r\n\r\n    const statement = options && options.force ? 'CREATE OR REPLACE FUNCTION' : 'CREATE FUNCTION';\r\n\r\n    return `${statement} ${functionName}(${paramList}) RETURNS ${returnType} AS $func$ ${variableList} BEGIN ${body} END; $func$ language '${language}'${expandedOptionsArray};`;\r\n  }\r\n\r\n  dropFunction(functionName, params) {\r\n    if (!functionName) {\r\n      throw new Error('requires functionName');\r\n    }\r\n\r\n    // RESTRICT is (currently, as of 9.2) default but we'll be explicit\r\n    const paramList = this._expandFunctionParamList(params);\r\n\r\n    return `DROP FUNCTION ${functionName}(${paramList}) RESTRICT;`;\r\n  }\r\n\r\n  renameFunction(oldFunctionName, params, newFunctionName) {\r\n    const paramList = this._expandFunctionParamList(params);\r\n\r\n    return `ALTER FUNCTION ${oldFunctionName}(${paramList}) RENAME TO ${newFunctionName};`;\r\n  }\r\n\r\n  pgEscapeAndQuote(val) {\r\n    return this.quoteIdentifier(Utils.removeTicks(this.escape(val), '\\''));\r\n  }\r\n\r\n  _expandFunctionParamList(params) {\r\n    if (params === undefined || !Array.isArray(params)) {\r\n      throw new Error('_expandFunctionParamList: function parameters array required, including an empty one for no arguments');\r\n    }\r\n\r\n    const paramList = [];\r\n    for (const curParam of params) {\r\n      const paramDef = [];\r\n      if (curParam.type) {\r\n        if (curParam.direction) {\r\n          paramDef.push(curParam.direction);\r\n        }\r\n\r\n        if (curParam.name) {\r\n          paramDef.push(curParam.name);\r\n        }\r\n\r\n        paramDef.push(curParam.type);\r\n      } else {\r\n        throw new Error('function or trigger used with a parameter without any type');\r\n      }\r\n\r\n      const joined = paramDef.join(' ');\r\n      if (joined) {\r\n        paramList.push(joined);\r\n      }\r\n\r\n    }\r\n\r\n    return paramList.join(', ');\r\n  }\r\n\r\n  _expandFunctionVariableList(variables) {\r\n    if (!Array.isArray(variables)) {\r\n      throw new TypeError('_expandFunctionVariableList: function variables must be an array');\r\n    }\r\n\r\n    const variableDefinitions = [];\r\n    for (const variable of variables) {\r\n      if (!variable.name || !variable.type) {\r\n        throw new Error('function variable must have a name and type');\r\n      }\r\n\r\n      let variableDefinition = `DECLARE ${variable.name} ${variable.type}`;\r\n      if (variable.default) {\r\n        variableDefinition += ` := ${variable.default}`;\r\n      }\r\n\r\n      variableDefinition += ';';\r\n      variableDefinitions.push(variableDefinition);\r\n    }\r\n\r\n    return variableDefinitions.join(' ');\r\n  }\r\n\r\n  expandOptions(options) {\r\n    return options === undefined || _.isEmpty(options)\r\n      ? '' : options.join(' ');\r\n  }\r\n\r\n  decodeTriggerEventType(eventSpecifier) {\r\n    const EVENT_DECODER = {\r\n      after: 'AFTER',\r\n      before: 'BEFORE',\r\n      instead_of: 'INSTEAD OF',\r\n      after_constraint: 'AFTER',\r\n    };\r\n\r\n    if (!EVENT_DECODER[eventSpecifier]) {\r\n      throw new Error(`Invalid trigger event specified: ${eventSpecifier}`);\r\n    }\r\n\r\n    return EVENT_DECODER[eventSpecifier];\r\n  }\r\n\r\n  triggerEventTypeIsConstraint(eventSpecifier) {\r\n    return eventSpecifier === 'after_constraint' ? 'CONSTRAINT ' : '';\r\n  }\r\n\r\n  expandTriggerEventSpec(fireOnSpec) {\r\n    if (_.isEmpty(fireOnSpec)) {\r\n      throw new Error('no table change events specified to trigger on');\r\n    }\r\n\r\n    return _.map(fireOnSpec, (fireValue, fireKey) => {\r\n      const EVENT_MAP = {\r\n        insert: 'INSERT',\r\n        update: 'UPDATE',\r\n        delete: 'DELETE',\r\n        truncate: 'TRUNCATE',\r\n      };\r\n\r\n      if (!EVENT_MAP[fireValue]) {\r\n        throw new Error(`parseTriggerEventSpec: undefined trigger event ${fireKey}`);\r\n      }\r\n\r\n      let eventSpec = EVENT_MAP[fireValue];\r\n      if (eventSpec === 'UPDATE' && Array.isArray(fireValue) && fireValue.length > 0) {\r\n        eventSpec += ` OF ${fireValue.join(', ')}`;\r\n      }\r\n\r\n      return eventSpec;\r\n    }).join(' OR ');\r\n  }\r\n\r\n  pgEnumName(tableName, attr, options) {\r\n    options = options || {};\r\n\r\n    const tableDetails = this.extractTableDetails(tableName, options);\r\n    let enumName = Utils.addTicks(Utils.generateEnumName(tableDetails.tableName, attr), '\"');\r\n\r\n    // pgListEnums requires the enum name only, without the schema\r\n    if (options.schema !== false && tableDetails.schema) {\r\n      enumName = this.quoteIdentifier(tableDetails.schema) + tableDetails.delimiter + enumName;\r\n    }\r\n\r\n    return enumName;\r\n  }\r\n\r\n  pgListEnums(tableName, attrName, options) {\r\n    let enumName = '';\r\n    const tableDetails = this.extractTableDetails(tableName, options);\r\n\r\n    if (tableDetails.tableName && attrName) {\r\n      enumName = ` AND t.typname=${this.pgEnumName(tableDetails.tableName, attrName, { schema: false }).replace(/\"/g, '\\'')}`;\r\n    }\r\n\r\n    return 'SELECT t.typname enum_name, array_agg(e.enumlabel ORDER BY enumsortorder) enum_value FROM pg_type t '\r\n      + 'JOIN pg_enum e ON t.oid = e.enumtypid '\r\n      + 'JOIN pg_catalog.pg_namespace n ON n.oid = t.typnamespace '\r\n      + `WHERE n.nspname = '${tableDetails.schema}'${enumName} GROUP BY 1`;\r\n  }\r\n\r\n  pgEnum(tableName, attr, dataType, options) {\r\n    const enumName = this.pgEnumName(tableName, attr, options);\r\n    let values;\r\n\r\n    if (dataType.values) {\r\n      values = `ENUM(${dataType.values.map(value => this.escape(value)).join(', ')})`;\r\n    } else {\r\n      values = dataType.toString().match(/^ENUM\\(.+\\)/)[0];\r\n    }\r\n\r\n    let sql = `CREATE TYPE ${enumName} AS ${values};`;\r\n    if (Boolean(options) && options.force === true) {\r\n      sql = this.pgEnumDrop(tableName, attr) + sql;\r\n    }\r\n\r\n    return sql;\r\n  }\r\n\r\n  pgEnumAdd(tableName, attr, value, options) {\r\n    const enumName = this.pgEnumName(tableName, attr);\r\n    let sql = `ALTER TYPE ${enumName} ADD VALUE `;\r\n\r\n    if (semver.gte(this.sequelize.options.databaseVersion, '9.3.0')) {\r\n      sql += 'IF NOT EXISTS ';\r\n    }\r\n\r\n    sql += this.escape(value);\r\n\r\n    if (options.before) {\r\n      sql += ` BEFORE ${this.escape(options.before)}`;\r\n    } else if (options.after) {\r\n      sql += ` AFTER ${this.escape(options.after)}`;\r\n    }\r\n\r\n    return sql;\r\n  }\r\n\r\n  pgEnumDrop(tableName, attr, enumName) {\r\n    enumName = enumName || this.pgEnumName(tableName, attr);\r\n\r\n    return `DROP TYPE IF EXISTS ${enumName}; `;\r\n  }\r\n\r\n  fromArray(text) {\r\n    text = text.replace(/^{/, '').replace(/}$/, '');\r\n    let matches = text.match(/(\"(?:\\\\.|[^\"\\\\])*\"|[^,]*)(?:\\s*,\\s*|\\s*$)/gi);\r\n\r\n    if (matches.length === 0) {\r\n      return [];\r\n    }\r\n\r\n    matches = matches.map(m => m.replace(/\",$/, '').replace(/,$/, '').replace(/(^\"|\"$)/g, ''));\r\n\r\n    return matches.slice(0, -1);\r\n  }\r\n\r\n  dataTypeMapping(tableName, attr, dataType) {\r\n    if (dataType.includes('PRIMARY KEY')) {\r\n      dataType = dataType.replace('PRIMARY KEY', '');\r\n    }\r\n\r\n    if (dataType.includes('SERIAL')) {\r\n      if (dataType.includes('BIGINT')) {\r\n        dataType = dataType.replace('SERIAL', 'BIGSERIAL');\r\n        dataType = dataType.replace('BIGINT', '');\r\n      } else if (dataType.includes('SMALLINT')) {\r\n        dataType = dataType.replace('SERIAL', 'SMALLSERIAL');\r\n        dataType = dataType.replace('SMALLINT', '');\r\n      } else {\r\n        dataType = dataType.replace('INTEGER', '');\r\n      }\r\n\r\n      dataType = dataType.replace('NOT NULL', '');\r\n    }\r\n\r\n    if (dataType.startsWith('ENUM(')) {\r\n      dataType = dataType.replace(/^ENUM\\(.+\\)/, this.pgEnumName(tableName, attr));\r\n    }\r\n\r\n    return dataType;\r\n  }\r\n\r\n  /**\r\n   * Generates an SQL query that returns all foreign keys of a table.\r\n   *\r\n   * @param  {string} tableName  The name of the table.\r\n   * @returns {string}            The generated sql query.\r\n   * @private\r\n   */\r\n  getForeignKeysQuery(tableName) {\r\n    return 'SELECT conname as constraint_name, pg_catalog.pg_get_constraintdef(r.oid, true) as condef FROM pg_catalog.pg_constraint r '\r\n      + `WHERE r.conrelid = (SELECT oid FROM pg_class WHERE relname = '${tableName}' LIMIT 1) AND r.contype = 'f' ORDER BY 1;`;\r\n  }\r\n\r\n  /**\r\n   * Generate common SQL prefix for getForeignKeyReferencesQuery.\r\n   *\r\n   * @returns {string}\r\n   */\r\n  _getForeignKeyReferencesQueryPrefix() {\r\n    return 'SELECT '\r\n      + 'DISTINCT tc.constraint_name as constraint_name, '\r\n      + 'tc.constraint_schema as constraint_schema, '\r\n      + 'tc.constraint_catalog as constraint_catalog, '\r\n      + 'tc.table_name as table_name,'\r\n      + 'tc.table_schema as table_schema,'\r\n      + 'tc.table_catalog as table_catalog,'\r\n      + 'kcu.column_name as column_name,'\r\n      + 'ccu.table_schema  AS referenced_table_schema,'\r\n      + 'ccu.table_catalog  AS referenced_table_catalog,'\r\n      + 'ccu.table_name  AS referenced_table_name,'\r\n      + 'ccu.column_name AS referenced_column_name '\r\n      + 'FROM information_schema.table_constraints AS tc '\r\n      + 'JOIN information_schema.key_column_usage AS kcu '\r\n      + 'ON tc.constraint_name = kcu.constraint_name '\r\n      + 'JOIN information_schema.constraint_column_usage AS ccu '\r\n      + 'ON ccu.constraint_name = tc.constraint_name ';\r\n  }\r\n\r\n  /**\r\n   * Generates an SQL query that returns all foreign keys details of a table.\r\n   *\r\n   * As for getForeignKeysQuery is not compatible with getForeignKeyReferencesQuery, so add a new function.\r\n   *\r\n   * @param {string} tableName\r\n   * @param {string} catalogName\r\n   * @param {string} schemaName\r\n   */\r\n  getForeignKeyReferencesQuery(tableName, catalogName, schemaName) {\r\n    return `${this._getForeignKeyReferencesQueryPrefix()\r\n    }WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name = '${tableName}'${\r\n      catalogName ? ` AND tc.table_catalog = '${catalogName}'` : ''\r\n    }${schemaName ? ` AND tc.table_schema = '${schemaName}'` : ''}`;\r\n  }\r\n\r\n  getForeignKeyReferenceQuery(table, columnName) {\r\n    const tableName = table.tableName || table;\r\n    const schema = table.schema;\r\n\r\n    return `${this._getForeignKeyReferencesQueryPrefix()\r\n    }WHERE constraint_type = 'FOREIGN KEY' AND tc.table_name='${tableName}' AND  kcu.column_name = '${columnName}'${\r\n      schema ? ` AND tc.table_schema = '${schema}'` : ''}`;\r\n  }\r\n\r\n  /**\r\n   * Generates an SQL query that removes a foreign key from a table.\r\n   *\r\n   * @param  {string} tableName  The name of the table.\r\n   * @param  {string} foreignKey The name of the foreign key constraint.\r\n   * @returns {string}            The generated sql query.\r\n   * @private\r\n   */\r\n  dropForeignKeyQuery(tableName, foreignKey) {\r\n    return `ALTER TABLE ${this.quoteTable(tableName)} DROP CONSTRAINT ${this.quoteIdentifier(foreignKey)};`;\r\n  }\r\n\r\n  /**\r\n   * Quote identifier in sql clause\r\n   *\r\n   * @param {string} identifier\r\n   * @param {boolean} force\r\n   *\r\n   * @returns {string}\r\n   */\r\n  quoteIdentifier(identifier, force) {\r\n    const optForceQuote = force || false;\r\n    const optQuoteIdentifiers = this.options.quoteIdentifiers !== false;\r\n    const rawIdentifier = Utils.removeTicks(identifier, '\"');\r\n\r\n    if (\r\n      optForceQuote === true\r\n      || optQuoteIdentifiers !== false\r\n      || identifier.includes('.')\r\n      || identifier.includes('->')\r\n      || POSTGRES_RESERVED_WORDS.includes(rawIdentifier.toLowerCase())\r\n    ) {\r\n      // In Postgres if tables or attributes are created double-quoted,\r\n      // they are also case sensitive. If they contain any uppercase\r\n      // characters, they must always be double-quoted. This makes it\r\n      // impossible to write queries in portable SQL if tables are created in\r\n      // this way. Hence, we strip quotes if we don't want case sensitivity.\r\n      return Utils.addTicks(rawIdentifier, '\"');\r\n    }\r\n\r\n    return rawIdentifier;\r\n  }\r\n\r\n  /**\r\n   * Generates an SQL query that extract JSON property of given path.\r\n   *\r\n   * @param   {string}               column  The JSON column\r\n   * @param   {string|Array<string>} [path]  The path to extract (optional)\r\n   * @param   {boolean}              [isJson] The value is JSON use alt symbols (optional)\r\n   * @returns {string}                       The generated sql query\r\n   * @private\r\n   */\r\n  jsonPathExtractionQuery(column, path, isJson) {\r\n    const quotedColumn = this.isIdentifierQuoted(column)\r\n      ? column\r\n      : this.quoteIdentifier(column);\r\n\r\n    const join = isJson ? '#>' : '#>>';\r\n    const pathStr = this.escape(`{${_.toPath(path).join(',')}}`);\r\n\r\n    return `(${quotedColumn}${join}${pathStr})`;\r\n  }\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
