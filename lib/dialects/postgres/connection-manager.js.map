{
  "version": 3,
  "sources": ["../../../src/dialects/postgres/connection-manager.js"],
  "sourcesContent": ["'use strict';\r\n\r\nconst _ = require('lodash');\r\nconst { ConnectionManager } = require('../abstract/connection-manager');\r\nconst { logger } = require('../../utils/logger');\r\nconst { isValidTimeZone } = require('../../utils/dayjs');\r\n\r\nconst debug = logger.debugContext('connection:pg');\r\nconst sequelizeErrors = require('../../errors');\r\nconst semver = require('semver');\r\nconst dataTypes = require('../../data-types');\r\nconst dayjs = require('dayjs');\r\nconst { promisify } = require('util');\r\n\r\nexport class PostgresConnectionManager extends ConnectionManager {\r\n  constructor(dialect, sequelize) {\r\n    sequelize.config.port = sequelize.config.port || 5432;\r\n    super(dialect, sequelize);\r\n\r\n    const pgLib = this._loadDialectModule('pg');\r\n    this.lib = this.sequelize.config.native ? pgLib.native : pgLib;\r\n\r\n    this._clearDynamicOIDs();\r\n    this._clearTypeParser();\r\n    this.refreshTypeParser(dataTypes.postgres);\r\n  }\r\n\r\n  // Expose this as a method so that the parsing may be updated when the user has added additional, custom types\r\n  _refreshTypeParser(dataType) {\r\n    const arrayParserBuilder = parser => {\r\n      return value => this.lib.types.arrayParser.create(value, parser).parse();\r\n    };\r\n\r\n    const rangeParserBuilder = parser => {\r\n      return value => dataType.parse(value, { parser });\r\n    };\r\n\r\n    // Set range parsers\r\n    if (dataType.key.toLowerCase() === 'range') {\r\n      for (const name in this.nameOidMap) {\r\n        const entry = this.nameOidMap[name];\r\n        if (!entry.rangeOid) {\r\n          continue;\r\n        }\r\n\r\n        const rangeParser = rangeParserBuilder(this.getTypeParser(entry.oid));\r\n        const arrayRangeParser = arrayParserBuilder(rangeParser);\r\n\r\n        this.oidParserMap.set(entry.rangeOid, rangeParser);\r\n        if (!entry.arrayRangeOid) {\r\n          continue;\r\n        }\r\n\r\n        this.oidParserMap.set(entry.arrayRangeOid, arrayRangeParser);\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    // Create parsers for normal or enum data types\r\n    const parser = value => dataType.parse(value);\r\n    const arrayParser = arrayParserBuilder(parser);\r\n\r\n    // Set enum parsers\r\n    if (dataType.key.toLowerCase() === 'enum') {\r\n      for (const oid of this.enumOids.oids) {\r\n        this.oidParserMap.set(oid, parser);\r\n      }\r\n\r\n      for (const arrayOid of this.enumOids.arrayOids) {\r\n        this.oidParserMap.set(arrayOid, arrayParser);\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    // Set parsers for normal data types\r\n    for (const name of dataType.types.postgres) {\r\n      if (!this.nameOidMap[name]) {\r\n        continue;\r\n      }\r\n\r\n      this.oidParserMap.set(this.nameOidMap[name].oid, parser);\r\n\r\n      if (!this.nameOidMap[name].arrayOid) {\r\n        continue;\r\n      }\r\n\r\n      this.oidParserMap.set(this.nameOidMap[name].arrayOid, arrayParser);\r\n    }\r\n  }\r\n\r\n  _clearTypeParser() {\r\n    this.oidParserMap = new Map();\r\n  }\r\n\r\n  getTypeParser(oid, ...args) {\r\n    if (this.oidParserMap.get(oid)) {\r\n      return this.oidParserMap.get(oid);\r\n    }\r\n\r\n    return this.lib.types.getTypeParser(oid, ...args);\r\n  }\r\n\r\n  async connect(config) {\r\n    config.user = config.username;\r\n    const connectionConfig = _.pick(config, [\r\n      'user', 'password', 'host', 'database', 'port',\r\n    ]);\r\n\r\n    connectionConfig.types = {\r\n      getTypeParser: PostgresConnectionManager.prototype.getTypeParser.bind(this),\r\n    };\r\n\r\n    if (config.dialectOptions) {\r\n      _.merge(connectionConfig,\r\n        _.pick(config.dialectOptions, [\r\n        // see [http://www.postgresql.org/docs/9.3/static/runtime-config-logging.html#GUC-APPLICATION-NAME]\r\n          'application_name',\r\n          // choose the SSL mode with the PGSSLMODE environment variable\r\n          // object format: [https://github.com/brianc/node-postgres/blob/ee19e74ffa6309c9c5e8e01746261a8f651661f8/lib/connection.js#L79]\r\n          // see also [http://www.postgresql.org/docs/9.3/static/libpq-ssl.html]\r\n          'ssl',\r\n          // In addition to the values accepted by the corresponding server,\r\n          // you can use \"auto\" to determine the right encoding from the\r\n          // current locale in the client (LC_CTYPE environment variable on Unix systems)\r\n          'client_encoding',\r\n          // !! DO NOT SET THIS TO TRUE !!\r\n          // (unless you know what you're doing)\r\n          // see [http://www.postgresql.org/message-id/flat/bc9549a50706040852u27633f41ib1e6b09f8339d845@mail.gmail.com#bc9549a50706040852u27633f41ib1e6b09f8339d845@mail.gmail.com]\r\n          'binary',\r\n          // This should help with backends incorrectly considering idle clients to be dead and prematurely disconnecting them.\r\n          // this feature has been added in pg module v6.0.0, check pg/CHANGELOG.md\r\n          'keepAlive',\r\n          // Times out queries after a set time in milliseconds in the database end. Added in pg v7.3\r\n          'statement_timeout',\r\n          // Times out queries after a set time in milliseconds in client end, query would be still running in database end.\r\n          'query_timeout',\r\n          // Terminate any session with an open transaction that has been idle for longer than the specified duration in milliseconds. Added in pg v7.17.0 only supported in postgres >= 10\r\n          'idle_in_transaction_session_timeout',\r\n          // Postgres allows additional session variables to be configured in the connection string in the `options` param.\r\n          // see [https://www.postgresql.org/docs/14/libpq-connect.html#LIBPQ-CONNECT-OPTIONS]\r\n          'options',\r\n        ]));\r\n    }\r\n\r\n    const connection = await new Promise((resolve, reject) => {\r\n      let responded = false;\r\n\r\n      const connection = new this.lib.Client(connectionConfig);\r\n\r\n      const parameterHandler = message => {\r\n        switch (message.parameterName) {\r\n          case 'server_version':\r\n            if (this.sequelize.options.databaseVersion === 0) {\r\n              const version = semver.coerce(message.parameterValue).version;\r\n              this.sequelize.options.databaseVersion = semver.valid(version)\r\n                ? version\r\n                : this.dialect.defaultVersion;\r\n            }\r\n\r\n            break;\r\n          case 'standard_conforming_strings':\r\n            connection.standard_conforming_strings = message.parameterValue;\r\n            break;\r\n        }\r\n      };\r\n\r\n      const endHandler = () => {\r\n        debug('connection timeout');\r\n        if (!responded) {\r\n          reject(new sequelizeErrors.ConnectionTimedOutError(new Error('Connection timed out')));\r\n        }\r\n      };\r\n\r\n      // If we didn't ever hear from the client.connect() callback the connection timeout\r\n      // node-postgres does not treat this as an error since no active query was ever emitted\r\n      connection.once('end', endHandler);\r\n\r\n      if (!this.sequelize.config.native) {\r\n        // Receive various server parameters for further configuration\r\n        connection.connection.on('parameterStatus', parameterHandler);\r\n      }\r\n\r\n      connection.connect(err => {\r\n        responded = true;\r\n\r\n        if (!this.sequelize.config.native) {\r\n          // remove parameter handler\r\n          connection.connection.removeListener('parameterStatus', parameterHandler);\r\n        }\r\n\r\n        if (err) {\r\n          if (err.code) {\r\n            switch (err.code) {\r\n              case 'ECONNREFUSED':\r\n                reject(new sequelizeErrors.ConnectionRefusedError(err));\r\n                break;\r\n              case 'ENOTFOUND':\r\n                reject(new sequelizeErrors.HostNotFoundError(err));\r\n                break;\r\n              case 'EHOSTUNREACH':\r\n                reject(new sequelizeErrors.HostNotReachableError(err));\r\n                break;\r\n              case 'EINVAL':\r\n                reject(new sequelizeErrors.InvalidConnectionError(err));\r\n                break;\r\n              default:\r\n                reject(new sequelizeErrors.ConnectionError(err));\r\n                break;\r\n            }\r\n          } else {\r\n            reject(new sequelizeErrors.ConnectionError(err));\r\n          }\r\n        } else {\r\n          debug('connection acquired');\r\n          connection.removeListener('end', endHandler);\r\n          resolve(connection);\r\n        }\r\n      });\r\n    });\r\n\r\n    let query = '';\r\n\r\n    if (this.sequelize.options.standardConformingStrings !== false && connection.standard_conforming_strings !== 'on') {\r\n      // Disable escape characters in strings\r\n      // see https://github.com/sequelize/sequelize/issues/3545 (security issue)\r\n      // see https://www.postgresql.org/docs/current/static/runtime-config-compatible.html#GUC-STANDARD-CONFORMING-STRINGS\r\n      query += 'SET standard_conforming_strings=on;';\r\n    }\r\n\r\n    if (this.sequelize.options.clientMinMessages !== undefined) {\r\n      console.warn('Usage of \"options.clientMinMessages\" is deprecated and will be removed in v7.');\r\n      console.warn('Please use the sequelize option \"dialectOptions.clientMinMessages\" instead.');\r\n    }\r\n\r\n    // Redshift dosen't support client_min_messages, use 'ignore' to skip this settings.\r\n    // If no option, the default value in sequelize is 'warning'\r\n    if (!(config.dialectOptions && config.dialectOptions.clientMinMessages && config.dialectOptions.clientMinMessages.toLowerCase() === 'ignore'\r\n            || this.sequelize.options.clientMinMessages === false)) {\r\n      const clientMinMessages = config.dialectOptions && config.dialectOptions.clientMinMessages || this.sequelize.options.clientMinMessages || 'warning';\r\n      query += `SET client_min_messages TO ${clientMinMessages};`;\r\n\r\n    }\r\n\r\n    if (!this.sequelize.config.keepDefaultTimezone) {\r\n      if (isValidTimeZone(this.sequelize.options.timezone)) {\r\n        query += `SET TIME ZONE '${this.sequelize.options.timezone}';`;\r\n      } else {\r\n        query += `SET TIME ZONE INTERVAL '${this.sequelize.options.timezone}' HOUR TO MINUTE;`;\r\n      }\r\n    }\r\n\r\n    if (query) {\r\n      await connection.query(query);\r\n    }\r\n\r\n    if (Object.keys(this.nameOidMap).length === 0\r\n      && this.enumOids.oids.length === 0\r\n      && this.enumOids.arrayOids.length === 0) {\r\n      await this._refreshDynamicOIDs(connection);\r\n    }\r\n\r\n    // Don't let a Postgres restart (or error) to take down the whole app\r\n    connection.on('error', error => {\r\n      connection._invalid = true;\r\n      debug(`connection error ${error.code || error.message}`);\r\n      this.pool.destroy(connection);\r\n    });\r\n\r\n    return connection;\r\n  }\r\n\r\n  async disconnect(connection) {\r\n    if (connection._ending) {\r\n      debug('connection tried to disconnect but was already at ENDING state');\r\n\r\n      return;\r\n    }\r\n\r\n    return await promisify(callback => connection.end(callback))();\r\n  }\r\n\r\n  validate(connection) {\r\n    return !connection._invalid && !connection._ending;\r\n  }\r\n\r\n  async _refreshDynamicOIDs(connection) {\r\n    const databaseVersion = this.sequelize.options.databaseVersion;\r\n    const supportedVersion = '8.3.0';\r\n\r\n    // Check for supported version\r\n    if ((databaseVersion && semver.gte(databaseVersion, supportedVersion)) === false) {\r\n      return;\r\n    }\r\n\r\n    const results = await (connection || this.sequelize).query(\r\n      'WITH ranges AS ('\r\n      + '  SELECT pg_range.rngtypid, pg_type.typname AS rngtypname,'\r\n      + '         pg_type.typarray AS rngtyparray, pg_range.rngsubtype'\r\n      + '    FROM pg_range LEFT OUTER JOIN pg_type ON pg_type.oid = pg_range.rngtypid'\r\n      + ')'\r\n      + 'SELECT pg_type.typname, pg_type.typtype, pg_type.oid, pg_type.typarray,'\r\n      + '       ranges.rngtypname, ranges.rngtypid, ranges.rngtyparray'\r\n      + '  FROM pg_type LEFT OUTER JOIN ranges ON pg_type.oid = ranges.rngsubtype'\r\n      + ' WHERE (pg_type.typtype IN(\\'b\\', \\'e\\'));',\r\n    );\r\n\r\n    let result = Array.isArray(results) ? results.pop() : results;\r\n\r\n    // When searchPath is prepended then two statements are executed and the result is\r\n    // an array of those two statements. First one is the SET search_path and second is\r\n    // the SELECT query result.\r\n    if (Array.isArray(result) && result[0].command === 'SET') {\r\n      result = result.pop();\r\n    }\r\n\r\n    const newNameOidMap = {};\r\n    const newEnumOids = { oids: [], arrayOids: [] };\r\n\r\n    for (const row of result.rows) {\r\n      // Mapping enums, handled separatedly\r\n      if (row.typtype === 'e') {\r\n        newEnumOids.oids.push(row.oid);\r\n        if (row.typarray) {\r\n          newEnumOids.arrayOids.push(row.typarray);\r\n        }\r\n\r\n        continue;\r\n      }\r\n\r\n      // Mapping base types and their arrays\r\n      newNameOidMap[row.typname] = { oid: row.oid };\r\n      if (row.typarray) {\r\n        newNameOidMap[row.typname].arrayOid = row.typarray;\r\n      }\r\n\r\n      // Mapping ranges(of base types) and their arrays\r\n      if (row.rngtypid) {\r\n        newNameOidMap[row.typname].rangeOid = row.rngtypid;\r\n        if (row.rngtyparray) {\r\n          newNameOidMap[row.typname].arrayRangeOid = row.rngtyparray;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Replace all OID mappings. Avoids temporary empty OID mappings.\r\n    this.nameOidMap = newNameOidMap;\r\n    this.enumOids = newEnumOids;\r\n\r\n    this.refreshTypeParser(dataTypes.postgres);\r\n  }\r\n\r\n  _clearDynamicOIDs() {\r\n    this.nameOidMap = {};\r\n    this.enumOids = { oids: [], arrayOids: [] };\r\n  }\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
