{
  "version": 3,
  "sources": ["../../../src/dialects/postgres/index.js"],
  "sourcesContent": ["'use strict';\r\n\r\nimport { createSpecifiedOrderedBindCollector } from '../../utils/sql';\r\n\r\nconst _ = require('lodash');\r\nconst { AbstractDialect } = require('../abstract');\r\nconst { PostgresConnectionManager } = require('./connection-manager');\r\nconst { PostgresQuery } = require('./query');\r\nconst { PostgresQueryGenerator } = require('./query-generator');\r\nconst DataTypes = require('../../data-types').postgres;\r\nconst { PostgresQueryInterface } = require('./query-interface');\r\n\r\nexport class PostgresDialect extends AbstractDialect {\r\n  static supports = _.merge(_.cloneDeep(AbstractDialect.supports), {\r\n    'DEFAULT VALUES': true,\r\n    EXCEPTION: true,\r\n    'ON DUPLICATE KEY': false,\r\n    'ORDER NULLS': true,\r\n    returnValues: {\r\n      returning: true,\r\n    },\r\n    bulkDefault: true,\r\n    schemas: true,\r\n    lock: true,\r\n    lockOf: true,\r\n    lockKey: true,\r\n    lockOuterJoinFailure: true,\r\n    skipLocked: true,\r\n    forShare: 'FOR SHARE',\r\n    index: {\r\n      concurrently: true,\r\n      using: 2,\r\n      where: true,\r\n      functionBased: true,\r\n      operator: true,\r\n    },\r\n    inserts: {\r\n      onConflictDoNothing: ' ON CONFLICT DO NOTHING',\r\n      updateOnDuplicate: ' ON CONFLICT DO UPDATE SET',\r\n      conflictFields: true,\r\n    },\r\n    NUMERIC: true,\r\n    ARRAY: true,\r\n    RANGE: true,\r\n    GEOMETRY: true,\r\n    REGEXP: true,\r\n    IREGEXP: true,\r\n    GEOGRAPHY: true,\r\n    JSON: true,\r\n    JSONB: true,\r\n    HSTORE: true,\r\n    TSVECTOR: true,\r\n    deferrableConstraints: true,\r\n    searchPath: true,\r\n  });\r\n\r\n  constructor(sequelize) {\r\n    super();\r\n    this.sequelize = sequelize;\r\n    this.connectionManager = new PostgresConnectionManager(this, sequelize);\r\n    this.queryGenerator = new PostgresQueryGenerator({\r\n      _dialect: this,\r\n      sequelize,\r\n    });\r\n    this.queryInterface = new PostgresQueryInterface(\r\n      sequelize,\r\n      this.queryGenerator,\r\n    );\r\n  }\r\n\r\n  createBindCollector() {\r\n    return createSpecifiedOrderedBindCollector();\r\n  }\r\n}\r\n\r\nPostgresDialect.prototype.defaultVersion = '9.5.0'; // minimum supported version\r\nPostgresDialect.prototype.Query = PostgresQuery;\r\nPostgresDialect.prototype.DataTypes = DataTypes;\r\nPostgresDialect.prototype.name = 'postgres';\r\nPostgresDialect.prototype.TICK_CHAR = '\"';\r\nPostgresDialect.prototype.TICK_CHAR_LEFT = PostgresDialect.prototype.TICK_CHAR;\r\nPostgresDialect.prototype.TICK_CHAR_RIGHT = PostgresDialect.prototype.TICK_CHAR;\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,iBAAoD;AAEpD,MAAM,IAAI,QAAQ,QAAQ;AAC1B,MAAM,EAAE,oBAAoB,QAAQ,aAAa;AACjD,MAAM,EAAE,8BAA8B,QAAQ,sBAAsB;AACpE,MAAM,EAAE,kBAAkB,QAAQ,SAAS;AAC3C,MAAM,EAAE,2BAA2B,QAAQ,mBAAmB;AAC9D,MAAM,YAAY,QAAQ,kBAAkB,EAAE;AAC9C,MAAM,EAAE,2BAA2B,QAAQ,mBAAmB;AAEvD,MAAM,wBAAwB,gBAAgB;AAAA,SAC5C,WAAW,EAAE,MAAM,EAAE,UAAU,gBAAgB,QAAQ,GAAG;AAAA,IAC/D,kBAAkB;AAAA,IAClB,WAAW;AAAA,IACX,oBAAoB;AAAA,IACpB,eAAe;AAAA,IACf,cAAc;AAAA,MACZ,WAAW;AAAA,IACb;AAAA,IACA,aAAa;AAAA,IACb,SAAS;AAAA,IACT,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,SAAS;AAAA,IACT,sBAAsB;AAAA,IACtB,YAAY;AAAA,IACZ,UAAU;AAAA,IACV,OAAO;AAAA,MACL,cAAc;AAAA,MACd,OAAO;AAAA,MACP,OAAO;AAAA,MACP,eAAe;AAAA,MACf,UAAU;AAAA,IACZ;AAAA,IACA,SAAS;AAAA,MACP,qBAAqB;AAAA,MACrB,mBAAmB;AAAA,MACnB,gBAAgB;AAAA,IAClB;AAAA,IACA,SAAS;AAAA,IACT,OAAO;AAAA,IACP,OAAO;AAAA,IACP,UAAU;AAAA,IACV,QAAQ;AAAA,IACR,SAAS;AAAA,IACT,WAAW;AAAA,IACX,MAAM;AAAA,IACN,OAAO;AAAA,IACP,QAAQ;AAAA,IACR,UAAU;AAAA,IACV,uBAAuB;AAAA,IACvB,YAAY;AAAA,EACd,CAAC;AAAA,EAED,YAAY,WAAW;AACrB,UAAM;AACN,SAAK,YAAY;AACjB,SAAK,oBAAoB,IAAI,0BAA0B,MAAM,SAAS;AACtE,SAAK,iBAAiB,IAAI,uBAAuB;AAAA,MAC/C,UAAU;AAAA,MACV;AAAA,IACF,CAAC;AACD,SAAK,iBAAiB,IAAI,uBACxB,WACA,KAAK,cACP;AAAA,EACF;AAAA,EAEA,sBAAsB;AACpB,WAAO,oDAAoC;AAAA,EAC7C;AACF;AAEA,gBAAgB,UAAU,iBAAiB;AAC3C,gBAAgB,UAAU,QAAQ;AAClC,gBAAgB,UAAU,YAAY;AACtC,gBAAgB,UAAU,OAAO;AACjC,gBAAgB,UAAU,YAAY;AACtC,gBAAgB,UAAU,iBAAiB,gBAAgB,UAAU;AACrE,gBAAgB,UAAU,kBAAkB,gBAAgB,UAAU;",
  "names": []
}
