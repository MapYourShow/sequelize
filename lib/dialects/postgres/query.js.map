{
  "version": 3,
  "sources": ["../../../src/dialects/postgres/query.js"],
  "sourcesContent": ["'use strict';\r\n\r\nconst { AbstractQuery } = require('../abstract/query');\r\nconst { QueryTypes } = require('../../query-types');\r\nconst sequelizeErrors = require('../../errors');\r\nconst _ = require('lodash');\r\nconst { logger } = require('../../utils/logger');\r\n\r\nconst debug = logger.debugContext('sql:pg');\r\n\r\nexport class PostgresQuery extends AbstractQuery {\r\n  async run(sql, parameters) {\r\n    const { connection } = this;\r\n\r\n    if (!_.isEmpty(this.options.searchPath)) {\r\n      sql = this.sequelize.getQueryInterface().queryGenerator.setSearchPath(this.options.searchPath) + sql;\r\n    }\r\n\r\n    if (this.sequelize.options.minifyAliases && this.options.includeAliases) {\r\n      for (const [alias, original] of _.toPairs(this.options.includeAliases)\r\n        // Sorting to replace the longest aliases first to prevent alias collision\r\n        .sort((a, b) => b[1].length - a[1].length)) {\r\n        const reg = new RegExp(_.escapeRegExp(original), 'g');\r\n\r\n        sql = sql.replace(reg, alias);\r\n      }\r\n    }\r\n\r\n    this.sql = sql;\r\n\r\n    const query = new Promise((resolve, reject) => {\r\n      if (parameters && parameters.length > 0) {\r\n        connection.query(sql, parameters, (error, result) => (error ? reject(error) : resolve(result)));\r\n      } else {\r\n        connection.query(sql, (error, result) => (error ? reject(error) : resolve(result)));\r\n      }\r\n    });\r\n\r\n    const complete = this._logQuery(sql, debug, parameters);\r\n\r\n    let queryResult;\r\n    const errForStack = new Error();\r\n\r\n    try {\r\n      queryResult = await query;\r\n    } catch (error) {\r\n      // set the client so that it will be reaped if the connection resets while executing\r\n      if (error.code === 'ECONNRESET'\r\n        // https://github.com/sequelize/sequelize/pull/14090\r\n        // pg-native throws custom exception or libpq formatted errors\r\n        || /Unable to set non-blocking to true/i.test(error)\r\n        || /SSL SYSCALL error: EOF detected/i.test(error)\r\n        || /Local: Authentication failure/i.test(error)\r\n      ) {\r\n        connection._invalid = true;\r\n      }\r\n\r\n      error.sql = sql;\r\n      error.parameters = parameters;\r\n      throw this.formatError(error, errForStack.stack);\r\n    }\r\n\r\n    complete();\r\n\r\n    let rows = Array.isArray(queryResult)\r\n      ? queryResult.reduce((allRows, r) => allRows.concat(r.rows || []), [])\r\n      : queryResult.rows;\r\n    const rowCount = Array.isArray(queryResult)\r\n      ? queryResult.reduce(\r\n        (count, r) => (Number.isFinite(r.rowCount) ? count + r.rowCount : count),\r\n        0,\r\n      )\r\n      : queryResult.rowCount || 0;\r\n\r\n    if (this.sequelize.options.minifyAliases && this.options.aliasesMapping) {\r\n      rows = rows\r\n        .map(row => _.toPairs(row)\r\n          .reduce((acc, [key, value]) => {\r\n            const mapping = this.options.aliasesMapping.get(key);\r\n            acc[mapping || key] = value;\r\n\r\n            return acc;\r\n          }, {}));\r\n    }\r\n\r\n    const isTableNameQuery = sql.startsWith('SELECT table_name FROM information_schema.tables');\r\n    const isRelNameQuery = sql.startsWith('SELECT relname FROM pg_class WHERE oid IN');\r\n\r\n    if (isRelNameQuery) {\r\n      return rows.map(row => ({\r\n        name: row.relname,\r\n        tableName: row.relname.split('_')[0],\r\n      }));\r\n    }\r\n\r\n    if (isTableNameQuery) {\r\n      return rows.map(row => Object.values(row));\r\n    }\r\n\r\n    if (rows[0] && rows[0].sequelize_caught_exception !== undefined) {\r\n      if (rows[0].sequelize_caught_exception !== null) {\r\n        throw this.formatError({\r\n          sql,\r\n          parameters,\r\n          code: '23505',\r\n          detail: rows[0].sequelize_caught_exception,\r\n        });\r\n      }\r\n\r\n      for (const row of rows) {\r\n        delete row.sequelize_caught_exception;\r\n      }\r\n    }\r\n\r\n    if (this.isShowIndexesQuery()) {\r\n      for (const row of rows) {\r\n        const attributes = /on .*? (?:using .*?\\s)?\\(([^]*)\\)/gi.exec(row.definition)[1].split(',');\r\n\r\n        // Map column index in table to column name\r\n        const columns = _.zipObject(\r\n          row.column_indexes,\r\n          this.sequelize.getQueryInterface().queryGenerator.fromArray(row.column_names),\r\n        );\r\n        delete row.column_indexes;\r\n        delete row.column_names;\r\n\r\n        let field;\r\n        let attribute;\r\n\r\n        // Indkey is the order of attributes in the index, specified by a string of attribute indexes\r\n        row.fields = row.indkey.split(' ').map((indKey, index) => {\r\n          field = columns[indKey];\r\n          // for functional indices indKey = 0\r\n          if (!field) {\r\n            return null;\r\n          }\r\n\r\n          attribute = attributes[index];\r\n\r\n          return {\r\n            attribute: field,\r\n            collate: /COLLATE \"(.*?)\"/.test(attribute) ? /COLLATE \"(.*?)\"/.exec(attribute)[1] : undefined,\r\n            order: attribute.includes('DESC') ? 'DESC' : attribute.includes('ASC') ? 'ASC' : undefined,\r\n            length: undefined,\r\n          };\r\n        }).filter(n => n !== null);\r\n        delete row.columns;\r\n      }\r\n\r\n      return rows;\r\n    }\r\n\r\n    if (this.isForeignKeysQuery()) {\r\n      const result = [];\r\n      for (const row of rows) {\r\n        let defParts;\r\n        if (row.condef !== undefined && (defParts = row.condef.match(/FOREIGN KEY \\((.+)\\) REFERENCES (.+)\\((.+)\\)( ON (UPDATE|DELETE) (CASCADE|RESTRICT))?( ON (UPDATE|DELETE) (CASCADE|RESTRICT))?/))) {\r\n          row.id = row.constraint_name;\r\n          row.table = defParts[2];\r\n          row.from = defParts[1];\r\n          row.to = defParts[3];\r\n          let i;\r\n          for (i = 5; i <= 8; i += 3) {\r\n            if (/(UPDATE|DELETE)/.test(defParts[i])) {\r\n              row[`on_${defParts[i].toLowerCase()}`] = defParts[i + 1];\r\n            }\r\n          }\r\n        }\r\n\r\n        result.push(row);\r\n      }\r\n\r\n      return result;\r\n    }\r\n\r\n    if (this.isSelectQuery()) {\r\n      let result = rows;\r\n      // Postgres will treat tables as case-insensitive, so fix the case\r\n      // of the returned values to match attributes\r\n      if (this.options.raw === false && this.sequelize.options.quoteIdentifiers === false) {\r\n        const attrsMap = _.reduce(this.model.rawAttributes, (m, v, k) => {\r\n          m[k.toLowerCase()] = k;\r\n\r\n          return m;\r\n        }, {});\r\n        result = rows.map(row => {\r\n          return _.mapKeys(row, (value, key) => {\r\n            const targetAttr = attrsMap[key];\r\n            if (typeof targetAttr === 'string' && targetAttr !== key) {\r\n              return targetAttr;\r\n            }\r\n\r\n            return key;\r\n          });\r\n        });\r\n      }\r\n\r\n      return this.handleSelectQuery(result);\r\n    }\r\n\r\n    if (QueryTypes.DESCRIBE === this.options.type) {\r\n      const result = {};\r\n\r\n      for (const row of rows) {\r\n        result[row.Field] = {\r\n          type: row.Type.toUpperCase(),\r\n          allowNull: row.Null === 'YES',\r\n          defaultValue: row.Default,\r\n          comment: row.Comment,\r\n          special: row.special ? this.sequelize.getQueryInterface().queryGenerator.fromArray(row.special) : [],\r\n          primaryKey: row.Constraint === 'PRIMARY KEY',\r\n        };\r\n\r\n        if (result[row.Field].type === 'BOOLEAN') {\r\n          result[row.Field].defaultValue = { false: false, true: true }[result[row.Field].defaultValue];\r\n\r\n          if (result[row.Field].defaultValue === undefined) {\r\n            result[row.Field].defaultValue = null;\r\n          }\r\n        }\r\n\r\n        if (typeof result[row.Field].defaultValue === 'string') {\r\n          result[row.Field].defaultValue = result[row.Field].defaultValue.replace(/'/g, '');\r\n\r\n          if (result[row.Field].defaultValue.includes('::')) {\r\n            const split = result[row.Field].defaultValue.split('::');\r\n            if (split[1].toLowerCase() !== 'regclass)') {\r\n              result[row.Field].defaultValue = split[0];\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return result;\r\n    }\r\n\r\n    if (this.isVersionQuery()) {\r\n      return rows[0].server_version;\r\n    }\r\n\r\n    if (this.isShowOrDescribeQuery()) {\r\n      return rows;\r\n    }\r\n\r\n    if (QueryTypes.BULKUPDATE === this.options.type) {\r\n      if (!this.options.returning) {\r\n        return Number.parseInt(rowCount, 10);\r\n      }\r\n\r\n      return this.handleSelectQuery(rows);\r\n    }\r\n\r\n    if (QueryTypes.BULKDELETE === this.options.type) {\r\n      return Number.parseInt(rowCount, 10);\r\n    }\r\n\r\n    if (this.isInsertQuery() || this.isUpdateQuery() || this.isUpsertQuery()) {\r\n      if (this.instance && this.instance.dataValues) {\r\n        // If we are creating an instance, and we get no rows, the create failed but did not throw.\r\n        // This probably means a conflict happened and was ignored, to avoid breaking a transaction.\r\n        if (this.isInsertQuery() && !this.isUpsertQuery() && rowCount === 0) {\r\n          throw new sequelizeErrors.EmptyResultError();\r\n        }\r\n\r\n        for (const key in rows[0]) {\r\n          if (Object.prototype.hasOwnProperty.call(rows[0], key)) {\r\n            const record = rows[0][key];\r\n\r\n            const attr = _.find(this.model.rawAttributes, attribute => attribute.fieldName === key || attribute.field === key);\r\n\r\n            this.instance.dataValues[attr && attr.fieldName || key] = record;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (this.isUpsertQuery()) {\r\n        return [\r\n          this.instance,\r\n          null,\r\n        ];\r\n      }\r\n\r\n      return [\r\n        this.instance || rows && (this.options.plain && rows[0] || rows) || undefined,\r\n        rowCount,\r\n      ];\r\n    }\r\n\r\n    if (this.isRawQuery()) {\r\n      return [rows, queryResult];\r\n    }\r\n\r\n    return rows;\r\n  }\r\n\r\n  formatError(err, errStack) {\r\n    let match;\r\n    let table;\r\n    let index;\r\n    let fields;\r\n    let errors;\r\n    let message;\r\n\r\n    const code = err.code || err.sqlState;\r\n    const errMessage = err.message || err.messagePrimary;\r\n    const errDetail = err.detail || err.messageDetail;\r\n\r\n    switch (code) {\r\n      case '23503':\r\n        index = errMessage.match(/violates foreign key constraint \"(.+?)\"/);\r\n        index = index ? index[1] : undefined;\r\n        table = errMessage.match(/on table \"(.+?)\"/);\r\n        table = table ? table[1] : undefined;\r\n\r\n        return new sequelizeErrors.ForeignKeyConstraintError({\r\n          message: errMessage,\r\n          fields: null,\r\n          index,\r\n          table,\r\n          cause: err,\r\n          stack: errStack,\r\n        });\r\n      case '23505':\r\n        // there are multiple different formats of error messages for this error code\r\n        // this regex should check at least two\r\n        if (errDetail && (match = errDetail.replace(/\"/g, '').match(/Key \\((.*?)\\)=\\((.*?)\\)/))) {\r\n          fields = _.zipObject(match[1].split(', '), match[2].split(', '));\r\n          errors = [];\r\n          message = 'Validation error';\r\n\r\n          _.forOwn(fields, (value, field) => {\r\n            errors.push(new sequelizeErrors.ValidationErrorItem(\r\n              this.getUniqueConstraintErrorMessage(field),\r\n              'unique violation', // sequelizeErrors.ValidationErrorItem.Origins.DB,\r\n              field,\r\n              value,\r\n              this.instance,\r\n              'not_unique',\r\n            ));\r\n          });\r\n\r\n          if (this.model && this.model.uniqueKeys) {\r\n            _.forOwn(this.model.uniqueKeys, constraint => {\r\n              if (_.isEqual(constraint.fields, Object.keys(fields)) && Boolean(constraint.msg)) {\r\n                message = constraint.msg;\r\n\r\n                return false;\r\n              }\r\n            });\r\n          }\r\n\r\n          return new sequelizeErrors.UniqueConstraintError({ message, errors, cause: err, fields, stack: errStack });\r\n        }\r\n\r\n        return new sequelizeErrors.UniqueConstraintError({\r\n          message: errMessage,\r\n          cause: err,\r\n          stack: errStack,\r\n        });\r\n\r\n      case '23P01':\r\n        match = errDetail.match(/Key \\((.*?)\\)=\\((.*?)\\)/);\r\n\r\n        if (match) {\r\n          fields = _.zipObject(match[1].split(', '), match[2].split(', '));\r\n        }\r\n\r\n        message = 'Exclusion constraint error';\r\n\r\n        return new sequelizeErrors.ExclusionConstraintError({\r\n          message,\r\n          constraint: err.constraint,\r\n          fields,\r\n          table: err.table,\r\n          cause: err,\r\n          stack: errStack,\r\n        });\r\n\r\n      case '42704':\r\n        if (err.sql && /(constraint|index)/gi.test(err.sql)) {\r\n          message = 'Unknown constraint error';\r\n          index = errMessage.match(/(?:constraint|index) \"(.+?)\"/i);\r\n          index = index ? index[1] : undefined;\r\n          table = errMessage.match(/relation \"(.+?)\"/i);\r\n          table = table ? table[1] : undefined;\r\n\r\n          throw new sequelizeErrors.UnknownConstraintError({\r\n            message,\r\n            constraint: index,\r\n            fields,\r\n            table,\r\n            cause: err,\r\n            stack: errStack,\r\n          });\r\n        }\r\n\r\n      // falls through\r\n      default:\r\n        return new sequelizeErrors.DatabaseError(err, { stack: errStack });\r\n    }\r\n  }\r\n\r\n  isForeignKeysQuery() {\r\n    return /SELECT conname as constraint_name, pg_catalog\\.pg_get_constraintdef\\(r\\.oid, true\\) as condef FROM pg_catalog\\.pg_constraint r WHERE r\\.conrelid = \\(SELECT oid FROM pg_class WHERE relname = '.*' LIMIT 1\\) AND r\\.contype = 'f' ORDER BY 1;/.test(this.sql);\r\n  }\r\n\r\n  getInsertIdField() {\r\n    return 'id';\r\n  }\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
