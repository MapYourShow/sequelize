{
  "version": 3,
  "sources": ["../../src/associations/has-many.ts"],
  "sourcesContent": ["import isPlainObject from 'lodash/isPlainObject';\r\nimport upperFirst from 'lodash/upperFirst';\r\nimport { AssociationError } from '../errors/index.js';\r\nimport type {\r\n  Model,\r\n  CreateOptions,\r\n  CreationAttributes,\r\n  Filterable,\r\n  FindOptions,\r\n  InstanceUpdateOptions,\r\n  Transactionable,\r\n  ModelStatic,\r\n  AttributeNames, UpdateValues, Attributes,\r\n} from '../model';\r\nimport { Op } from '../operators';\r\nimport { col, fn } from '../sequelize';\r\nimport type { AllowArray } from '../utils';\r\nimport { isSameInitialModel } from '../utils/model-utils.js';\r\nimport type { MultiAssociationAccessors, MultiAssociationOptions, Association, AssociationOptions } from './base';\r\nimport { MultiAssociation } from './base';\r\nimport { BelongsTo } from './belongs-to.js';\r\nimport type { NormalizeBaseAssociationOptions } from './helpers';\r\nimport { defineAssociation, mixinMethods, normalizeBaseAssociationOptions } from './helpers';\r\n\r\n/**\r\n * One-to-many association.\r\n * See {@link Model.hasMany}\r\n *\r\n * Like with {@link HasOne}, the foreign key will be defined on the target model.\r\n *\r\n * In the API reference below, add the name of the association to the method, e.g. for `User.hasMany(Project)` the getter will be `user.getProjects()`.\r\n * If the association is aliased, use the alias instead, e.g. `User.hasMany(Project, { as: 'jobs' })` will be `user.getJobs()`.\r\n *\r\n * @typeParam S The model on which {@link Model.hasMany} has been called, on which the association methods will be added.\r\n * @typeParam T The model passed to {@link Model.hasMany}. This model will receive the Foreign Key attribute.\r\n * @typeParam SourceKey The name of the attribute that the foreign key in the target model will reference.\r\n * @typeParam TargetKey The name of the Foreign Key attribute on the Target model.\r\n * @typeParam TargetPrimaryKey The name of the Primary Key attribute of the Target model. Used by {@link HasManySetAssociationsMixin} & others.\r\n */\r\nexport class HasMany<\r\n  S extends Model = Model,\r\n  T extends Model = Model,\r\n  SourceKey extends AttributeNames<S> = any,\r\n  TargetKey extends AttributeNames<T> = any,\r\n  TargetPrimaryKey extends AttributeNames<T> = any,\r\n> extends MultiAssociation<S, T, TargetKey, TargetPrimaryKey, NormalizedHasManyOptions<SourceKey, TargetKey>> {\r\n  accessors: MultiAssociationAccessors;\r\n\r\n  get foreignKey(): TargetKey {\r\n    return this.inverse.foreignKey;\r\n  }\r\n\r\n  /**\r\n   * The column name of the foreign key (on the target model)\r\n   */\r\n  get identifierField(): string {\r\n    return this.inverse.identifierField;\r\n  }\r\n\r\n  /**\r\n   * The name of the attribute the foreign key points to.\r\n   *\r\n   * This key is on the Source Model.\r\n   * The {@link Association.foreignKey} is on the Target Model.\r\n   */\r\n  get sourceKey(): SourceKey {\r\n    return this.inverse.targetKey;\r\n  }\r\n\r\n  /**\r\n   * @deprecated use {@link sourceKey}\r\n   */\r\n  get sourceKeyAttribute(): SourceKey {\r\n    return this.sourceKey;\r\n  }\r\n\r\n  get sourceKeyField(): string {\r\n    return this.inverse.targetKeyField;\r\n  }\r\n\r\n  readonly inverse: BelongsTo<T, S, TargetKey, SourceKey>;\r\n\r\n  constructor(\r\n    secret: symbol,\r\n    source: ModelStatic<S>,\r\n    target: ModelStatic<T>,\r\n    options: NormalizedHasManyOptions<SourceKey, TargetKey>,\r\n    parent?: Association,\r\n  ) {\r\n    if (\r\n      options.sourceKey\r\n      && !source.getAttributes()[options.sourceKey]\r\n    ) {\r\n      throw new Error(`Unknown attribute \"${options.sourceKey}\" passed as sourceKey, define this attribute on model \"${source.name}\" first`);\r\n    }\r\n\r\n    if ('keyType' in options) {\r\n      throw new TypeError('Option \"keyType\" has been removed from the BelongsTo\\'s options. Set \"foreignKey.type\" instead.');\r\n    }\r\n\r\n    if ('through' in options) {\r\n      throw new Error('The \"through\" option is not available in hasMany. N:M associations are defined using belongsToMany instead.');\r\n    }\r\n\r\n    super(secret, source, target, options, parent);\r\n\r\n    this.inverse = BelongsTo.associate(secret, target, source, {\r\n      as: options.inverse?.as,\r\n      scope: options.inverse?.scope,\r\n      foreignKey: options.foreignKey,\r\n      targetKey: options.sourceKey,\r\n      foreignKeyConstraints: options.foreignKeyConstraints,\r\n      hooks: options.hooks,\r\n    }, this);\r\n\r\n    // Get singular and plural names\r\n    // try to uppercase the first letter, unless the model forbids it\r\n    const plural = upperFirst(this.options.name.plural);\r\n    const singular = upperFirst(this.options.name.singular);\r\n\r\n    this.accessors = {\r\n      get: `get${plural}`,\r\n      set: `set${plural}`,\r\n      addMultiple: `add${plural}`,\r\n      add: `add${singular}`,\r\n      create: `create${singular}`,\r\n      remove: `remove${singular}`,\r\n      removeMultiple: `remove${plural}`,\r\n      hasSingle: `has${singular}`,\r\n      hasAll: `has${plural}`,\r\n      count: `count${plural}`,\r\n    };\r\n\r\n    this.#mixin(source.prototype);\r\n  }\r\n\r\n  static associate<\r\n    S extends Model,\r\n    T extends Model,\r\n    SourceKey extends AttributeNames<S>,\r\n    TargetKey extends AttributeNames<T>,\r\n    >(\r\n    secret: symbol,\r\n    source: ModelStatic<S>,\r\n    target: ModelStatic<T>,\r\n    options: HasManyOptions<SourceKey, TargetKey> = {},\r\n    parent?: Association<any>,\r\n  ): HasMany<S, T, SourceKey, TargetKey> {\r\n\r\n    return defineAssociation<\r\n      HasMany<S, T, SourceKey, TargetKey>,\r\n      HasManyOptions<SourceKey, TargetKey>,\r\n      NormalizedHasManyOptions<SourceKey, TargetKey>\r\n    >(HasMany, source, target, options, parent, normalizeBaseAssociationOptions, normalizedOptions => {\r\n      // self-associations must always set their 'as' parameter\r\n      if (isSameInitialModel(source, target)\r\n        // use 'options' because this will always be set in 'newOptions'\r\n        && (!options.as || !options.inverse?.as || options.as === options.inverse.as)) {\r\n        throw new AssociationError('Both options \"as\" and \"inverse.as\" must be defined for hasMany self-associations, and their value must be different.');\r\n      }\r\n\r\n      return new HasMany(secret, source, target, normalizedOptions, parent);\r\n    });\r\n  }\r\n\r\n  #mixin(mixinTargetPrototype: Model) {\r\n    mixinMethods(\r\n      this,\r\n      mixinTargetPrototype,\r\n      ['get', 'count', 'hasSingle', 'hasAll', 'set', 'add', 'addMultiple', 'remove', 'removeMultiple', 'create'],\r\n      {\r\n        hasSingle: 'has',\r\n        hasAll: 'has',\r\n        addMultiple: 'add',\r\n        removeMultiple: 'remove',\r\n      },\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get everything currently associated with this, using an optional where clause.\r\n   *\r\n   * @param instances source instances\r\n   * @param options find options\r\n   */\r\n  async get(instances: S, options?: HasManyGetAssociationsMixinOptions<T>): Promise<T[]>;\r\n  async get(instances: S[], options?: HasManyGetAssociationsMixinOptions<T>): Promise<Map<any, T[]>>;\r\n  async get(instances: S | S[], options: HasManyGetAssociationsMixinOptions<T> = {}): Promise<T[] | Map<any, T[]>> {\r\n    let isManyMode = true;\r\n    if (!Array.isArray(instances)) {\r\n      isManyMode = false;\r\n      instances = [instances];\r\n    }\r\n\r\n    const findOptions: FindOptions = { ...options };\r\n\r\n    const where = Object.create(null);\r\n\r\n    // TODO: scopes should be combined using AND instance of overwriting.\r\n    if (this.scope) {\r\n      Object.assign(where, this.scope);\r\n    }\r\n\r\n    let values;\r\n    if (instances.length > 1) {\r\n      values = instances.map(instance => instance.get(this.sourceKey, { raw: true }));\r\n\r\n      if (findOptions.limit && instances.length > 1) {\r\n        findOptions.groupedLimit = {\r\n          limit: findOptions.limit,\r\n          on: this, // association\r\n          values,\r\n        };\r\n\r\n        delete findOptions.limit;\r\n      } else {\r\n        where[this.foreignKey] = {\r\n          [Op.in]: values,\r\n        };\r\n        delete findOptions.groupedLimit;\r\n      }\r\n    } else {\r\n      where[this.foreignKey] = instances[0].get(this.sourceKey, { raw: true });\r\n    }\r\n\r\n    findOptions.where = findOptions.where\r\n      ? { [Op.and]: [where, findOptions.where] }\r\n      : where;\r\n\r\n    let Model = this.target;\r\n    if (options.scope != null) {\r\n      if (!options.scope) {\r\n        Model = Model.unscoped();\r\n      } else if (options.scope !== true) { // 'true' means default scope. Which is the same as not doing anything.\r\n        Model = Model.scope(options.scope);\r\n      }\r\n    }\r\n\r\n    if (options.schema != null) {\r\n      Model = Model.schema(options.schema, options.schemaDelimiter);\r\n    }\r\n\r\n    const results = await Model.findAll(findOptions);\r\n    if (!isManyMode) {\r\n      return results;\r\n    }\r\n\r\n    const result: Map<any, T[]> = new Map();\r\n    for (const instance of instances) {\r\n      result.set(instance.get(this.sourceKey, { raw: true }), []);\r\n    }\r\n\r\n    for (const instance of results) {\r\n      const value = instance.get(this.foreignKey, { raw: true });\r\n      result.get(value)!.push(instance);\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Count everything currently associated with this, using an optional where clause.\r\n   *\r\n   * @param instance the source instance\r\n   * @param options find & count options\r\n   */\r\n  async count(instance: S, options?: HasManyCountAssociationsMixinOptions<T>): Promise<number> {\r\n    const findOptions: HasManyGetAssociationsMixinOptions<T> = {\r\n      ...options,\r\n      raw: true,\r\n      plain: true,\r\n      attributes: [\r\n        [\r\n          fn(\r\n            'COUNT',\r\n            col(`${this.target.name}.${this.target.primaryKeyField}`),\r\n          ),\r\n          'count',\r\n        ],\r\n      ],\r\n    };\r\n\r\n    const result = await this.get(instance, findOptions);\r\n\r\n    return Number.parseInt(\r\n      // @ts-expect-error -- this.get() isn't designed to expect returning a raw output.\r\n      result.count,\r\n      10,\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Check if one or more rows are associated with `this`.\r\n   *\r\n   * @param sourceInstance the source instance\r\n   * @param targetInstances Can be an array of instances or their primary keys\r\n   * @param options Options passed to getAssociations\r\n   */\r\n  async has(\r\n    sourceInstance: S,\r\n    targetInstances: AllowArray<T | Exclude<T[TargetPrimaryKey], any[]>>,\r\n    options?: HasManyHasAssociationsMixinOptions<T>,\r\n  ): Promise<boolean> {\r\n    if (!Array.isArray(targetInstances)) {\r\n      targetInstances = [targetInstances];\r\n    }\r\n\r\n    const where = {\r\n      [Op.or]: targetInstances.map(instance => {\r\n        if (instance instanceof this.target) {\r\n          return (instance as T).where();\r\n        }\r\n\r\n        return {\r\n          [this.target.primaryKeyAttribute]: instance,\r\n        };\r\n      }),\r\n    };\r\n\r\n    const findOptions: HasManyGetAssociationsMixinOptions<T> = {\r\n      ...options,\r\n      scope: false,\r\n      attributes: [this.target.primaryKeyAttribute],\r\n      raw: true,\r\n      // TODO: current WhereOptions typings do not allow having 'WhereOptions' inside another 'WhereOptions'\r\n      // @ts-expect-error\r\n      where: {\r\n        [Op.and]: [\r\n          where,\r\n          options?.where,\r\n        ],\r\n      },\r\n    };\r\n\r\n    const associatedObjects = await this.get(sourceInstance, findOptions);\r\n\r\n    return associatedObjects.length === targetInstances.length;\r\n  }\r\n\r\n  /**\r\n   * Set the associated models by passing an array of persisted instances or their primary keys. Everything that is not in the passed array will be un-associated\r\n   *\r\n   * @param sourceInstance source instance to associate new instances with\r\n   * @param rawTargetInstances An array of persisted instances or primary key of instances to associate with this. Pass `null` to remove all associations.\r\n   * @param options Options passed to `target.findAll` and `update`.\r\n   */\r\n  async set(\r\n    sourceInstance: S,\r\n    rawTargetInstances: AllowArray<T | Exclude<T[TargetPrimaryKey], any[]>> | null,\r\n    options?: HasManySetAssociationsMixinOptions<T>,\r\n  ): Promise<void> {\r\n    const targetInstances = rawTargetInstances === null ? [] : this.toInstanceArray(rawTargetInstances);\r\n\r\n    const oldAssociations = await this.get(sourceInstance, { ...options, scope: false, raw: true });\r\n    const promises: Array<Promise<any>> = [];\r\n    const obsoleteAssociations = oldAssociations.filter(old => {\r\n      return !targetInstances.some(obj => {\r\n        // @ts-expect-error -- old is a raw result\r\n        return obj.get(this.target.primaryKeyAttribute) === old[this.target.primaryKeyAttribute];\r\n      });\r\n    });\r\n\r\n    const unassociatedObjects = targetInstances.filter(obj => {\r\n      return !oldAssociations.some(old => {\r\n        // @ts-expect-error -- old is a raw result\r\n        return obj.get(this.target.primaryKeyAttribute) === old[this.target.primaryKeyAttribute];\r\n      });\r\n    });\r\n\r\n    if (obsoleteAssociations.length > 0) {\r\n      // TODO: if foreign key cannot be null, delete instead (maybe behind flag) - https://github.com/sequelize/sequelize/issues/14048\r\n      promises.push(this.remove(sourceInstance, obsoleteAssociations, options));\r\n    }\r\n\r\n    if (unassociatedObjects.length > 0) {\r\n      const update = {\r\n        [this.foreignKey]: sourceInstance.get(this.sourceKey),\r\n        ...this.scope,\r\n      } as UpdateValues<T>;\r\n\r\n      const updateWhere = {\r\n        [this.target.primaryKeyAttribute]: unassociatedObjects.map(unassociatedObject => {\r\n          return unassociatedObject.get(this.target.primaryKeyAttribute);\r\n        }),\r\n      };\r\n\r\n      promises.push(this.target.unscoped().update(\r\n        update,\r\n        {\r\n          ...options,\r\n          where: updateWhere,\r\n        },\r\n      ));\r\n    }\r\n\r\n    await Promise.all(promises);\r\n  }\r\n\r\n  /**\r\n   * Associate one or more target rows with `this`. This method accepts a Model / string / number to associate a single row,\r\n   * or a mixed array of Model / string / numbers to associate multiple rows.\r\n   *\r\n   * @param sourceInstance the source instance\r\n   * @param [rawTargetInstances] A single instance or primary key, or a mixed array of persisted instances or primary keys\r\n   * @param [options] Options passed to `target.update`.\r\n   */\r\n  async add(\r\n    sourceInstance: S,\r\n    rawTargetInstances: AllowArray<T | Exclude<T[TargetPrimaryKey], any[]>>,\r\n    options: HasManyAddAssociationsMixinOptions<T> = {},\r\n  ): Promise<void> {\r\n    const targetInstances = this.toInstanceArray(rawTargetInstances);\r\n\r\n    if (targetInstances.length === 0) {\r\n      return;\r\n    }\r\n\r\n    const update = {\r\n      [this.foreignKey]: sourceInstance.get(this.sourceKey),\r\n      ...this.scope,\r\n    } as UpdateValues<T>;\r\n\r\n    const where = {\r\n      [this.target.primaryKeyAttribute]: targetInstances.map(unassociatedObject => {\r\n        return unassociatedObject.get(this.target.primaryKeyAttribute);\r\n      }),\r\n    };\r\n\r\n    await this.target.unscoped().update(update, { ...options, where });\r\n  }\r\n\r\n  /**\r\n   * Un-associate one or several target rows.\r\n   *\r\n   * @param sourceInstance instance to un associate instances with\r\n   * @param targetInstances Can be an Instance or its primary key, or a mixed array of instances and primary keys\r\n   * @param options Options passed to `target.update`\r\n   */\r\n  async remove(\r\n    sourceInstance: S,\r\n    targetInstances: AllowArray<T | Exclude<T[TargetPrimaryKey], any[]>>,\r\n    options: HasManyRemoveAssociationsMixinOptions<T> = {},\r\n  ): Promise<void> {\r\n    if (targetInstances == null) {\r\n      return;\r\n    }\r\n\r\n    if (!Array.isArray(targetInstances)) {\r\n      targetInstances = [targetInstances];\r\n    }\r\n\r\n    if (targetInstances.length === 0) {\r\n      return;\r\n    }\r\n\r\n    // TODO: if foreign key cannot be null, delete instead (maybe behind flag) - https://github.com/sequelize/sequelize/issues/14048\r\n    const update = {\r\n      [this.foreignKey]: null,\r\n    } as UpdateValues<T>;\r\n\r\n    const where = {\r\n      [this.foreignKey]: sourceInstance.get(this.sourceKey),\r\n      [this.target.primaryKeyAttribute]: targetInstances.map(targetInstance => {\r\n        if (targetInstance instanceof this.target) {\r\n          return (targetInstance as T).get(this.target.primaryKeyAttribute);\r\n        }\r\n\r\n        // raw entity\r\n        if (isPlainObject(targetInstance) && this.target.primaryKeyAttribute in targetInstance) {\r\n          // @ts-expect-error\r\n          return targetInstance[this.target.primaryKeyAttribute];\r\n        }\r\n\r\n        // primary key\r\n        return targetInstance;\r\n      }),\r\n    };\r\n\r\n    await this.target.unscoped().update(update, { ...options, where });\r\n  }\r\n\r\n  /**\r\n   * Create a new instance of the associated model and associate it with this.\r\n   *\r\n   * @param sourceInstance source instance\r\n   * @param values values for target model instance\r\n   * @param options Options passed to `target.create`\r\n   */\r\n  async create(\r\n    sourceInstance: S,\r\n    // @ts-expect-error -- {} is not always assignable to 'values', but Target.create will enforce this, not us.\r\n    values: CreationAttributes<T> = {},\r\n    options:\r\n      | HasManyCreateAssociationMixinOptions<T>\r\n      | HasManyCreateAssociationMixinOptions<T>['fields'] = {},\r\n  ): Promise<T> {\r\n    if (Array.isArray(options)) {\r\n      options = {\r\n        fields: options,\r\n      };\r\n    }\r\n\r\n    if (this.scope) {\r\n      for (const attribute of Object.keys(this.scope)) {\r\n        // TODO: fix the typing of {@link AssociationScope}\r\n        // @ts-expect-error\r\n        values[attribute] = this.scope[attribute];\r\n        if (options.fields) {\r\n          options.fields.push(attribute);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (options.fields) {\r\n      options.fields.push(this.foreignKey);\r\n    }\r\n\r\n    return this.target.create({\r\n      ...values,\r\n      [this.foreignKey]: sourceInstance.get(this.sourceKey),\r\n    }, options);\r\n  }\r\n}\r\n\r\n// workaround https://github.com/evanw/esbuild/issues/1260\r\nObject.defineProperty(HasMany, 'name', {\r\n  value: 'HasMany',\r\n});\r\n\r\nexport type NormalizedHasManyOptions<SourceKey extends string, TargetKey extends string> =\r\n  NormalizeBaseAssociationOptions<HasManyOptions<SourceKey, TargetKey>>;\r\n\r\n/**\r\n * Options provided when associating models with hasMany relationship\r\n */\r\nexport interface HasManyOptions<SourceKey extends string, TargetKey extends string>\r\n  extends MultiAssociationOptions<TargetKey> {\r\n\r\n  /**\r\n   * The name of the field to use as the key for the association in the source table. Defaults to the primary\r\n   * key of the source table\r\n   */\r\n  sourceKey?: SourceKey;\r\n\r\n  inverse?: {\r\n    as?: AssociationOptions<any>['as'],\r\n    scope?: AssociationOptions<any>['scope'],\r\n  };\r\n}\r\n\r\n/**\r\n * The options for the getAssociations mixin of the hasMany association.\r\n *\r\n * Can provide an optional where clause to limit the associated models through {@link HasManyGetAssociationsMixinOptions.where}.\r\n *\r\n * @see HasManyGetAssociationsMixin\r\n */\r\nexport interface HasManyGetAssociationsMixinOptions<T extends Model> extends FindOptions<Attributes<T>> {\r\n  /**\r\n   * Apply a scope on the related model, or remove its default scope by passing false.\r\n   */\r\n  scope?: string | string[] | boolean;\r\n\r\n  /**\r\n   * Apply a schema on the related model\r\n   */\r\n  schema?: string;\r\n  schemaDelimiter?: string;\r\n}\r\n\r\n/**\r\n * The getAssociations mixin applied to models with hasMany.\r\n * An example of usage is as follows:\r\n *\r\n * ```typescript\r\n * class User extends Model<InferAttributes<User>, InferCreationAttributes<User>> {\r\n *   declare getRoles: HasManyGetAssociationsMixin<Role>;\r\n * }\r\n *\r\n * User.hasMany(Role);\r\n * ```\r\n *\r\n * @see Model.hasMany\r\n */\r\nexport type HasManyGetAssociationsMixin<T extends Model> = (options?: HasManyGetAssociationsMixinOptions<T>) => Promise<T[]>;\r\n\r\n/**\r\n * The options for the setAssociations mixin of the hasMany association.\r\n *\r\n * @see HasManySetAssociationsMixin\r\n */\r\nexport interface HasManySetAssociationsMixinOptions<T extends Model>\r\n  extends FindOptions<Attributes<T>>, InstanceUpdateOptions<Attributes<T>> {}\r\n\r\n/**\r\n * The setAssociations mixin applied to models with hasMany.\r\n * An example of usage is as follows:\r\n *\r\n * ```typescript\r\n * class User extends Model<InferAttributes<User>, InferCreationAttributes<User>> {\r\n *   declare setRoles: HasManySetAssociationsMixin<Role, Role['id']>;\r\n * }\r\n *\r\n * User.hasMany(Role);\r\n * ```\r\n *\r\n * @see Model.hasMany\r\n */\r\nexport type HasManySetAssociationsMixin<T extends Model, TModelPrimaryKey> = (\r\n  newAssociations?: Array<T | TModelPrimaryKey>,\r\n  options?: HasManySetAssociationsMixinOptions<T>,\r\n) => Promise<void>;\r\n\r\n/**\r\n * The options for the addAssociations mixin of the hasMany association.\r\n *\r\n * @see HasManyAddAssociationsMixin\r\n */\r\nexport interface HasManyAddAssociationsMixinOptions<T extends Model>\r\n  extends InstanceUpdateOptions<Attributes<T>> {}\r\n\r\n/**\r\n * The addAssociations mixin applied to models with hasMany.\r\n * An example of usage is as follows:\r\n *\r\n * ```typescript\r\n * class User extends Model<InferAttributes<User>, InferCreationAttributes<User>> {\r\n *   declare addRoles: HasManyAddAssociationsMixin<Role, Role['id']>;\r\n * }\r\n *\r\n * User.hasMany(Role);\r\n * ```\r\n *\r\n * @see Model.hasMany\r\n */\r\nexport type HasManyAddAssociationsMixin<T extends Model, TModelPrimaryKey> = (\r\n  newAssociations?: Array<T | TModelPrimaryKey>,\r\n  options?: HasManyAddAssociationsMixinOptions<T>\r\n) => Promise<void>;\r\n\r\n/**\r\n * The options for the addAssociation mixin of the hasMany association.\r\n *\r\n * @see HasManyAddAssociationMixin\r\n */\r\nexport interface HasManyAddAssociationMixinOptions<T extends Model>\r\n  extends HasManyAddAssociationsMixinOptions<T> {}\r\n\r\n/**\r\n * The addAssociation mixin applied to models with hasMany.\r\n * An example of usage is as follows:\r\n *\r\n * ```typescript\r\n * class User extends Model<InferAttributes<User>, InferCreationAttributes<User>> {\r\n *   declare addRole: HasManyAddAssociationMixin<Role, Role['id']>;\r\n * }\r\n *\r\n * User.hasMany(Role);\r\n * ```\r\n *\r\n * @see Model.hasMany\r\n */\r\nexport type HasManyAddAssociationMixin<T extends Model, TModelPrimaryKey> = (\r\n  newAssociation?: T | TModelPrimaryKey,\r\n  options?: HasManyAddAssociationMixinOptions<T>\r\n) => Promise<void>;\r\n\r\n/**\r\n * The options for the createAssociation mixin of the hasMany association.\r\n *\r\n * @see HasManyCreateAssociationMixin\r\n */\r\nexport interface HasManyCreateAssociationMixinOptions<T extends Model>\r\n  extends CreateOptions<Attributes<T>> {}\r\n\r\n/**\r\n * The createAssociation mixin applied to models with hasMany.\r\n * An example of usage is as follows:\r\n *\r\n * ```typescript\r\n * class User extends Model<InferAttributes<User>, InferCreationAttributes<User>> {\r\n *   declare createRole: HasManyCreateAssociationMixin<Role>;\r\n * }\r\n *\r\n * User.hasMany(Role);\r\n * ```\r\n *\r\n * @see Model.hasMany\r\n */\r\nexport type HasManyCreateAssociationMixin<\r\n  TModel extends Model,\r\n  TForeignKey extends keyof CreationAttributes<TModel> = never,\r\n  TScope extends keyof CreationAttributes<TModel> = never,\r\n  > = (\r\n  values?: Omit<CreationAttributes<TModel>, TForeignKey | TScope>,\r\n  options?: HasManyCreateAssociationMixinOptions<TModel>\r\n) => Promise<TModel>;\r\n\r\n/**\r\n * The options for the removeAssociation mixin of the hasMany association.\r\n *\r\n * @see HasManyRemoveAssociationMixin\r\n */\r\nexport interface HasManyRemoveAssociationMixinOptions<T extends Model>\r\n  extends HasManyRemoveAssociationsMixinOptions<T> {}\r\n\r\n/**\r\n * The removeAssociation mixin applied to models with hasMany.\r\n * An example of usage is as follows:\r\n *\r\n * ```typescript\r\n * class User extends Model<InferAttributes<User>, InferCreationAttributes<User>> {\r\n *   declare removeRole: HasManyRemoveAssociationMixin<Role, Role['id']>;\r\n * }\r\n *\r\n * User.hasMany(Role);\r\n * ```\r\n *\r\n * @see Model.hasMany\r\n */\r\nexport type HasManyRemoveAssociationMixin<T extends Model, TModelPrimaryKey> = (\r\n  oldAssociated?: T | TModelPrimaryKey,\r\n  options?: HasManyRemoveAssociationMixinOptions<T>\r\n) => Promise<void>;\r\n\r\n/**\r\n * The options for the removeAssociations mixin of the hasMany association.\r\n *\r\n * @see HasManyRemoveAssociationsMixin\r\n */\r\nexport interface HasManyRemoveAssociationsMixinOptions<T extends Model>\r\n  extends InstanceUpdateOptions<Attributes<T>> {}\r\n\r\n/**\r\n * The removeAssociations mixin applied to models with hasMany.\r\n * An example of usage is as follows:\r\n *\r\n * ```typescript\r\n * class User extends Model<InferAttributes<User>, InferCreationAttributes<User>> {\r\n *   declare removeRoles: HasManyRemoveAssociationsMixin<Role, Role['id']>;\r\n * }\r\n *\r\n * User.hasMany(Role);\r\n * ```\r\n *\r\n * @see Model.hasMany\r\n */\r\nexport type HasManyRemoveAssociationsMixin<T extends Model, TModelPrimaryKey> = (\r\n  oldAssociateds?: Array<T | TModelPrimaryKey>,\r\n  options?: HasManyRemoveAssociationsMixinOptions<T>\r\n) => Promise<void>;\r\n\r\n/**\r\n * The options for the hasAssociation mixin of the hasMany association.\r\n *\r\n * @see HasManyHasAssociationMixin\r\n */\r\nexport interface HasManyHasAssociationMixinOptions<T extends Model>\r\n  extends HasManyGetAssociationsMixinOptions<T> {}\r\n\r\n/**\r\n * The hasAssociation mixin applied to models with hasMany.\r\n * An example of usage is as follows:\r\n *\r\n * ```typescript\r\n * class User extends Model<InferAttributes<User>, InferCreationAttributes<User>> {\r\n *   declare hasRole: HasManyHasAssociationMixin<Role, Role['id']>;\r\n * }\r\n *\r\n * User.hasMany(Role);\r\n * ```\r\n *\r\n * @see Model.hasMany\r\n */\r\nexport type HasManyHasAssociationMixin<TModel extends Model, TModelPrimaryKey> = (\r\n  target: TModel | TModelPrimaryKey,\r\n  options?: HasManyHasAssociationMixinOptions<TModel>,\r\n) => Promise<boolean>;\r\n\r\n/**\r\n * The options for the hasAssociations mixin of the hasMany association.\r\n *\r\n * @see HasManyHasAssociationsMixin\r\n */\r\nexport interface HasManyHasAssociationsMixinOptions<T extends Model>\r\n  extends HasManyGetAssociationsMixinOptions<T> {}\r\n\r\n/**\r\n * The removeAssociations mixin applied to models with hasMany.\r\n * An example of usage is as follows:\r\n *\r\n * ```typescript\r\n * class User extends Model<InferAttributes<User>, InferCreationAttributes<User>> {\r\n *   declare hasRoles: HasManyHasAssociationsMixin<Role, Role['id']>;\r\n * }\r\n *\r\n * User.hasMany(Role);\r\n * ```\r\n *\r\n * @see Model.hasMany\r\n */\r\nexport type HasManyHasAssociationsMixin<TModel extends Model, TModelPrimaryKey> = (\r\n  targets: Array<TModel | TModelPrimaryKey>,\r\n  options?: HasManyHasAssociationsMixinOptions<TModel>\r\n) => Promise<boolean>;\r\n\r\n/**\r\n * The options for the countAssociations mixin of the hasMany association.\r\n *\r\n * @see HasManyCountAssociationsMixin\r\n */\r\nexport interface HasManyCountAssociationsMixinOptions<T extends Model> extends Transactionable, Filterable<Attributes<T>> {\r\n  /**\r\n   * Apply a scope on the related model, or remove its default scope by passing false.\r\n   */\r\n  scope?: string | boolean;\r\n}\r\n\r\n/**\r\n * The countAssociations mixin applied to models with hasMany.\r\n * An example of usage is as follows:\r\n *\r\n * ```typescript\r\n * class User extends Model<InferAttributes<User>, InferCreationAttributes<User>> {\r\n *   declare countRoles: HasManyCountAssociationsMixin<Role>;\r\n * }\r\n *\r\n * User.hasMany(Role);\r\n * ```\r\n *\r\n * @see Model.hasMany\r\n */\r\nexport type HasManyCountAssociationsMixin<T extends Model> =\r\n  (options?: HasManyCountAssociationsMixinOptions<T>) => Promise<number>;\r\n"],
  "mappings": "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",
  "names": []
}
