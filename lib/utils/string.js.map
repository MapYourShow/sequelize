{
  "version": 3,
  "sources": ["../../src/utils/string.ts"],
  "sourcesContent": ["import _inflection from 'inflection';\r\n\r\n/* Inflection */\r\ntype Inflection = typeof _inflection;\r\n\r\nlet inflection: Inflection = _inflection;\r\n\r\nexport function useInflection(newInflection: Inflection) {\r\n  inflection = newInflection;\r\n}\r\n\r\n/* String utils */\r\n\r\nexport function camelizeIf(str: string, condition: boolean): string {\r\n  let result = str;\r\n\r\n  if (condition) {\r\n    result = camelize(str);\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nexport function camelize(str: string): string {\r\n  return str.trim().replace(/[-_\\s]+(.)?/g, (match, c) => c.toUpperCase());\r\n}\r\n\r\nexport function underscoredIf(str: string, condition: boolean): string {\r\n  let result = str;\r\n\r\n  if (condition) {\r\n    result = underscore(str);\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nexport function underscore(str: string): string {\r\n  return inflection.underscore(str);\r\n}\r\n\r\nexport function spliceStr(\r\n  str: string,\r\n  index: number,\r\n  count: number,\r\n  add: string,\r\n): string {\r\n  return str.slice(0, index) + add + str.slice(index + count);\r\n}\r\n\r\nexport function singularize(str: string): string {\r\n  return inflection.singularize(str);\r\n}\r\n\r\nexport function pluralize(str: string): string {\r\n  return inflection.pluralize(str);\r\n}\r\n\r\ntype NameIndexIndex = {\r\n  fields: Array<{ name: string, attribute: string }>,\r\n  name: string,\r\n};\r\ntype NameIndexTableName = string | { tableName: string };\r\n\r\n/**\r\n *\r\n * @param index\r\n * @param index.fields\r\n * @param index.name\r\n * @param tableName\r\n *\r\n * @private\r\n */\r\nexport function nameIndex(\r\n  index: NameIndexIndex,\r\n  tableName: NameIndexTableName,\r\n) {\r\n  if (typeof tableName !== 'string' && tableName.tableName) {\r\n    tableName = tableName.tableName;\r\n  }\r\n\r\n  if (!Object.prototype.hasOwnProperty.call(index, 'name')) {\r\n    const fields = index.fields.map(field => (typeof field === 'string' ? field : field.name || field.attribute));\r\n    index.name = underscore(`${tableName}_${fields.join('_')}`);\r\n  }\r\n\r\n  return index;\r\n}\r\n\r\n/**\r\n * Stringify a value as JSON with some differences:\r\n * - bigints are stringified as a json string. (`safeStringifyJson({ val: 1n })` outputs `'{ \"val\": \"1\" }'`).\r\n *   This is because of a decision by TC39 to not support bigint in JSON.stringify https://github.com/tc39/proposal-bigint/issues/24\r\n *\r\n * @param stringifyTarget the value to stringify.\r\n * @returns the resulting json.\r\n */\r\nexport function safeStringifyJson(stringifyTarget: any): string {\r\n  return JSON.stringify(stringifyTarget, (key, value) => {\r\n    if (typeof value === 'bigint') {\r\n      return String(value);\r\n    }\r\n\r\n    return value;\r\n  });\r\n}\r\n\r\nexport function removeTrailingSemicolon(str: string): string {\r\n  if (!str.endsWith(';')) {\r\n    return str;\r\n  }\r\n\r\n  return str.slice(0, Math.max(0, str.length - 1));\r\n}\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAwB;AAKxB,IAAI,aAAyB;AAEtB,uBAAuB,eAA2B;AACvD,eAAa;AACf;AAIO,oBAAoB,KAAa,WAA4B;AAClE,MAAI,SAAS;AAEb,MAAI,WAAW;AACb,aAAS,SAAS,GAAG;AAAA,EACvB;AAEA,SAAO;AACT;AAEO,kBAAkB,KAAqB;AAC5C,SAAO,IAAI,KAAK,EAAE,QAAQ,gBAAgB,CAAC,OAAO,MAAM,EAAE,YAAY,CAAC;AACzE;AAEO,uBAAuB,KAAa,WAA4B;AACrE,MAAI,SAAS;AAEb,MAAI,WAAW;AACb,aAAS,WAAW,GAAG;AAAA,EACzB;AAEA,SAAO;AACT;AAEO,oBAAoB,KAAqB;AAC9C,SAAO,WAAW,WAAW,GAAG;AAClC;AAEO,mBACL,KACA,OACA,OACA,KACQ;AACR,SAAO,IAAI,MAAM,GAAG,KAAK,IAAI,MAAM,IAAI,MAAM,QAAQ,KAAK;AAC5D;AAEO,qBAAqB,KAAqB;AAC/C,SAAO,WAAW,YAAY,GAAG;AACnC;AAEO,mBAAmB,KAAqB;AAC7C,SAAO,WAAW,UAAU,GAAG;AACjC;AAiBO,mBACL,OACA,WACA;AACA,MAAI,OAAO,cAAc,YAAY,UAAU,WAAW;AACxD,gBAAY,UAAU;AAAA,EACxB;AAEA,MAAI,CAAC,OAAO,UAAU,eAAe,KAAK,OAAO,MAAM,GAAG;AACxD,UAAM,SAAS,MAAM,OAAO,IAAI,WAAU,OAAO,UAAU,WAAW,QAAQ,MAAM,QAAQ,MAAM,SAAU;AAC5G,UAAM,OAAO,WAAW,GAAG,aAAa,OAAO,KAAK,GAAG,GAAG;AAAA,EAC5D;AAEA,SAAO;AACT;AAUO,2BAA2B,iBAA8B;AAC9D,SAAO,KAAK,UAAU,iBAAiB,CAAC,KAAK,UAAU;AACrD,QAAI,OAAO,UAAU,UAAU;AAC7B,aAAO,OAAO,KAAK;AAAA,IACrB;AAEA,WAAO;AAAA,EACT,CAAC;AACH;AAEO,iCAAiC,KAAqB;AAC3D,MAAI,CAAC,IAAI,SAAS,GAAG,GAAG;AACtB,WAAO;AAAA,EACT;AAEA,SAAO,IAAI,MAAM,GAAG,KAAK,IAAI,GAAG,IAAI,SAAS,CAAC,CAAC;AACjD;",
  "names": []
}
