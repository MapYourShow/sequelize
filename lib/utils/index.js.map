{
  "version": 3,
  "sources": ["../../src/utils/index.ts"],
  "sourcesContent": ["import type { Optional } from '..';\r\nimport { getComplexKeys } from './format';\r\n\r\nexport * from './array';\r\nexport * from './check';\r\nexport * from './class-to-invokable';\r\nexport * from './dialect';\r\nexport * from './format';\r\nexport * from './join-sql-fragments';\r\nexport * from './object';\r\nexport * from './sequelize-method';\r\nexport * from './string';\r\nexport * from './dayjs';\r\n\r\n/**\r\n * getComplexSize\r\n *\r\n * @param obj\r\n * @returns Length of object properties including operators if obj is array returns its length\r\n * @private\r\n */\r\nexport function getComplexSize(obj: object | any[]): number {\r\n  return Array.isArray(obj) ? obj.length : getComplexKeys(obj).length;\r\n}\r\n\r\nexport type DeepWriteable<T> = { -readonly [P in keyof T]: DeepWriteable<T[P]> };\r\n\r\nexport type PartlyRequired<T, K extends keyof T> = Omit<T, K> & Required<Pick<T, K>>;\r\n\r\nexport type AnyFunction = (...args: any[]) => any;\r\n\r\n/**\r\n * Returns all shallow properties that accept `undefined` or `null`.\r\n * Does not include Optional properties, only `undefined` or `null`.\r\n *\r\n * @example\r\n * ```typescript\r\n * type UndefinedProps = NullishPropertiesOf<{\r\n *   id: number | undefined,\r\n *   createdAt: string | undefined,\r\n *   firstName: string | null, // nullable properties are included\r\n *   lastName?: string, // optional properties are not included.\r\n * }>;\r\n *\r\n * // is equal to\r\n *\r\n * type UndefinedProps = 'id' | 'createdAt' | 'firstName';\r\n * ```\r\n */\r\nexport type NullishPropertiesOf<T> = {\r\n  [P in keyof T]-?: undefined extends T[P] ? P\r\n    : null extends T[P] ? P\r\n      : never\r\n}[keyof T];\r\n\r\n/**\r\n * Makes all shallow properties of an object `optional` if they accept `undefined` or `null` as a value.\r\n *\r\n * @example\r\n * ```typescript\r\n * type MyOptionalType = MakeUndefinedOptional<{\r\n *   id: number | undefined,\r\n *   firstName: string,\r\n *   lastName: string | null,\r\n * }>;\r\n *\r\n * // is equal to\r\n *\r\n * type MyOptionalType = {\r\n *   // this property is optional.\r\n *   id?: number | undefined,\r\n *   firstName: string,\r\n *   // this property is optional.\r\n *   lastName?: string | null,\r\n * };\r\n * ```\r\n */\r\nexport type MakeNullishOptional<T extends object> = Optional<T, NullishPropertiesOf<T>>;\r\n\r\n/**\r\n * Makes the type accept null & undefined\r\n */\r\nexport type Nullish<T> = T | null | undefined;\r\nexport type AllowArray<T> = T | T[];\r\nexport type AllowReadonlyArray<T> = T | readonly T[];\r\n\r\ntype NonConstructorKeys<T> = ({ [P in keyof T]: T[P] extends new () => any ? never : P })[keyof T];\r\nexport type OmitConstructors<T> = Pick<T, NonConstructorKeys<T>>;\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,oBAA+B;AAE/B,0BAAc,oBAHd;AAIA,0BAAc,oBAJd;AAKA,0BAAc,iCALd;AAMA,0BAAc,sBANd;AAOA,0BAAc,qBAPd;AAQA,0BAAc,iCARd;AASA,0BAAc,qBATd;AAUA,0BAAc,+BAVd;AAWA,0BAAc,qBAXd;AAYA,0BAAc,oBAZd;AAqBO,wBAAwB,KAA6B;AAC1D,SAAO,MAAM,QAAQ,GAAG,IAAI,IAAI,SAAS,kCAAe,GAAG,EAAE;AAC/D;",
  "names": []
}
