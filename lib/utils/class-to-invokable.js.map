{
  "version": 3,
  "sources": ["../../src/utils/class-to-invokable.ts"],
  "sourcesContent": ["type Callable<A extends abstract new () => any> = A extends new (\r\n    ...args: infer Args\r\n  ) => infer Instance\r\n  ? A & ((...args: Args) => Instance)\r\n  : never;\r\n\r\n/**\r\n * Wraps a constructor to not need the `new` keyword using a proxy.\r\n * Only used for data types.\r\n *\r\n * @param constructor The class instance to wrap as invocable.\r\n * @returns Wrapped class instance.\r\n * @private\r\n */\r\nexport function classToInvokable<\r\n  Class extends new (...args: any[]) => any,\r\n  >(constructor: Class): Callable<Class> {\r\n  return new Proxy<Callable<Class>>(constructor as any, {\r\n    apply(_target, _thisArg, args: ConstructorParameters<Class>) {\r\n      return new constructor(...args);\r\n    },\r\n  });\r\n}\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAcO,0BAEH,aAAqC;AACvC,SAAO,IAAI,MAAuB,aAAoB;AAAA,IACpD,MAAM,SAAS,UAAU,MAAoC;AAC3D,aAAO,IAAI,YAAY,GAAG,IAAI;AAAA,IAChC;AAAA,EACF,CAAC;AACH;",
  "names": []
}
