{
  "version": 3,
  "sources": ["../../src/utils/check.ts"],
  "sourcesContent": ["import isEmpty from 'lodash/isEmpty';\r\nimport isPlainObject from 'lodash/isPlainObject';\r\nimport type { DataType } from '..';\r\nimport { getOperators } from './format';\r\n// eslint-disable-next-line import/order -- caused by temporarily mixing require with import\r\nimport { Where } from './sequelize-method';\r\n\r\nconst DataTypes = require('../data-types');\r\n\r\nexport function isPrimitive(val: any): val is string | number | boolean {\r\n  const type = typeof val;\r\n\r\n  return ['string', 'number', 'boolean'].includes(type);\r\n}\r\n\r\n/**\r\n * Returns whether `value` is using the nested syntax for attributes.\r\n *\r\n * @param value The attribute reference to check.\r\n *\r\n * @example\r\n * ```javascript\r\n * isColString('$id$'); // true\r\n * isColString('$project.name$'); // true\r\n * isColString('name'); // false\r\n * ```\r\n */\r\nexport function isColString(value: string): boolean {\r\n  return (\r\n    typeof value === 'string'\r\n    && value.startsWith('$')\r\n    && value.endsWith('$')\r\n  );\r\n}\r\n\r\nexport function canTreatArrayAsAnd(arr: unknown[]): arr is Array<object | Where> {\r\n  return arr.some(arg => isPlainObject(arg) || arg instanceof Where);\r\n}\r\n\r\n/**\r\n * Determine if the default value provided exists and can be described\r\n * in a db schema using the DEFAULT directive.\r\n *\r\n * @param value Any default value.\r\n * @private\r\n */\r\nexport function defaultValueSchemable(value: DataType): boolean {\r\n  if (value === undefined) {\r\n    return false;\r\n  }\r\n\r\n  // TODO this will be schemable when all supported db\r\n  //  have been normalized for this case\r\n  if (value instanceof DataTypes.NOW) {\r\n    return false;\r\n  }\r\n\r\n  if (value instanceof DataTypes.UUIDV1 || value instanceof DataTypes.UUIDV4) {\r\n    return false;\r\n  }\r\n\r\n  return typeof value !== 'function';\r\n}\r\n\r\n/**\r\n * Returns true if a where clause is empty, even with Symbols\r\n *\r\n * @param obj\r\n */\r\nexport function isWhereEmpty(obj: object): boolean {\r\n  return Boolean(obj) && isEmpty(obj) && getOperators(obj).length === 0;\r\n}\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAoB;AACpB,2BAA0B;AAE1B,oBAA6B;AAE7B,8BAAsB;AAEtB,MAAM,YAAY,QAAQ,eAAe;AAElC,qBAAqB,KAA4C;AACtE,QAAM,OAAO,OAAO;AAEpB,SAAO,CAAC,UAAU,UAAU,SAAS,EAAE,SAAS,IAAI;AACtD;AAcO,qBAAqB,OAAwB;AAClD,SACE,OAAO,UAAU,YACd,MAAM,WAAW,GAAG,KACpB,MAAM,SAAS,GAAG;AAEzB;AAEO,4BAA4B,KAA8C;AAC/E,SAAO,IAAI,KAAK,SAAO,kCAAc,GAAG,KAAK,eAAe,6BAAK;AACnE;AASO,+BAA+B,OAA0B;AAC9D,MAAI,UAAU,QAAW;AACvB,WAAO;AAAA,EACT;AAIA,MAAI,iBAAiB,UAAU,KAAK;AAClC,WAAO;AAAA,EACT;AAEA,MAAI,iBAAiB,UAAU,UAAU,iBAAiB,UAAU,QAAQ;AAC1E,WAAO;AAAA,EACT;AAEA,SAAO,OAAO,UAAU;AAC1B;AAOO,sBAAsB,KAAsB;AACjD,SAAO,QAAQ,GAAG,KAAK,4BAAQ,GAAG,KAAK,gCAAa,GAAG,EAAE,WAAW;AACtE;",
  "names": []
}
