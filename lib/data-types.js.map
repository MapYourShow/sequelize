{
  "version": 3,
  "sources": ["../src/data-types.js"],
  "sourcesContent": ["'use strict';\r\n\r\nconst util = require('util');\r\nconst _ = require('lodash');\r\nconst wkx = require('wkx');\r\nconst sequelizeErrors = require('./errors');\r\nconst Validator = require('./utils/validator-extras').validator;\r\nconst dayjs = require('dayjs');\r\nconst { logger } = require('./utils/logger');\r\n\r\nconst warnings = {};\r\nconst { classToInvokable } = require('./utils/class-to-invokable');\r\nconst { joinSQLFragments } = require('./utils/join-sql-fragments');\r\nconst { isValidTimeZone } = require('./utils/dayjs');\r\n\r\nclass ABSTRACT {\r\n  toString(options) {\r\n    return this.toSql(options);\r\n  }\r\n\r\n  toSql() {\r\n    return this.key;\r\n  }\r\n\r\n  stringify(value, options) {\r\n    if (this._stringify) {\r\n      return this._stringify(value, options);\r\n    }\r\n\r\n    return value;\r\n  }\r\n\r\n  bindParam(value, options) {\r\n    if (this._bindParam) {\r\n      return this._bindParam(value, options);\r\n    }\r\n\r\n    return options.bindParam(this.stringify(value, options));\r\n  }\r\n\r\n  static toString() {\r\n    return this.name;\r\n  }\r\n\r\n  static warn(link, text) {\r\n    if (!warnings[text]) {\r\n      warnings[text] = true;\r\n      logger.warn(`${text} \\n>> Check: ${link}`);\r\n    }\r\n  }\r\n\r\n  static extend(oldType) {\r\n    return new this(oldType.options);\r\n  }\r\n}\r\n\r\nABSTRACT.prototype.dialectTypes = '';\r\n\r\n/**\r\n * STRING A variable length string\r\n */\r\nclass STRING extends ABSTRACT {\r\n  /**\r\n   * @param {number} [length=255] length of string\r\n   * @param {boolean} [binary=false] Is this binary?\r\n   */\r\n  constructor(length, binary) {\r\n    super();\r\n    const options = typeof length === 'object' && length || { length, binary };\r\n    this.options = options;\r\n    this._binary = options.binary;\r\n    this._length = options.length || 255;\r\n  }\r\n\r\n  toSql() {\r\n    return joinSQLFragments([\r\n      `VARCHAR(${this._length})`,\r\n      this._binary && 'BINARY',\r\n    ]);\r\n  }\r\n\r\n  validate(value) {\r\n    if (Object.prototype.toString.call(value) !== '[object String]') {\r\n      if (this.options.binary && Buffer.isBuffer(value) || typeof value === 'number') {\r\n        return true;\r\n      }\r\n\r\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid string', value));\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  get BINARY() {\r\n    this._binary = true;\r\n    this.options.binary = true;\r\n\r\n    return this;\r\n  }\r\n\r\n  static get BINARY() {\r\n    return new this().BINARY;\r\n  }\r\n}\r\n\r\n/**\r\n * CHAR A fixed length string\r\n */\r\nclass CHAR extends STRING {\r\n  /**\r\n   * @param {number} [length=255] length of string\r\n   * @param {boolean} [binary=false] Is this binary?\r\n   */\r\n  constructor(length, binary) {\r\n    super(typeof length === 'object' && length || { length, binary });\r\n  }\r\n\r\n  toSql() {\r\n    return joinSQLFragments([\r\n      `CHAR(${this._length})`,\r\n      this._binary && 'BINARY',\r\n    ]);\r\n  }\r\n}\r\n\r\n/**\r\n * Unlimited length TEXT column\r\n */\r\nclass TEXT extends ABSTRACT {\r\n  /**\r\n   * @param {string} [length=''] could be tiny, medium, long.\r\n   */\r\n  constructor(length) {\r\n    super();\r\n    const options = typeof length === 'object' && length || { length };\r\n    this.options = options;\r\n    this._length = options.length || '';\r\n  }\r\n\r\n  toSql() {\r\n    switch (this._length.toLowerCase()) {\r\n      case 'tiny':\r\n        return 'TINYTEXT';\r\n      case 'medium':\r\n        return 'MEDIUMTEXT';\r\n      case 'long':\r\n        return 'LONGTEXT';\r\n      default:\r\n        return this.key;\r\n    }\r\n  }\r\n\r\n  validate(value) {\r\n    if (typeof value !== 'string') {\r\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid string', value));\r\n    }\r\n\r\n    return true;\r\n  }\r\n}\r\n\r\n/**\r\n * An unlimited length case-insensitive text column.\r\n * Original case is preserved but acts case-insensitive when comparing values (such as when finding or unique constraints).\r\n * Only available in Postgres and SQLite.\r\n *\r\n */\r\nclass CITEXT extends ABSTRACT {\r\n  toSql() {\r\n    return 'CITEXT';\r\n  }\r\n\r\n  validate(value) {\r\n    if (typeof value !== 'string') {\r\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid string', value));\r\n    }\r\n\r\n    return true;\r\n  }\r\n}\r\n\r\n/**\r\n * Base number type which is used to build other types\r\n */\r\nclass NUMBER extends ABSTRACT {\r\n  /**\r\n   * @param {object} options type options\r\n   * @param {string|number} [options.length] length of type, like `INT(4)`\r\n   * @param {boolean} [options.zerofill] Is zero filled?\r\n   * @param {boolean} [options.unsigned] Is unsigned?\r\n   * @param {string|number} [options.decimals] number of decimal points, used with length `FLOAT(5, 4)`\r\n   * @param {string|number} [options.precision] defines precision for decimal type\r\n   * @param {string|number} [options.scale] defines scale for decimal type\r\n   */\r\n  constructor(options = {}) {\r\n    super();\r\n    if (typeof options === 'number') {\r\n      options = {\r\n        length: options,\r\n      };\r\n    }\r\n\r\n    this.options = options;\r\n    this._length = options.length;\r\n    this._zerofill = options.zerofill;\r\n    this._decimals = options.decimals;\r\n    this._precision = options.precision;\r\n    this._scale = options.scale;\r\n    this._unsigned = options.unsigned;\r\n  }\r\n\r\n  toSql() {\r\n    let result = this.key;\r\n    if (this._length) {\r\n      result += `(${this._length}`;\r\n      if (typeof this._decimals === 'number') {\r\n        result += `,${this._decimals}`;\r\n      }\r\n\r\n      result += ')';\r\n    }\r\n\r\n    if (this._unsigned) {\r\n      result += ' UNSIGNED';\r\n    }\r\n\r\n    if (this._zerofill) {\r\n      result += ' ZEROFILL';\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  validate(value) {\r\n    if (!Validator.isFloat(String(value))) {\r\n      throw new sequelizeErrors.ValidationError(util.format(`%j is not a valid ${this.key.toLowerCase()}`, value));\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  _stringify(number) {\r\n    if (typeof number === 'number' || typeof number === 'bigint' || typeof number === 'boolean' || number === null || number === undefined) {\r\n      return number;\r\n    }\r\n\r\n    if (typeof number.toString === 'function') {\r\n      return number.toString();\r\n    }\r\n\r\n    return number;\r\n  }\r\n\r\n  get UNSIGNED() {\r\n    this._unsigned = true;\r\n    this.options.unsigned = true;\r\n\r\n    return this;\r\n  }\r\n\r\n  get ZEROFILL() {\r\n    this._zerofill = true;\r\n    this.options.zerofill = true;\r\n\r\n    return this;\r\n  }\r\n\r\n  static get UNSIGNED() {\r\n    return new this().UNSIGNED;\r\n  }\r\n\r\n  static get ZEROFILL() {\r\n    return new this().ZEROFILL;\r\n  }\r\n}\r\n\r\n/**\r\n * A 32 bit integer\r\n */\r\nclass INTEGER extends NUMBER {\r\n  validate(value) {\r\n    if (!Validator.isInt(String(value))) {\r\n      throw new sequelizeErrors.ValidationError(util.format(`%j is not a valid ${this.key.toLowerCase()}`, value));\r\n    }\r\n\r\n    return true;\r\n  }\r\n}\r\n\r\n/**\r\n * A 8 bit integer\r\n */\r\nclass TINYINT extends INTEGER {}\r\n\r\n/**\r\n * A 16 bit integer\r\n */\r\nclass SMALLINT extends INTEGER {}\r\n\r\n/**\r\n * A 24 bit integer\r\n */\r\nclass MEDIUMINT extends INTEGER {}\r\n\r\n/**\r\n * A 64 bit integer\r\n */\r\nclass BIGINT extends INTEGER {}\r\n\r\n/**\r\n * Floating point number (4-byte precision).\r\n */\r\nclass FLOAT extends NUMBER {\r\n  /**\r\n   * @param {string|number} [length] length of type, like `FLOAT(4)`\r\n   * @param {string|number} [decimals] number of decimal points, used with length `FLOAT(5, 4)`\r\n   */\r\n  constructor(length, decimals) {\r\n    super(typeof length === 'object' && length || { length, decimals });\r\n  }\r\n\r\n  validate(value) {\r\n    if (!Validator.isFloat(String(value))) {\r\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid float', value));\r\n    }\r\n\r\n    return true;\r\n  }\r\n}\r\n\r\n/**\r\n * Floating point number (4-byte precision).\r\n */\r\nclass REAL extends NUMBER {\r\n  /**\r\n   * @param {string|number} [length] length of type, like `REAL(4)`\r\n   * @param {string|number} [decimals] number of decimal points, used with length `REAL(5, 4)`\r\n   */\r\n  constructor(length, decimals) {\r\n    super(typeof length === 'object' && length || { length, decimals });\r\n  }\r\n}\r\n\r\n/**\r\n * Floating point number (8-byte precision).\r\n */\r\nclass DOUBLE extends NUMBER {\r\n  /**\r\n   * @param {string|number} [length] length of type, like `DOUBLE PRECISION(25)`\r\n   * @param {string|number} [decimals] number of decimal points, used with length `DOUBLE PRECISION(25, 10)`\r\n   */\r\n  constructor(length, decimals) {\r\n    super(typeof length === 'object' && length || { length, decimals });\r\n  }\r\n}\r\n\r\n/**\r\n * Decimal type, variable precision, take length as specified by user\r\n */\r\nclass DECIMAL extends NUMBER {\r\n  /**\r\n   * @param {string|number} [precision] defines precision\r\n   * @param {string|number} [scale] defines scale\r\n   */\r\n  constructor(precision, scale) {\r\n    super(typeof precision === 'object' && precision || { precision, scale });\r\n  }\r\n\r\n  toSql() {\r\n    if (this._precision || this._scale) {\r\n      return `DECIMAL(${[this._precision, this._scale].filter(_.identity).join(',')})`;\r\n    }\r\n\r\n    return 'DECIMAL';\r\n  }\r\n\r\n  validate(value) {\r\n    if (!Validator.isDecimal(String(value))) {\r\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid decimal', value));\r\n    }\r\n\r\n    return true;\r\n  }\r\n}\r\n\r\n// TODO: Create intermediate class\r\nconst protoExtensions = {\r\n  escape: false,\r\n  _value(value) {\r\n    if (Number.isNaN(value)) {\r\n      return 'NaN';\r\n    }\r\n\r\n    if (!Number.isFinite(value)) {\r\n      const sign = value < 0 ? '-' : '';\r\n\r\n      return `${sign}Infinity`;\r\n    }\r\n\r\n    return value;\r\n  },\r\n  _stringify(value) {\r\n    return `'${this._value(value)}'`;\r\n  },\r\n  _bindParam(value, options) {\r\n    return options.bindParam(this._value(value));\r\n  },\r\n};\r\n\r\nfor (const floating of [FLOAT, DOUBLE, REAL]) {\r\n  Object.assign(floating.prototype, protoExtensions);\r\n}\r\n\r\n/**\r\n * A boolean / tinyint column, depending on dialect\r\n */\r\nclass BOOLEAN extends ABSTRACT {\r\n  toSql() {\r\n    return 'TINYINT(1)';\r\n  }\r\n\r\n  validate(value) {\r\n    if (!Validator.isBoolean(String(value))) {\r\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid boolean', value));\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  _sanitize(value) {\r\n    if (value !== null && value !== undefined) {\r\n      if (Buffer.isBuffer(value) && value.length === 1) {\r\n        // Bit fields are returned as buffers\r\n        value = value[0];\r\n      // By default, `odbc` connector used by `ibmi` dialect returns buffers\r\n      // in a JavaScript ArrayBuffer instead of a Node.js Buffer\r\n      } else if (value instanceof ArrayBuffer && value.byteLength === 1) {\r\n        const view1 = new Uint8Array(value);\r\n        value = view1[0];\r\n      }\r\n\r\n      const type = typeof value;\r\n      if (type === 'string') {\r\n        // Only take action on valid boolean strings.\r\n        return value === 'true' ? true : value === 'false' ? false : value;\r\n      }\r\n\r\n      if (type === 'number') {\r\n        // Only take action on valid boolean integers.\r\n        return value === 1 ? true : value === 0 ? false : value;\r\n      }\r\n    }\r\n\r\n    return value;\r\n  }\r\n}\r\n\r\nBOOLEAN.parse = BOOLEAN.prototype._sanitize;\r\n\r\n/**\r\n * A time column\r\n *\r\n */\r\nclass TIME extends ABSTRACT {\r\n  toSql() {\r\n    return 'TIME';\r\n  }\r\n}\r\n\r\n/**\r\n * Date column with timezone, default is UTC\r\n */\r\nclass DATE extends ABSTRACT {\r\n  /**\r\n   * @param {string|number} [length] precision to allow storing milliseconds\r\n   */\r\n  constructor(length) {\r\n    super();\r\n    const options = typeof length === 'object' && length || { length };\r\n    this.options = options;\r\n    this._length = options.length || '';\r\n  }\r\n\r\n  toSql() {\r\n    return 'DATETIME';\r\n  }\r\n\r\n  validate(value) {\r\n    if (!Validator.isDate(String(value))) {\r\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid date', value));\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  _sanitize(value, options) {\r\n    if ((!options || options && !options.raw) && !(value instanceof Date) && Boolean(value)) {\r\n      return new Date(value);\r\n    }\r\n\r\n    return value;\r\n  }\r\n\r\n  _isChanged(value, originalValue) {\r\n    if (originalValue && Boolean(value)\r\n      && (value === originalValue\r\n        || value instanceof Date && originalValue instanceof Date && value.getTime() === originalValue.getTime())) {\r\n      return false;\r\n    }\r\n\r\n    // not changed when set to same empty value\r\n    if (!originalValue && !value && originalValue === value) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  _applyTimezone(date, options) {\r\n    if (options.timezone) {\r\n      if (isValidTimeZone(options.timezone)) {\r\n        return dayjs(date).tz(options.timezone);\r\n      }\r\n\r\n      return dayjs(date).utcOffset(options.timezone);\r\n    }\r\n\r\n    return dayjs(date);\r\n  }\r\n\r\n  _stringify(date, options) {\r\n    // Z here means current timezone, _not_ UTC\r\n    return this._applyTimezone(date, options).format('YYYY-MM-DD HH:mm:ss.SSS Z');\r\n  }\r\n}\r\n\r\n/**\r\n * A date only column (no timestamp)\r\n */\r\nclass DATEONLY extends ABSTRACT {\r\n  toSql() {\r\n    return 'DATE';\r\n  }\r\n\r\n  _stringify(date) {\r\n    return dayjs(date).format('YYYY-MM-DD');\r\n  }\r\n\r\n  _sanitize(value, options) {\r\n    if ((!options || options && !options.raw) && Boolean(value)) {\r\n      return dayjs(value).format('YYYY-MM-DD');\r\n    }\r\n\r\n    return value;\r\n  }\r\n\r\n  _isChanged(value, originalValue) {\r\n    if (originalValue && Boolean(value) && originalValue === value) {\r\n      return false;\r\n    }\r\n\r\n    // not changed when set to same empty value\r\n    if (!originalValue && !value && originalValue === value) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n}\r\n\r\n/**\r\n * A key / value store column. Only available in Postgres.\r\n */\r\nclass HSTORE extends ABSTRACT {\r\n  validate(value) {\r\n    if (!_.isPlainObject(value)) {\r\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid hstore', value));\r\n    }\r\n\r\n    return true;\r\n  }\r\n}\r\n\r\n/**\r\n * A JSON string column. Available in MySQL, Postgres and SQLite\r\n */\r\nclass JSONTYPE extends ABSTRACT {\r\n  validate() {\r\n    return true;\r\n  }\r\n\r\n  _stringify(value) {\r\n    return JSON.stringify(value);\r\n  }\r\n}\r\n\r\n/**\r\n * A binary storage JSON column. Only available in Postgres.\r\n */\r\nclass JSONB extends JSONTYPE {}\r\n\r\n/**\r\n * A default value of the current timestamp\r\n */\r\nclass NOW extends ABSTRACT {}\r\n\r\n/**\r\n * Binary storage\r\n */\r\nclass BLOB extends ABSTRACT {\r\n  /**\r\n   * @param {string} [length=''] could be tiny, medium, long.\r\n   */\r\n  constructor(length) {\r\n    super();\r\n    const options = typeof length === 'object' && length || { length };\r\n    this.options = options;\r\n    this._length = options.length || '';\r\n  }\r\n\r\n  toSql() {\r\n    switch (this._length.toLowerCase()) {\r\n      case 'tiny':\r\n        return 'TINYBLOB';\r\n      case 'medium':\r\n        return 'MEDIUMBLOB';\r\n      case 'long':\r\n        return 'LONGBLOB';\r\n      default:\r\n        return this.key;\r\n    }\r\n  }\r\n\r\n  validate(value) {\r\n    if (typeof value !== 'string' && !Buffer.isBuffer(value)) {\r\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid blob', value));\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  _stringify(value) {\r\n    if (!Buffer.isBuffer(value)) {\r\n      if (Array.isArray(value)) {\r\n        value = Buffer.from(value);\r\n      } else {\r\n        value = Buffer.from(value.toString());\r\n      }\r\n    }\r\n\r\n    const hex = value.toString('hex');\r\n\r\n    return this._hexify(hex);\r\n  }\r\n\r\n  _hexify(hex) {\r\n    return `X'${hex}'`;\r\n  }\r\n\r\n  _bindParam(value, options) {\r\n    if (!Buffer.isBuffer(value)) {\r\n      if (Array.isArray(value)) {\r\n        value = Buffer.from(value);\r\n      } else {\r\n        value = Buffer.from(value.toString());\r\n      }\r\n    }\r\n\r\n    return options.bindParam(value);\r\n  }\r\n}\r\n\r\nBLOB.prototype.escape = false;\r\n\r\n/**\r\n * Range types are data types representing a range of values of some element type (called the range's subtype).\r\n * Only available in Postgres. See [the Postgres documentation](http://www.postgresql.org/docs/9.4/static/rangetypes.html) for more details\r\n */\r\nclass RANGE extends ABSTRACT {\r\n  /**\r\n   * @param {ABSTRACT} subtype A subtype for range, like RANGE(DATE)\r\n   */\r\n  constructor(subtype) {\r\n    super();\r\n    const options = _.isPlainObject(subtype) ? subtype : { subtype };\r\n    if (!options.subtype) {\r\n      options.subtype = new INTEGER();\r\n    }\r\n\r\n    if (typeof options.subtype === 'function') {\r\n      options.subtype = new options.subtype();\r\n    }\r\n\r\n    this._subtype = options.subtype.key;\r\n    this.options = options;\r\n  }\r\n\r\n  validate(value) {\r\n    if (!Array.isArray(value)) {\r\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid range', value));\r\n    }\r\n\r\n    if (value.length !== 2) {\r\n      throw new sequelizeErrors.ValidationError('A range must be an array with two elements');\r\n    }\r\n\r\n    return true;\r\n  }\r\n}\r\n\r\n/**\r\n * A column storing a unique universal identifier.\r\n * Use with `UUIDV1` or `UUIDV4` for default values.\r\n */\r\nclass UUID extends ABSTRACT {\r\n  validate(value, options) {\r\n    if (typeof value !== 'string' || !Validator.isUUID(value) && (!options || !options.acceptStrings)) {\r\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid uuid', value));\r\n    }\r\n\r\n    return true;\r\n  }\r\n}\r\n\r\n/**\r\n * A default unique universal identifier generated following the UUID v1 standard\r\n */\r\nclass UUIDV1 extends ABSTRACT {\r\n  validate(value, options) {\r\n    if (typeof value !== 'string' || !Validator.isUUID(value) && (!options || !options.acceptStrings)) {\r\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid uuid', value));\r\n    }\r\n\r\n    return true;\r\n  }\r\n}\r\n\r\n/**\r\n * A default unique universal identifier generated following the UUID v4 standard\r\n */\r\nclass UUIDV4 extends ABSTRACT {\r\n  validate(value, options) {\r\n    if (typeof value !== 'string' || !Validator.isUUID(value, 4) && (!options || !options.acceptStrings)) {\r\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid uuidv4', value));\r\n    }\r\n\r\n    return true;\r\n  }\r\n}\r\n\r\n/**\r\n * A virtual value that is not stored in the DB. This could for example be useful if you want to provide a default value in your model that is returned to the user but not stored in the DB.\r\n *\r\n * You could also use it to validate a value before permuting and storing it. VIRTUAL also takes a return type and dependency fields as arguments\r\n * If a virtual attribute is present in `attributes` it will automatically pull in the extra fields as well.\r\n * Return type is mostly useful for setups that rely on types like GraphQL.\r\n *\r\n * @example <caption>Checking password length before hashing it</caption>\r\n * sequelize.define('user', {\r\n *   password_hash: DataTypes.STRING,\r\n *   password: {\r\n *     type: DataTypes.VIRTUAL,\r\n *     set: function (val) {\r\n *        // Remember to set the data value, otherwise it won't be validated\r\n *        this.setDataValue('password', val);\r\n *        this.setDataValue('password_hash', this.salt + val);\r\n *      },\r\n *      validate: {\r\n *         isLongEnough: function (val) {\r\n *           if (val.length < 7) {\r\n *             throw new Error(\"Please choose a longer password\")\r\n *          }\r\n *       }\r\n *     }\r\n *   }\r\n * })\r\n *\r\n * # In the above code the password is stored plainly in the password field so it can be validated, but is never stored in the DB.\r\n *\r\n * @example <caption>Virtual with dependency fields</caption>\r\n * {\r\n *   active: {\r\n *     type: new DataTypes.VIRTUAL(DataTypes.BOOLEAN, ['createdAt']),\r\n *     get: function() {\r\n *       return this.get('createdAt') > Date.now() - (7 * 24 * 60 * 60 * 1000)\r\n *     }\r\n *   }\r\n * }\r\n *\r\n */\r\nclass VIRTUAL extends ABSTRACT {\r\n  /**\r\n   * @param {ABSTRACT} [ReturnType] return type for virtual type\r\n   * @param {Array} [fields] array of fields this virtual type is dependent on\r\n   */\r\n  constructor(ReturnType, fields) {\r\n    super();\r\n    if (typeof ReturnType === 'function') {\r\n      ReturnType = new ReturnType();\r\n    }\r\n\r\n    this.returnType = ReturnType;\r\n    this.fields = fields;\r\n  }\r\n}\r\n\r\n/**\r\n * An enumeration, Postgres Only\r\n *\r\n * @example\r\n * DataTypes.ENUM('value', 'another value')\r\n * DataTypes.ENUM(['value', 'another value'])\r\n * DataTypes.ENUM({\r\n *   values: ['value', 'another value']\r\n * })\r\n */\r\nclass ENUM extends ABSTRACT {\r\n  /**\r\n   * @param {...any|{ values: any[] }|any[]} args either array of values or options object with values array. It also supports variadic values\r\n   */\r\n  constructor(...args) {\r\n    super();\r\n    const value = args[0];\r\n    const options = typeof value === 'object' && !Array.isArray(value) && value || {\r\n      values: args.reduce((result, element) => {\r\n        return result.concat(Array.isArray(element) ? element : [element]);\r\n      }, []),\r\n    };\r\n    this.values = options.values;\r\n    this.options = options;\r\n  }\r\n\r\n  validate(value) {\r\n    if (!this.values.includes(value)) {\r\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid choice in %j', value, this.values));\r\n    }\r\n\r\n    return true;\r\n  }\r\n}\r\n\r\n/**\r\n * An array of `type`. Only available in Postgres.\r\n *\r\n * @example\r\n * DataTypes.ARRAY(DataTypes.DECIMAL)\r\n */\r\nclass ARRAY extends ABSTRACT {\r\n  /**\r\n   * @param {ABSTRACT} type type of array values\r\n   */\r\n  constructor(type) {\r\n    super();\r\n    const options = _.isPlainObject(type) ? type : { type };\r\n    this.options = options;\r\n    this.type = typeof options.type === 'function' ? new options.type() : options.type;\r\n  }\r\n\r\n  toSql() {\r\n    return `${this.type.toSql()}[]`;\r\n  }\r\n\r\n  validate(value) {\r\n    if (!Array.isArray(value)) {\r\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid array', value));\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  static is(obj, type) {\r\n    return obj instanceof ARRAY && obj.type instanceof type;\r\n  }\r\n}\r\n\r\n/**\r\n * A column storing Geometry information.\r\n * It is only available in PostgreSQL (with PostGIS), MariaDB or MySQL.\r\n *\r\n * GeoJSON is accepted as input and returned as output.\r\n *\r\n * In PostGIS, the GeoJSON is parsed using the PostGIS function `ST_GeomFromGeoJSON`.\r\n * In MySQL it is parsed using the function `ST_GeomFromText`.\r\n *\r\n * Therefore, one can just follow the [GeoJSON spec](https://tools.ietf.org/html/rfc7946) for handling geometry objects.  See the following examples:\r\n *\r\n * @example <caption>Defining a Geometry type attribute</caption>\r\n * DataTypes.GEOMETRY\r\n * DataTypes.GEOMETRY('POINT')\r\n * DataTypes.GEOMETRY('POINT', 4326)\r\n *\r\n * @example <caption>Create a new point</caption>\r\n * const point = { type: 'Point', coordinates: [-76.984722, 39.807222]}; // GeoJson format: [lng, lat]\r\n *\r\n * User.create({username: 'username', geometry: point });\r\n *\r\n * @example <caption>Create a new linestring</caption>\r\n * const line = { type: 'LineString', 'coordinates': [ [100.0, 0.0], [101.0, 1.0] ] };\r\n *\r\n * User.create({username: 'username', geometry: line });\r\n *\r\n * @example <caption>Create a new polygon</caption>\r\n * const polygon = { type: 'Polygon', coordinates: [\r\n *                 [ [100.0, 0.0], [101.0, 0.0], [101.0, 1.0],\r\n *                   [100.0, 1.0], [100.0, 0.0] ]\r\n *                 ]};\r\n *\r\n * User.create({username: 'username', geometry: polygon });\r\n *\r\n * @example <caption>Create a new point with a custom SRID</caption>\r\n * const point = {\r\n *   type: 'Point',\r\n *   coordinates: [-76.984722, 39.807222], // GeoJson format: [lng, lat]\r\n *   crs: { type: 'name', properties: { name: 'EPSG:4326'} }\r\n * };\r\n *\r\n * User.create({username: 'username', geometry: point })\r\n *\r\n *\r\n * @see {@link DataTypes.GEOGRAPHY}\r\n */\r\nclass GEOMETRY extends ABSTRACT {\r\n  /**\r\n   * @param {string} [type] Type of geometry data\r\n   * @param {string} [srid] SRID of type\r\n   */\r\n  constructor(type, srid) {\r\n    super();\r\n    const options = _.isPlainObject(type) ? type : { type, srid };\r\n    this.options = options;\r\n    this.type = options.type;\r\n    this.srid = options.srid;\r\n  }\r\n\r\n  _stringify(value, options) {\r\n    return `ST_GeomFromText(${options.escape(wkx.Geometry.parseGeoJSON(value).toWkt())})`;\r\n  }\r\n\r\n  _bindParam(value, options) {\r\n    return `ST_GeomFromText(${options.bindParam(wkx.Geometry.parseGeoJSON(value).toWkt())})`;\r\n  }\r\n}\r\n\r\nGEOMETRY.prototype.escape = false;\r\n\r\n/**\r\n * A geography datatype represents two dimensional spacial objects in an elliptic coord system.\r\n *\r\n * __The difference from geometry and geography type:__\r\n *\r\n * PostGIS 1.5 introduced a new spatial type called geography, which uses geodetic measurement instead of Cartesian measurement.\r\n * Coordinate points in the geography type are always represented in WGS 84 lon lat degrees (SRID 4326),\r\n * but measurement functions and relationships ST_Distance, ST_DWithin, ST_Length, and ST_Area always return answers in meters or assume inputs in meters.\r\n *\r\n * __What is best to use? It depends:__\r\n *\r\n * When choosing between the geometry and geography type for data storage, you should consider what you\u2019ll be using it for.\r\n * If all you do are simple measurements and relationship checks on your data, and your data covers a fairly large area, then most likely you\u2019ll be better off storing your data using the new geography type.\r\n * Although the new geography data type can cover the globe, the geometry type is far from obsolete.\r\n * The geometry type has a much richer set of functions than geography, relationship checks are generally faster, and it has wider support currently across desktop and web-mapping tools\r\n *\r\n * @example <caption>Defining a Geography type attribute</caption>\r\n * DataTypes.GEOGRAPHY\r\n * DataTypes.GEOGRAPHY('POINT')\r\n * DataTypes.GEOGRAPHY('POINT', 4326)\r\n */\r\nclass GEOGRAPHY extends ABSTRACT {\r\n  /**\r\n   * @param {string} [type] Type of geography data\r\n   * @param {string} [srid] SRID of type\r\n   */\r\n  constructor(type, srid) {\r\n    super();\r\n    const options = _.isPlainObject(type) ? type : { type, srid };\r\n    this.options = options;\r\n    this.type = options.type;\r\n    this.srid = options.srid;\r\n  }\r\n\r\n  _stringify(value, options) {\r\n    return `ST_GeomFromText(${options.escape(wkx.Geometry.parseGeoJSON(value).toWkt())})`;\r\n  }\r\n\r\n  _bindParam(value, options) {\r\n    return `ST_GeomFromText(${options.bindParam(wkx.Geometry.parseGeoJSON(value).toWkt())})`;\r\n  }\r\n}\r\n\r\nGEOGRAPHY.prototype.escape = false;\r\n\r\n/**\r\n * The cidr type holds an IPv4 or IPv6 network specification. Takes 7 or 19 bytes.\r\n *\r\n * Only available for Postgres\r\n */\r\nclass CIDR extends ABSTRACT {\r\n  validate(value) {\r\n    if (typeof value !== 'string' || !Validator.isIPRange(value)) {\r\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid CIDR', value));\r\n    }\r\n\r\n    return true;\r\n  }\r\n}\r\n\r\n/**\r\n * The INET type holds an IPv4 or IPv6 host address, and optionally its subnet. Takes 7 or 19 bytes\r\n *\r\n * Only available for Postgres\r\n */\r\nclass INET extends ABSTRACT {\r\n  validate(value) {\r\n    if (typeof value !== 'string' || !Validator.isIP(value)) {\r\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid INET', value));\r\n    }\r\n\r\n    return true;\r\n  }\r\n}\r\n\r\n/**\r\n * The MACADDR type stores MAC addresses. Takes 6 bytes\r\n *\r\n * Only available for Postgres\r\n *\r\n */\r\nclass MACADDR extends ABSTRACT {\r\n  validate(value) {\r\n    if (typeof value !== 'string' || !Validator.isMACAddress(value)) {\r\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid MACADDR', value));\r\n    }\r\n\r\n    return true;\r\n  }\r\n}\r\n\r\n/**\r\n * The TSVECTOR type stores text search vectors.\r\n *\r\n * Only available for Postgres\r\n *\r\n */\r\nclass TSVECTOR extends ABSTRACT {\r\n  validate(value) {\r\n    if (typeof value !== 'string') {\r\n      throw new sequelizeErrors.ValidationError(util.format('%j is not a valid string', value));\r\n    }\r\n\r\n    return true;\r\n  }\r\n}\r\n\r\n/**\r\n * A convenience class holding commonly used data types. The data types are used when defining a new model using `Sequelize.define`, like this:\r\n * ```js\r\n * sequelize.define('model', {\r\n *   column: DataTypes.INTEGER\r\n * })\r\n * ```\r\n * When defining a model you can just as easily pass a string as type, but often using the types defined here is beneficial. For example, using `DataTypes.BLOB`, mean\r\n * that that column will be returned as an instance of `Buffer` when being fetched by sequelize.\r\n *\r\n * To provide a length for the data type, you can invoke it like a function: `INTEGER(2)`\r\n *\r\n * Some data types have special properties that can be accessed in order to change the data type.\r\n * For example, to get an unsigned integer with zerofill you can do `DataTypes.INTEGER.UNSIGNED.ZEROFILL`.\r\n * The order you access the properties in do not matter, so `DataTypes.INTEGER.ZEROFILL.UNSIGNED` is fine as well.\r\n *\r\n * * All number types (`INTEGER`, `BIGINT`, `FLOAT`, `DOUBLE`, `REAL`, `DECIMAL`) expose the properties `UNSIGNED` and `ZEROFILL`\r\n * * The `CHAR` and `STRING` types expose the `BINARY` property\r\n *\r\n * Three of the values provided here (`NOW`, `UUIDV1` and `UUIDV4`) are special default values, that should not be used to define types. Instead they are used as shorthands for\r\n * defining default values. For example, to get a uuid field with a default value generated following v1 of the UUID standard:\r\n * ```js\r\n * sequelize.define('model', {\r\n *   uuid: {\r\n *     type: DataTypes.UUID,\r\n *     defaultValue: DataTypes.UUIDV1,\r\n *     primaryKey: true\r\n *   }\r\n * })\r\n * ```\r\n * There may be times when you want to generate your own UUID conforming to some other algorithm. This is accomplished\r\n * using the defaultValue property as well, but instead of specifying one of the supplied UUID types, you return a value\r\n * from a function.\r\n * ```js\r\n * sequelize.define('model', {\r\n *   uuid: {\r\n *     type: DataTypes.UUID,\r\n *     defaultValue: function() {\r\n *       return generateMyId()\r\n *     },\r\n *     primaryKey: true\r\n *   }\r\n * })\r\n * ```\r\n */\r\nconst DataTypes = module.exports = {\r\n  ABSTRACT,\r\n  STRING,\r\n  CHAR,\r\n  TEXT,\r\n  NUMBER,\r\n  TINYINT,\r\n  SMALLINT,\r\n  MEDIUMINT,\r\n  INTEGER,\r\n  BIGINT,\r\n  FLOAT,\r\n  TIME,\r\n  DATE,\r\n  DATEONLY,\r\n  BOOLEAN,\r\n  NOW,\r\n  BLOB,\r\n  DECIMAL,\r\n  NUMERIC: DECIMAL,\r\n  UUID,\r\n  UUIDV1,\r\n  UUIDV4,\r\n  HSTORE,\r\n  JSON: JSONTYPE,\r\n  JSONB,\r\n  VIRTUAL,\r\n  ARRAY,\r\n  ENUM,\r\n  RANGE,\r\n  REAL,\r\n  'DOUBLE PRECISION': DOUBLE,\r\n  DOUBLE,\r\n  GEOMETRY,\r\n  GEOGRAPHY,\r\n  CIDR,\r\n  INET,\r\n  MACADDR,\r\n  CITEXT,\r\n  TSVECTOR,\r\n};\r\n\r\n_.each(DataTypes, (dataType, name) => {\r\n  // guard for aliases\r\n  if (!Object.prototype.hasOwnProperty.call(dataType, 'key')) {\r\n    dataType.types = {};\r\n    dataType.key = dataType.prototype.key = name;\r\n  }\r\n});\r\n\r\nconst dialectMap = {};\r\ndialectMap.postgres = require('./dialects/postgres/data-types')(DataTypes);\r\ndialectMap.mysql = require('./dialects/mysql/data-types')(DataTypes);\r\ndialectMap.mariadb = require('./dialects/mariadb/data-types')(DataTypes);\r\ndialectMap.sqlite = require('./dialects/sqlite/data-types')(DataTypes);\r\ndialectMap.mssql = require('./dialects/mssql/data-types')(DataTypes);\r\ndialectMap.ibmi = require('./dialects/ibmi/data-types')(DataTypes);\r\ndialectMap.db2 = require('./dialects/db2/data-types')(DataTypes);\r\ndialectMap.snowflake = require('./dialects/snowflake/data-types')(DataTypes);\r\n\r\nconst dialectList = Object.values(dialectMap);\r\n\r\nfor (const dataTypes of dialectList) {\r\n  _.each(dataTypes, (DataType, key) => {\r\n    if (!DataType.key) {\r\n      DataType.key = DataType.prototype.key = key;\r\n    }\r\n  });\r\n}\r\n\r\n// Wrap all data types to not require `new`\r\nfor (const dataTypes of [DataTypes, ...dialectList]) {\r\n  _.each(dataTypes, (DataType, key) => {\r\n    dataTypes[key] = classToInvokable(DataType);\r\n  });\r\n}\r\n\r\nObject.assign(DataTypes, dialectMap);\r\n"],
  "mappings": "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",
  "names": []
}
