{
  "version": 3,
  "sources": ["../../src/errors/database-error.ts"],
  "sourcesContent": ["import type { CommonErrorProperties, SequelizeErrorOptions } from './base-error';\r\nimport BaseError from './base-error';\r\n\r\nexport interface DatabaseErrorParent extends Error, Pick<CommonErrorProperties, 'sql'> {\r\n  /** The parameters for the sql that triggered the error */\r\n  readonly parameters?: object;\r\n}\r\n\r\nexport interface DatabaseErrorSubclassOptions extends SequelizeErrorOptions {\r\n  cause?: DatabaseErrorParent;\r\n\r\n  /**\r\n   * @deprecated use {@link DatabaseErrorSubclassOptions.cause}\r\n   */\r\n  parent?: DatabaseErrorParent;\r\n  message?: string;\r\n}\r\n\r\n/**\r\n * A base class for all database related errors.\r\n */\r\nclass DatabaseError\r\n  extends BaseError\r\n  implements DatabaseErrorParent, CommonErrorProperties {\r\n  sql: string;\r\n  parameters: object;\r\n\r\n  declare cause: DatabaseErrorParent;\r\n\r\n  /**\r\n   * @param parent The database specific error which triggered this one\r\n   * @param options\r\n   */\r\n  constructor(parent: DatabaseErrorParent, options: SequelizeErrorOptions = {}) {\r\n    super(parent.message, { cause: parent });\r\n    this.name = 'SequelizeDatabaseError';\r\n\r\n    this.sql = parent.sql;\r\n    this.parameters = parent.parameters ?? {};\r\n\r\n    if (options.stack) {\r\n      this.stack = options.stack;\r\n    }\r\n  }\r\n}\r\n\r\nexport default DatabaseError;\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,wBAAsB;AAoBtB,MAAM,sBACI,0BAC8C;AAAA,EACtD;AAAA,EACA;AAAA,EAQA,YAAY,QAA6B,UAAiC,CAAC,GAAG;AAC5E,UAAM,OAAO,SAAS,EAAE,OAAO,OAAO,CAAC;AACvC,SAAK,OAAO;AAEZ,SAAK,MAAM,OAAO;AAClB,SAAK,aAAa,OAAO,cAAc,CAAC;AAExC,QAAI,QAAQ,OAAO;AACjB,WAAK,QAAQ,QAAQ;AAAA,IACvB;AAAA,EACF;AACF;AAEA,IAAO,yBAAQ;",
  "names": []
}
