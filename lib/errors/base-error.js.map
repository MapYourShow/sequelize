{
  "version": 3,
  "sources": ["../../src/errors/base-error.ts"],
  "sourcesContent": ["import { useErrorCause } from '../utils/deprecations.js';\r\n\r\nexport interface SequelizeErrorOptions {\r\n  stack?: string;\r\n}\r\n\r\nexport interface CommonErrorProperties {\r\n  /** The SQL that triggered the error */\r\n  readonly sql: string;\r\n}\r\n\r\n// TODO [>=2023-04-30]:\r\n//  Remove me in Sequelize 8, where this is added natively by TypeScript (>= 4.6):\r\n//  This is a breaking change and must be done in a MAJOR release.\r\nexport type ErrorOptions = {\r\n  cause?: Error,\r\n};\r\n\r\nconst supportsErrorCause = (() => {\r\n  // eslint-disable-next-line @typescript-eslint/prefer-ts-expect-error -- Supported in TS 4.6, not before\r\n  // @ts-ignore\r\n  const err = new Error('Dummy 1', { cause: new Error('Dummy 2') });\r\n\r\n  return 'cause' in err;\r\n})();\r\n\r\n/**\r\n * The Base Error all Sequelize Errors inherit from.\r\n *\r\n * Sequelize provides a host of custom error classes, to allow you to do easier debugging. All of these errors are exposed on the sequelize object and the sequelize constructor.\r\n * All sequelize errors inherit from the base JS error object.\r\n *\r\n * This means that errors can be accessed using `Sequelize.ValidationError`\r\n */\r\nabstract class BaseError extends Error {\r\n  declare cause: Error | undefined;\r\n\r\n  get parent(): this['cause'] {\r\n    useErrorCause();\r\n\r\n    return this.cause;\r\n  }\r\n\r\n  get original(): this['cause'] {\r\n    useErrorCause();\r\n\r\n    return this.cause;\r\n  }\r\n\r\n  constructor(message?: string, options?: ErrorOptions) {\r\n    // TODO [>=2023-04-30]: remove this ts-ignore (Sequelize 8)\r\n    // eslint-disable-next-line @typescript-eslint/prefer-ts-expect-error -- Supported in TS 4.6, not before\r\n    // @ts-ignore\r\n    super(supportsErrorCause ? message : addCause(message, options?.cause), options);\r\n    this.name = 'SequelizeBaseError';\r\n\r\n    if (!supportsErrorCause) {\r\n      // TODO [>=2023-04-30]:\r\n      //  Once all supported node versions have support for Error.cause (added in Node 16.9.0), delete this line:\r\n      //  This is a breaking change and must be done in a MAJOR release.\r\n      this.cause = options?.cause;\r\n    }\r\n  }\r\n}\r\n\r\nconst indentation = '  ';\r\n\r\nfunction addCause(message: string = '', cause?: unknown) {\r\n  let out = message;\r\n\r\n  if (cause) {\r\n    out += `\\n\\n${indentation}Caused by:\\n${indentation}${getErrorMessage(cause).replace(/\\n/g, `\\n${indentation}`)}`;\r\n  }\r\n\r\n  return out;\r\n}\r\n\r\nfunction getErrorMessage(error: unknown) {\r\n\r\n  if (error instanceof Error) {\r\n    return error.message;\r\n  }\r\n\r\n  return String(error);\r\n}\r\n\r\nexport default BaseError;\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAA8B;AAkB9B,MAAM,qBAAsB,OAAM;AAGhC,QAAM,MAAM,IAAI,MAAM,WAAW,EAAE,OAAO,IAAI,MAAM,SAAS,EAAE,CAAC;AAEhE,SAAO,WAAW;AACpB,GAAG;AAUH,MAAe,kBAAkB,MAAM;AAAA,MAGjC,SAAwB;AAC1B,2CAAc;AAEd,WAAO,KAAK;AAAA,EACd;AAAA,MAEI,WAA0B;AAC5B,2CAAc;AAEd,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,YAAY,SAAkB,SAAwB;AAIpD,UAAM,qBAAqB,UAAU,SAAS,SAAS,mCAAS,KAAK,GAAG,OAAO;AAC/E,SAAK,OAAO;AAEZ,QAAI,CAAC,oBAAoB;AAIvB,WAAK,QAAQ,mCAAS;AAAA,IACxB;AAAA,EACF;AACF;AAEA,MAAM,cAAc;AAEpB,kBAAkB,UAAkB,IAAI,OAAiB;AACvD,MAAI,MAAM;AAEV,MAAI,OAAO;AACT,WAAO;AAAA;AAAA,EAAO;AAAA,EAA0B,cAAc,gBAAgB,KAAK,EAAE,QAAQ,OAAO;AAAA,EAAK,aAAa;AAAA,EAChH;AAEA,SAAO;AACT;AAEA,yBAAyB,OAAgB;AAEvC,MAAI,iBAAiB,OAAO;AAC1B,WAAO,MAAM;AAAA,EACf;AAEA,SAAO,OAAO,KAAK;AACrB;AAEA,IAAO,qBAAQ;",
  "names": []
}
