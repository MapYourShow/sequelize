{
  "version": 3,
  "sources": ["../../src/errors/validation-error.ts"],
  "sourcesContent": ["import type { Model } from '..';\r\nimport type { ErrorOptions, SequelizeErrorOptions } from './base-error';\r\nimport BaseError from './base-error';\r\n\r\n/**\r\n * An enum that is used internally by the `ValidationErrorItem` class\r\n * that maps current `type` strings (as given to ValidationErrorItem.constructor()) to\r\n * our new `origin` values.\r\n */\r\nexport enum ValidationErrorItemType {\r\n  'notnull violation' = 'CORE',\r\n  'string violation' = 'CORE',\r\n  'unique violation' = 'DB',\r\n  'validation error' = 'FUNCTION',\r\n}\r\n\r\n/**\r\n * An enum that defines valid ValidationErrorItem `origin` values\r\n */\r\nexport enum ValidationErrorItemOrigin {\r\n  /**\r\n   * specifies errors that originate from the sequelize \"core\"\r\n   */\r\n  CORE = 'CORE',\r\n\r\n  /**\r\n   * specifies validation errors that originate from the storage engine\r\n   */\r\n  DB = 'DB',\r\n\r\n  /**\r\n   * specifies validation errors that originate from validator functions (both built-in and custom) defined for a given attribute\r\n   */\r\n  FUNCTION = 'FUNCTION',\r\n}\r\n\r\n/**\r\n * Validation Error Item\r\n * Instances of this class are included in the `ValidationError.errors` property.\r\n */\r\nexport class ValidationErrorItem {\r\n  /**\r\n   * @deprecated Will be removed in v7\r\n   */\r\n  static TypeStringMap = ValidationErrorItemType;\r\n\r\n  /**\r\n   * @deprecated Will be removed in v7\r\n   */\r\n  static Origins = ValidationErrorItemOrigin;\r\n\r\n  /**\r\n   * An error message\r\n   */\r\n  readonly message: string;\r\n\r\n  /**\r\n   * The type/origin of the validation error\r\n   */\r\n  readonly type: keyof typeof ValidationErrorItemType | null;\r\n\r\n  /**\r\n   * The field that triggered the validation error\r\n   */\r\n  readonly path: string | null;\r\n\r\n  /**\r\n   * The value that generated the error\r\n   */\r\n  readonly value: string | null;\r\n\r\n  readonly origin: keyof typeof ValidationErrorItemOrigin | null;\r\n\r\n  /**\r\n   * The DAO instance that caused the validation error\r\n   */\r\n  readonly instance: Model | null;\r\n\r\n  /**\r\n   * A validation \"key\", used for identification\r\n   */\r\n  readonly validatorKey: string | null;\r\n\r\n  /**\r\n   * Property name of the BUILT-IN validator function that caused the validation error (e.g. \"in\" or \"len\"), if applicable\r\n   */\r\n  readonly validatorName: string | null;\r\n\r\n  /**\r\n   * Parameters used with the BUILT-IN validator function, if applicable\r\n   */\r\n  readonly validatorArgs: unknown[];\r\n\r\n  /**\r\n   * Creates a new ValidationError item. Instances of this class are included in the `ValidationError.errors` property.\r\n   *\r\n   * @param message An error message\r\n   * @param type The type/origin of the validation error\r\n   * @param path The field that triggered the validation error\r\n   * @param value The value that generated the error\r\n   * @param instance the DAO instance that caused the validation error\r\n   * @param validatorKey a validation \"key\", used for identification\r\n   * @param fnName property name of the BUILT-IN validator function that caused the validation error (e.g. \"in\" or \"len\"), if applicable\r\n   * @param fnArgs parameters used with the BUILT-IN validator function, if applicable\r\n   */\r\n  constructor(\r\n    message: string,\r\n    type:\r\n      | keyof typeof ValidationErrorItemType\r\n      | keyof typeof ValidationErrorItemOrigin,\r\n    path: string,\r\n    value: string,\r\n    instance: Model,\r\n    validatorKey: string,\r\n    fnName: string,\r\n    fnArgs: unknown[],\r\n  ) {\r\n    this.message = message || '';\r\n    this.type = null;\r\n    this.path = path || null;\r\n\r\n    this.value = value !== undefined ? value : null;\r\n\r\n    this.origin = null;\r\n\r\n    this.instance = instance || null;\r\n\r\n    this.validatorKey = validatorKey || null;\r\n\r\n    this.validatorName = fnName || null;\r\n\r\n    this.validatorArgs = fnArgs || [];\r\n\r\n    if (type) {\r\n      if (this.isValidationErrorItemOrigin(type)) {\r\n        this.origin = type;\r\n      } else {\r\n        const lowercaseType = this.normalizeString(type);\r\n        const realType = ValidationErrorItemType[lowercaseType];\r\n\r\n        if (realType && ValidationErrorItemOrigin[realType]) {\r\n          this.origin = realType;\r\n          this.type = type;\r\n        }\r\n      }\r\n    }\r\n\r\n    // This doesn't need captureStackTrace because it's not a subclass of Error\r\n  }\r\n\r\n  private isValidationErrorItemOrigin(\r\n    origin:\r\n      | keyof typeof ValidationErrorItemOrigin\r\n      | keyof typeof ValidationErrorItemType,\r\n  ): origin is keyof typeof ValidationErrorItemOrigin {\r\n    return (\r\n      ValidationErrorItemOrigin[\r\n        origin as keyof typeof ValidationErrorItemOrigin\r\n      ] !== undefined\r\n    );\r\n  }\r\n\r\n  private normalizeString<T extends string>(str: T): T {\r\n    return str.toLowerCase().trim() as T;\r\n  }\r\n\r\n  /**\r\n   * return a lowercase, trimmed string \"key\" that identifies the validator.\r\n   *\r\n   * Note: the string will be empty if the instance has neither a valid `validatorKey` property nor a valid `validatorName` property\r\n   *\r\n   * @param useTypeAsNS controls whether the returned value is \"namespace\",\r\n   *                    this parameter is ignored if the validator's `type` is not one of ValidationErrorItem.Origins\r\n   * @param NSSeparator a separator string for concatenating the namespace, must be not be empty,\r\n   *                    defaults to \".\" (fullstop). only used and validated if useTypeAsNS is TRUE.\r\n   * @throws {Error}    thrown if NSSeparator is found to be invalid.\r\n   */\r\n  getValidatorKey(useTypeAsNS: boolean, NSSeparator: string): string {\r\n    const useTANS = useTypeAsNS === undefined || Boolean(useTypeAsNS);\r\n    const NSSep = NSSeparator === undefined ? '.' : NSSeparator;\r\n\r\n    const type = this.origin;\r\n    const key = this.validatorKey || this.validatorName;\r\n    const useNS = useTANS && type && ValidationErrorItemOrigin[type];\r\n\r\n    if (useNS && (typeof NSSep !== 'string' || NSSep.length === 0)) {\r\n      throw new Error('Invalid namespace separator given, must be a non-empty string');\r\n    }\r\n\r\n    if (!(typeof key === 'string' && key.length > 0)) {\r\n      return '';\r\n    }\r\n\r\n    return (useNS ? [this.origin, key].join(NSSep) : key).toLowerCase().trim();\r\n  }\r\n}\r\n\r\n/**\r\n * Validation Error. Thrown when the sequelize validation has failed. The error contains an `errors` property,\r\n * which is an array with 1 or more ValidationErrorItems, one for each validation that failed.\r\n *\r\n * @param message Error message\r\n * @param errors Array of ValidationErrorItem objects describing the validation errors\r\n */\r\nclass ValidationError extends BaseError {\r\n  /** Array of ValidationErrorItem objects describing the validation errors */\r\n  readonly errors: ValidationErrorItem[];\r\n\r\n  constructor(\r\n    message: string,\r\n    errors: ValidationErrorItem[],\r\n    options: SequelizeErrorOptions & ErrorOptions = {},\r\n  ) {\r\n    const { stack, ...passUp } = options;\r\n\r\n    super(message, passUp);\r\n\r\n    this.name = 'SequelizeValidationError';\r\n    this.errors = errors || [];\r\n\r\n    // Use provided error message if available...\r\n    if (message) {\r\n      this.message = message;\r\n\r\n      // ... otherwise create a concatenated message out of existing errors.\r\n    } else if (this.errors.length > 0 && this.errors[0].message) {\r\n      this.message = this.errors\r\n        .map(\r\n          (err: ValidationErrorItem) => `${err.type || err.origin}: ${err.message}`,\r\n        )\r\n        .join(',\\n');\r\n    }\r\n\r\n    // Allow overriding the stack if the original stacktrace is uninformative\r\n    if (stack) {\r\n      this.stack = stack;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets all validation error items for the path / field specified.\r\n   *\r\n   * @param path The path to be checked for error items\r\n   *\r\n   * @returns Validation error items for the specified path\r\n   */\r\n  get(path: string): ValidationErrorItem[] {\r\n    const out: ValidationErrorItem[] = [];\r\n\r\n    for (const error of this.errors) {\r\n      if (error.path === path) {\r\n        out.push(error);\r\n      }\r\n    }\r\n\r\n    return out;\r\n  }\r\n}\r\n\r\nexport default ValidationError;\r\n"],
  "mappings": "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",
  "names": []
}
